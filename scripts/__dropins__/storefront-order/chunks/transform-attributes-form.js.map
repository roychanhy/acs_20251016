{"version":3,"file":"transform-attributes-form.js","sources":["/@dropins/storefront-order/src/lib/convertCase.ts","/@dropins/storefront-order/src/data/transforms/transform-attributes-form.ts"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const convertToCamelCase = (key: string): string => {\n  return key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n};\n\nexport const convertToSnakeCase = (key: string): string => {\n  return key.replace(/([A-Z])/g, (letter) => `_${letter.toLowerCase()}`);\n};\n\nexport const convertKeysCase = (\n  data: any,\n  type: 'snakeCase' | 'camelCase',\n  dictionary?: Record<string, string>\n): any => {\n  const typeList = ['string', 'boolean', 'number'];\n  const callback =\n    type === 'camelCase' ? convertToCamelCase : convertToSnakeCase;\n\n  if (Array.isArray(data)) {\n    return data.map((element) => {\n      if (typeList.includes(typeof element) || element === null) return element;\n\n      if (typeof element === 'object') {\n        return convertKeysCase(element, type, dictionary);\n      }\n      return element;\n    });\n  }\n\n  if (data !== null && typeof data === 'object') {\n    return Object.entries(data).reduce((acc, [key, value]) => {\n      const newKey =\n        dictionary && dictionary[key] ? dictionary[key] : callback(key);\n      acc[newKey] =\n        typeList.includes(typeof value) || value === null\n          ? value\n          : convertKeysCase(value, type, dictionary);\n      return acc;\n    }, {} as Record<string, unknown>);\n  }\n\n  return data;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport {\n  AttributesListItems,\n  ResponseAttributesFormItemsProps,\n} from '@/order/types';\nimport { AttributesFormModel } from '../models';\nimport { convertKeysCase, convertToCamelCase } from '@/order/lib/convertCase';\n\nexport const cloneArrayIfExists = (\n  fields: ResponseAttributesFormItemsProps[]\n) => {\n  let multilineItems: any = [];\n\n  for (const element of fields) {\n    if (element.frontend_input !== 'MULTILINE' || element.multiline_count < 2) {\n      continue;\n    }\n\n    for (let i = 2; i <= element.multiline_count; i++) {\n      const newItem = {\n        ...element,\n        name: `${element.code}_${i}`,\n        code: `${element.code}_${i}`,\n        id: `${element.code}_${i}`,\n      };\n\n      multilineItems.push(newItem);\n    }\n  }\n\n  return multilineItems;\n};\n\nexport const transformAttributesForm = (\n  items: ResponseAttributesFormItemsProps[] | AttributesListItems[] | [] = []\n): AttributesFormModel[] => {\n  if (!items?.length) return [];\n\n  const fields = items\n    .filter((el) => !el.frontend_input?.includes('HIDDEN'))\n    ?.map(({ code, ...other }) => {\n      const isDefaultCode = code !== 'country_id' ? code : 'country_code';\n\n      return {\n        ...other,\n        name: isDefaultCode,\n        id: isDefaultCode,\n        code: isDefaultCode,\n      };\n    });\n\n  const multilineItems = cloneArrayIfExists(fields as any);\n\n  const attributesConfig = [...fields, ...multilineItems]\n    .map((item) => {\n      const customUpperCode = convertToCamelCase(item.code);\n\n      return convertKeysCase({ ...item, customUpperCode }, 'camelCase', {\n        frontend_input: 'fieldType',\n        frontend_class: 'className',\n        is_required: 'required',\n        sort_order: 'orderNumber',\n      });\n    })\n    .sort(\n      (a: AttributesFormModel, b: AttributesFormModel) =>\n        a.orderNumber - b.orderNumber\n    );\n\n  return attributesConfig;\n};\n"],"names":["convertToCamelCase","key","_","letter","convertToSnakeCase","convertKeysCase","data","type","dictionary","typeList","callback","element","acc","value","newKey","cloneArrayIfExists","fields","multilineItems","i","newItem","transformAttributesForm","items","_a","el","code","other","isDefaultCode","item","customUpperCode","a","b"],"mappings":"AAgBa,MAAAA,EAAsBC,GAC1BA,EAAI,QAAQ,YAAa,CAACC,EAAGC,IAAWA,EAAO,aAAa,EAGxDC,EAAsBH,GAC1BA,EAAI,QAAQ,WAAaE,GAAW,IAAIA,EAAO,YAAa,CAAA,EAAE,EAG1DE,EAAkB,CAC7BC,EACAC,EACAC,IACQ,CACR,MAAMC,EAAW,CAAC,SAAU,UAAW,QAAQ,EACzCC,EACJH,IAAS,YAAcP,EAAqBI,EAE1C,OAAA,MAAM,QAAQE,CAAI,EACbA,EAAK,IAAKK,GACXF,EAAS,SAAS,OAAOE,CAAO,GAAKA,IAAY,KAAaA,EAE9D,OAAOA,GAAY,SACdN,EAAgBM,EAASJ,EAAMC,CAAU,EAE3CG,CACR,EAGCL,IAAS,MAAQ,OAAOA,GAAS,SAC5B,OAAO,QAAQA,CAAI,EAAE,OAAO,CAACM,EAAK,CAACX,EAAKY,CAAK,IAAM,CAClD,MAAAC,EACJN,GAAcA,EAAWP,CAAG,EAAIO,EAAWP,CAAG,EAAIS,EAAST,CAAG,EAChE,OAAAW,EAAIE,CAAM,EACRL,EAAS,SAAS,OAAOI,CAAK,GAAKA,IAAU,KACzCA,EACAR,EAAgBQ,EAAON,EAAMC,CAAU,EACtCI,CACT,EAAG,EAA6B,EAG3BN,CACT,EClCaS,EACXC,GACG,CACH,IAAIC,EAAsB,CAAC,EAE3B,UAAWN,KAAWK,EACpB,GAAI,EAAAL,EAAQ,iBAAmB,aAAeA,EAAQ,gBAAkB,GAIxE,QAASO,EAAI,EAAGA,GAAKP,EAAQ,gBAAiBO,IAAK,CACjD,MAAMC,EAAU,CACd,GAAGR,EACH,KAAM,GAAGA,EAAQ,IAAI,IAAIO,CAAC,GAC1B,KAAM,GAAGP,EAAQ,IAAI,IAAIO,CAAC,GAC1B,GAAI,GAAGP,EAAQ,IAAI,IAAIO,CAAC,EAC1B,EAEAD,EAAe,KAAKE,CAAO,CAAA,CAIxB,OAAAF,CACT,EAEaG,EAA0B,CACrCC,EAAyE,KAC/C,CDlCf,IAAAC,ECmCX,GAAI,EAACD,GAAA,MAAAA,EAAO,QAAQ,MAAO,CAAC,EAE5B,MAAML,GAASM,EAAAD,EACZ,OAAQE,GAAO,CDtCP,IAAAD,ECsCO,SAACA,EAAAC,EAAG,iBAAH,MAAAD,EAAmB,SAAS,WAAS,IADzC,YAAAA,EAEX,IAAI,CAAC,CAAE,KAAAE,EAAM,GAAGC,KAAY,CACtB,MAAAC,EAAgBF,IAAS,aAAeA,EAAO,eAE9C,MAAA,CACL,GAAGC,EACH,KAAMC,EACN,GAAIA,EACJ,KAAMA,CACR,CAAA,GAGET,EAAiBF,EAAmBC,CAAa,EAkBhD,MAhBkB,CAAC,GAAGA,EAAQ,GAAGC,CAAc,EACnD,IAAKU,GAAS,CACP,MAAAC,EAAkB5B,EAAmB2B,EAAK,IAAI,EAEpD,OAAOtB,EAAgB,CAAE,GAAGsB,EAAM,gBAAAC,CAAA,EAAmB,YAAa,CAChE,eAAgB,YAChB,eAAgB,YAChB,YAAa,WACb,WAAY,aAAA,CACb,CACF,CAAA,EACA,KACC,CAACC,EAAwBC,IACvBD,EAAE,YAAcC,EAAE,WACtB,CAGJ"}