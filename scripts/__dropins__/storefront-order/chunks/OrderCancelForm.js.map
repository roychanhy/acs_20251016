{"version":3,"file":"OrderCancelForm.js","sources":["/@dropins/storefront-order/src/containers/OrderCancelForm/OrderCancelForm.tsx"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { Button, InLineAlert, Picker } from '@adobe-commerce/elsie/components';\nimport '@/order/containers/OrderCancelForm/OrderCancelForm.css';\nimport { Text, useText } from '@adobe-commerce/elsie/i18n';\nimport { Form } from '@/order/components';\nimport { useState } from 'preact/hooks';\nimport { OrderCancelFormProps } from '@/order/types';\nimport { OrderDataModel } from '@/order/data/models';\nimport { events } from '@adobe-commerce/event-bus';\nimport { Container } from '@adobe-commerce/elsie/lib';\nimport { cancelOrder, requestGuestOrderCancel } from '@/order/api';\n\nexport const OrderCancelForm: Container<OrderCancelFormProps> = ({\n  orderRef,\n  pickerProps,\n  submitButtonProps,\n  cancelReasons,\n}) => {\n  const translations = useText({\n    ErrorHeading: 'Order.OrderCancelForm.errorHeading',\n    ErrorDescription: 'Order.OrderCancelForm.errorDescription',\n    orderCancellationLabel: 'Order.OrderCancelForm.label',\n  });\n\n  const [selectedReason, setSelectedReason] = useState<number>(0);\n  const [isErrorVisible, setIsErrorVisible] = useState<boolean>(false);\n  const [isCustomerAuthenticated, setIsCustomerAuthenticated] = useState(false);\n  events.on(\n    'authenticated',\n    (authenticated) => {\n      if (authenticated) {\n        setIsCustomerAuthenticated(true);\n      }\n    },\n    { eager: true } // fetch it on runtime using last state\n  );\n\n  const handleReasonSelect = (event: Event) => {\n    event.preventDefault();\n\n    const value = Number((event.target as HTMLSelectElement).value);\n    setSelectedReason(value);\n  };\n\n  const onSubmit = async (\n    event: SubmitEvent\n  ): Promise<void | null | undefined> => {\n    event.preventDefault();\n    const cancelOrderMutation =\n      orderRef.length > 20 ? requestGuestOrderCancel : cancelOrder;\n    return cancelOrderMutation(\n      orderRef,\n      cancelReasons[selectedReason].text!,\n      (data: OrderDataModel) => {\n        if (!isCustomerAuthenticated) {\n          data.status = 'guest order cancellation requested';\n        }\n        events.emit('order/data', data);\n      },\n      () => {\n        setIsErrorVisible(true);\n      }\n    );\n  };\n\n  return (\n    <Form\n      onSubmit={onSubmit}\n      data-testid=\"order-order-cancel-reasons-form__text\"\n    >\n      {isErrorVisible && (\n        <InLineAlert\n          heading={translations.ErrorHeading}\n          description={translations.ErrorDescription}\n        />\n      )}\n      <div className=\"order-order-cancel-reasons-form__text\">\n        <Text id={'Order.OrderCancelForm.description'} />\n      </div>\n      <Picker\n        name=\"cancellationReasons\"\n        floatingLabel={translations.orderCancellationLabel}\n        defaultOption={cancelReasons[0]}\n        variant=\"primary\"\n        options={cancelReasons}\n        value={String(selectedReason)}\n        handleSelect={handleReasonSelect}\n        required={true}\n        data-testid=\"order-cancellation-reasons-selector\"\n        {...pickerProps}\n      />\n      <div className=\"order-order-cancel-reasons-form__button-container\">\n        <Button\n          variant=\"primary\"\n          data-testid=\"order-cancel-submit-button\"\n          {...submitButtonProps}\n        >\n          <Text id={'Order.OrderCancelForm.button'} />\n        </Button>\n      </div>\n    </Form>\n  );\n};\n"],"names":["OrderCancelForm","orderRef","pickerProps","submitButtonProps","cancelReasons","translations","useText","selectedReason","setSelectedReason","useState","isErrorVisible","setIsErrorVisible","isCustomerAuthenticated","setIsCustomerAuthenticated","events","authenticated","handleReasonSelect","event","value","jsxs","Form","requestGuestOrderCancel","cancelOrder","data","jsx","InLineAlert","Text","Picker","Button"],"mappings":"6gBA2BO,MAAMA,EAAmD,CAAC,CAC/D,SAAAC,EACA,YAAAC,EACA,kBAAAC,EACA,cAAAC,CACF,IAAM,CACJ,MAAMC,EAAeC,EAAQ,CAC3B,aAAc,qCACd,iBAAkB,yCAClB,uBAAwB,6BAAA,CACzB,EAEK,CAACC,EAAgBC,CAAiB,EAAIC,EAAiB,CAAC,EACxD,CAACC,EAAgBC,CAAiB,EAAIF,EAAkB,EAAK,EAC7D,CAACG,EAAyBC,CAA0B,EAAIJ,EAAS,EAAK,EACrEK,EAAA,GACL,gBACCC,GAAkB,CACbA,GACFF,EAA2B,EAAI,CAEnC,EACA,CAAE,MAAO,EAAK,CAChB,EAEM,MAAAG,EAAsBC,GAAiB,CAC3CA,EAAM,eAAe,EAErB,MAAMC,EAAQ,OAAQD,EAAM,OAA6B,KAAK,EAC9DT,EAAkBU,CAAK,CACzB,EAwBE,OAAAC,EAACC,EAAA,CACC,SAvBa,MACfH,IAEAA,EAAM,eAAe,GAEnBhB,EAAS,OAAS,GAAKoB,EAA0BC,GAEjDrB,EACAG,EAAcG,CAAc,EAAE,KAC7BgB,GAAyB,CACnBX,IACHW,EAAK,OAAS,sCAETT,EAAA,KAAK,aAAcS,CAAI,CAChC,EACA,IAAM,CACJZ,EAAkB,EAAI,CAAA,CAE1B,GAME,cAAY,wCAEX,SAAA,CACCD,GAAAc,EAACC,EAAA,CACC,QAASpB,EAAa,aACtB,YAAaA,EAAa,gBAAA,CAC5B,EAEFmB,EAAC,OAAI,UAAU,wCACb,WAACE,EAAK,CAAA,GAAI,oCAAqC,CACjD,CAAA,EACAF,EAACG,EAAA,CACC,KAAK,sBACL,cAAetB,EAAa,uBAC5B,cAAeD,EAAc,CAAC,EAC9B,QAAQ,UACR,QAASA,EACT,MAAO,OAAOG,CAAc,EAC5B,aAAcS,EACd,SAAU,GACV,cAAY,sCACX,GAAGd,CAAA,CACN,EACAsB,EAAC,MAAI,CAAA,UAAU,oDACb,SAAAA,EAACI,EAAA,CACC,QAAQ,UACR,cAAY,6BACX,GAAGzB,EAEJ,SAAAqB,EAACE,EAAK,CAAA,GAAI,8BAAgC,CAAA,CAAA,CAAA,CAE9C,CAAA,CAAA,CAAA,CACF,CAEJ"}