{"version":3,"file":"useGetStoreConfig.js","sources":["/@dropins/storefront-order/src/hooks/api/useGetStoreConfig.tsx"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { getStoreConfig } from '@/order/api';\nimport { useEffect, useState } from 'preact/hooks';\nimport { StoreConfigModel } from '../../data/models';\n\nexport const useGetStoreConfig = () => {\n  const [config, setConfig] = useState<StoreConfigModel | null>(null);\n\n  useEffect(() => {\n    const storeConfigPromiseKey = 'orderStoreConfigPromise';\n\n    const storeConfigString = sessionStorage.getItem('orderStoreConfig');\n\n    if (storeConfigString) {\n      // If the data is already cached in sessionStorage, use it\n      const cachedStoreConfig: StoreConfigModel = JSON.parse(storeConfigString);\n      setConfig(cachedStoreConfig);\n    } else {\n      // This part required to get rid of TS errors\n      const windowWithPromise = window as typeof window & {\n        [key: string]: Promise<StoreConfigModel | null> | undefined;\n      };\n\n      // Check if there's already a global promise for fetching store config\n      if (!windowWithPromise[storeConfigPromiseKey]) {\n        // If not, create one and store it in the global window object\n        windowWithPromise[storeConfigPromiseKey] = getStoreConfig().then(\n          (response) => {\n            if (response) {\n              sessionStorage.setItem(\n                'orderStoreConfig',\n                JSON.stringify(response)\n              );\n            }\n            return response;\n          }\n        );\n      }\n\n      // Use the promise from the global window object\n      windowWithPromise[storeConfigPromiseKey]?.then((response) => {\n        if (response) {\n          setConfig(response);\n        }\n      });\n    }\n  }, []);\n\n  return config;\n};\n"],"names":["useGetStoreConfig","config","setConfig","useState","useEffect","storeConfigPromiseKey","storeConfigString","cachedStoreConfig","windowWithPromise","getStoreConfig","response","_a"],"mappings":"iHAoBO,MAAMA,EAAoB,IAAM,CACrC,KAAM,CAACC,EAAQC,CAAS,EAAIC,EAAkC,IAAI,EAElE,OAAAC,EAAU,IAAM,OACd,MAAMC,EAAwB,0BAExBC,EAAoB,eAAe,QAAQ,kBAAkB,EAEnE,GAAIA,EAAmB,CAEf,MAAAC,EAAsC,KAAK,MAAMD,CAAiB,EACxEJ,EAAUK,CAAiB,CAAA,KACtB,CAEL,MAAMC,EAAoB,OAKrBA,EAAkBH,CAAqB,IAExBG,EAAAH,CAAqB,EAAII,EAAA,EAAiB,KACzDC,IACKA,GACa,eAAA,QACb,mBACA,KAAK,UAAUA,CAAQ,CACzB,EAEKA,EAEX,IAIFC,EAAAH,EAAkBH,CAAqB,IAAvC,MAAAM,EAA0C,KAAMD,GAAa,CACvDA,GACFR,EAAUQ,CAAQ,CACpB,EACD,CAEL,EAAG,EAAE,EAEET,CACT"}