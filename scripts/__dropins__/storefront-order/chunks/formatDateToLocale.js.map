{"version":3,"file":"formatDateToLocale.js","sources":["/@dropins/storefront-order/src/lib/formatDateToLocale.ts"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\n/**\n * Formats a date string according to a specified locale and options.\n * Returns \"Invalid Date\" if the input date string is invalid.\n *\n * @param {string} date - The date string to be formatted.\n * @param {string} [locale='en-US'] - The locale to use for formatting. Defaults to 'en-US'.\n * @param {Intl.DateTimeFormatOptions} [options={}] - Optional formatting options to customize the output.\n * @returns {string} The formatted date string, or \"Invalid Date\" if the input is invalid.\n *\n * @example\n * // Default formatting (en-US locale, MM/DD/YYYY)\n * console.log(formatDateToLocale('2023-08-29'));\n * // Output: \"08/29/2023\"\n *\n * @example\n * // Formatting with a specified locale (e.g., en-GB for DD/MM/YYYY)\n * console.log(formatDateToLocale('2023-08-29', 'en-GB'));\n * // Output: \"29/08/2023\"\n *\n * @example\n * // Formatting with a specified locale and custom options (e.g., de-DE with long month format)\n * console.log(formatDateToLocale('2023-08-29', 'de-DE', { month: 'long', year: 'numeric' }));\n * // Output: \"29. August 2023\"\n *\n * @example\n * // Handling an invalid date string\n * console.log(formatDateToLocale('invalid-date'));\n * // Output: \"Invalid Date\"\n */\nexport const formatDateToLocale = (\n  date: string,\n  locale: string = 'en-US',\n  options: Intl.DateTimeFormatOptions = {}\n): string => {\n  const defaultOptions: Intl.DateTimeFormatOptions = {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n  };\n  const formatOptions: Intl.DateTimeFormatOptions = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  const dateObj = new Date(date);\n\n  if (isNaN(dateObj.getTime())) {\n    return 'Invalid Date';\n  }\n\n  const formatter = new Intl.DateTimeFormat(locale, formatOptions);\n  return formatter.format(dateObj);\n};\n"],"names":["formatDateToLocale","date","locale","options","formatOptions","dateObj"],"mappings":"AA6CO,MAAMA,EAAqB,CAChCC,EACAC,EAAiB,QACjBC,EAAsC,CAAA,IAC3B,CAMX,MAAMC,EAA4C,CAChD,GANiD,CACjD,IAAK,UACL,MAAO,UACP,KAAM,SACR,EAGE,GAAGD,CACL,EAEME,EAAU,IAAI,KAAKJ,CAAI,EAE7B,OAAI,MAAMI,EAAQ,QAAQ,CAAC,EAClB,eAGS,IAAI,KAAK,eAAeH,EAAQE,CAAa,EAC9C,OAAOC,CAAO,CACjC"}