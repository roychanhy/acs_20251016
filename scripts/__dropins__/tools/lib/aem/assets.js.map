{"version":3,"file":"assets.js","sources":["/@dropins/tools/src/lib/aem/assets.ts"],"sourcesContent":["import {\n  provider as UI,\n  Image,\n  type ImageProps,\n} from '@adobe-commerce/elsie/components';\n\nimport { getConfigValue } from '@adobe-commerce/elsie/lib/aem/configs';\nimport type { ResolveImageUrlOptions } from '../resolve-image';\n\nconst AEM_ASSETS_FORMATS = ['gif', 'jpg', 'jpeg', 'png', 'webp'] as const;\nconst AEM_ASSETS_ALLOWED_ROTATIONS = [90, 180, 270] as const;\nconst AEM_ASSETS_ALLOWED_FLIPS = ['h', 'v', 'hv'] as const;\n\n/** The allowed formats for the `AEM Assets` image optimization API. */\nexport type AemAssetsFormat = (typeof AEM_ASSETS_FORMATS)[number];\n\n/** The allowed rotations for the `AEM Assets` image optimization API. */\nexport type AemAssetsRotation = (typeof AEM_ASSETS_ALLOWED_ROTATIONS)[number];\n\n/** The allowed flips for the `AEM Assets` image optimization API. */\nexport type AemAssetsFlip = (typeof AEM_ASSETS_ALLOWED_FLIPS)[number];\n\n/**\n * Defines a crop region of an image.\n * @example\n * ```ts\n * // Crop the image to a 80% width and height, starting at 10% from the top and left.\n * const cropSettings: AemAssetsCropSettings = {\n *   xOrigin: 10,\n *   yOrigin: 10,\n *   width: 80,\n *   height: 80,\n * };\n */\nexport interface AemAssetsCropSettings {\n  /** The (relative) x origin of the crop (between 0 and 100) */\n  xOrigin?: number;\n\n  /** The (relative) y origin of the crop (between 0 and 100) */\n  yOrigin?: number;\n\n  /** The width of the crop (between 0 and 100) */\n  width?: number;\n\n  /** The height of the crop (between 0 and 100) */\n  height?: number;\n}\n\n/**\n * The parameters accepted by the `AEM Assets` image optimization API.\n * @see https://adobe-aem-assets-delivery-experimental.redoc.ly/\n */\nexport interface AemAssetsParams {\n  format: AemAssetsFormat;\n  rotate?: AemAssetsRotation;\n  flip?: AemAssetsFlip;\n  crop?: AemAssetsCropSettings;\n\n  width?: number;\n  height?: number;\n  quality?: number;\n\n  attachment?: boolean;\n  sharpen?: boolean;\n  blur?: number;\n  dpr?: number;\n  smartCrop?: string;\n\n  // For future updates we may miss.\n  [key: string]: unknown;\n}\n\ntype WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };\n\n/** The parameters to be applied to the asset (known width required when using a slot) */\nexport type AemAssetsImageSlotConfigParams = WithRequired<\n  Partial<AemAssetsParams>,\n  'width'\n>;\n\n/** The configuration for an image slot. */\nexport interface AemAssetsImageSlotConfig {\n  /** The alias (i.e. seoName) of the image */\n  alias: string;\n\n  /** The props to be applied to the underlying {@link Image} component */\n  imageProps: Partial<Omit<ImageProps, 'params' | 'width' | 'height'>> & {\n    src: string;\n  };\n\n  /** The parameters to be applied to the asset (known width required when using a slot) */\n  params: AemAssetsImageSlotConfigParams;\n\n  /** The element that will contain the image in the slot */\n  wrapper?: HTMLElement;\n}\n\ninterface RenderContext {\n  replaceWith: (element: HTMLElement) => void;\n}\n\n/**\n * Normalizes the given URL to ensure it is a valid URL.\n * @param {string} url - The URL to normalize.\n * @returns {string} The normalized URL.\n */\nfunction normalizeUrl(url: string): string {\n  let imageUrl = url;\n\n  if (imageUrl.startsWith('//')) {\n    // Use current window's protocol.\n    const { protocol } = window.location;\n    imageUrl = protocol + imageUrl;\n  }\n\n  return imageUrl;\n}\n\n/** Returns whether the given value is a valid flip. */\nfunction isValidFlip(flip: unknown): flip is AemAssetsFlip {\n  return AEM_ASSETS_ALLOWED_FLIPS.includes(flip as AemAssetsFlip);\n}\n\n/** Returns whether the given value is a valid rotation. */\nfunction isValidRotation(rotation: unknown): rotation is AemAssetsRotation {\n  return AEM_ASSETS_ALLOWED_ROTATIONS.includes(rotation as AemAssetsRotation);\n}\n\n/** Returns whether the given value is a valid format. */\nfunction isValidFormat(format: unknown): format is AemAssetsFormat {\n  return AEM_ASSETS_FORMATS.includes(format as AemAssetsFormat);\n}\n\n/** Asserts that the given value is valid. */\nfunction assertUnionParameter(\n  value: unknown,\n  validator: (value: unknown) => boolean,\n  errorMessage: string\n): void {\n  if (value !== undefined && !validator(value)) {\n    throw new Error(errorMessage);\n  }\n}\n\n/** Returns whether AEM Assets is enabled in the Storefront. */\nexport function isAemAssetsEnabled(): boolean {\n  const config = getConfigValue('commerce-assets-enabled');\n\n  return (\n    config &&\n    ((typeof config === 'string' && config.toLowerCase() === 'true') ||\n      (typeof config === 'boolean' && config === true))\n  );\n}\n\n/** The default optimization parameters used globally, unless overriden (per use). */\nexport function getDefaultAemAssetsOptimizationParams(): AemAssetsParams {\n  // See: https://adobe-aem-assets-delivery-experimental.redoc.ly/\n  return {\n    quality: 80,\n    format: 'webp',\n  };\n}\n\n/** Returns true if the given URL is an AEM Assets URL. */\nexport function isAemAssetsUrl(url: string | URL): boolean {\n  const assetsUrl = typeof url === 'string' ? new URL(normalizeUrl(url)) : url;\n\n  if (!assetsUrl.pathname.startsWith('/adobe/assets/urn:aaid:aem')) {\n    return false;\n  }\n\n  return true;\n}\n\n/** Generates an optimized URL for AEM Assets. */\nexport function generateAemAssetsOptimizedUrl(\n  assetUrl: string,\n  alias: string,\n  params: Partial<AemAssetsParams> = {}\n): string {\n  const defaultParams = getDefaultAemAssetsOptimizationParams();\n  const mergedParams: AemAssetsParams = { ...defaultParams, ...params };\n\n  // Destructure the ones that need special handling/validation.\n  const { format, crop, ...optimizedParams } = mergedParams;\n  assertUnionParameter(format, isValidFormat, 'Invalid format');\n  assertUnionParameter(optimizedParams.flip, isValidFlip, 'Invalid flip');\n  assertUnionParameter(\n    optimizedParams.rotate,\n    isValidRotation,\n    'Invalid rotation'\n  );\n\n  const stringifiedParams = Object.fromEntries(\n    Object.entries(optimizedParams).map(([key, value]) => [key, String(value)])\n  );\n\n  const searchParams = new URLSearchParams(stringifiedParams);\n\n  if (crop) {\n    const [xOrigin, yOrigin] = [crop.xOrigin || 0, crop.yOrigin || 0];\n    const [width, height] = [crop.width || 100, crop.height || 100];\n\n    const cropTransform = `${xOrigin}p,${yOrigin}p,${width}p,${height}p`;\n    searchParams.set('crop', cropTransform);\n  }\n\n  return `${assetUrl}/as/${alias}.${format}?${searchParams.toString()}`;\n}\n\n/**\n * Tries to generate an optimized URL for AEM Assets. Returns the given\n * url if AEM Assets is not enabled or is not an AEM Assets URL.\n */\nexport function tryGenerateAemAssetsOptimizedUrl(\n  assetUrl: string,\n  alias: string,\n  params: Partial<AemAssetsParams> = {}\n): string {\n  const assetsEnabled = isAemAssetsEnabled();\n\n  if (!assetsEnabled) {\n    // No-op, doesn't do anything.\n    return assetUrl;\n  }\n\n  const assetsUrl = new URL(normalizeUrl(assetUrl));\n\n  if (!isAemAssetsUrl(assetsUrl)) {\n    // Not an AEM Assets URL, so no-op.\n    return assetUrl;\n  }\n\n  const base = assetsUrl.origin + assetsUrl.pathname;\n  return generateAemAssetsOptimizedUrl(base, alias, params);\n}\n\n/** Creates a slot that renders an AEM Assets image. */\nexport function makeAemAssetsImageSlot(config: AemAssetsImageSlotConfig) {\n  return (ctx: RenderContext) => {\n    const { wrapper, alias, params, imageProps } = config;\n\n    if (!imageProps.src) {\n      throw new Error(\n        'An image source is required. Please provide a `src` or `imageProps.src`.'\n      );\n    }\n\n    const container = wrapper ?? document.createElement('div');\n    const imageSrc = generateAemAssetsOptimizedUrl(\n      imageProps.src,\n      alias,\n      params\n    );\n\n    const imageComponentParams: ResolveImageUrlOptions = {\n      width: params.width,\n      height: params.height,\n\n      // If this is not done, they will be applied by default.\n      // And they are not compatible with the AEM Assets API.\n      crop: undefined,\n      fit: undefined,\n      auto: undefined,\n    };\n\n    const imageComponentProps: ImageProps = {\n      ...imageProps,\n      width: params.width,\n      height: params.height,\n\n      src: imageSrc,\n      params: imageComponentParams,\n    };\n\n    UI.render(Image, imageComponentProps)(container);\n    ctx.replaceWith(container);\n  };\n}\n\nexport function tryRenderAemAssetsImage(\n  ctx: RenderContext,\n  config: AemAssetsImageSlotConfig\n): void {\n  // Renders an equivalent of the default image.\n  function renderDefaultImage(): void {\n    const container = config.wrapper ?? document.createElement('div');\n    const { imageProps, params } = config;\n    const imageComponentProps: ImageProps = {\n      ...imageProps,\n      width: params.width,\n      height: params.height,\n    };\n\n    UI.render(Image, imageComponentProps)(container);\n    ctx.replaceWith(container);\n  }\n\n  const assetsEnabled = isAemAssetsEnabled();\n\n  if (!assetsEnabled) {\n    // No-op, render the default image.\n    renderDefaultImage();\n    return;\n  }\n\n  if (!config.imageProps.src) {\n    throw new Error(\n      'An image source is required. Please provide a `src` or `imageProps.src`.'\n    );\n  }\n\n  const assetsUrl = new URL(normalizeUrl(config.imageProps.src));\n\n  if (!isAemAssetsUrl(assetsUrl)) {\n    // Not an AEM Assets URL, so render the default image.\n    renderDefaultImage();\n    return;\n  }\n\n  makeAemAssetsImageSlot(config)(ctx);\n}\n"],"names":["AEM_ASSETS_FORMATS","AEM_ASSETS_ALLOWED_ROTATIONS","AEM_ASSETS_ALLOWED_FLIPS","normalizeUrl","url","imageUrl","protocol","isValidFlip","flip","isValidRotation","rotation","isValidFormat","format","assertUnionParameter","value","validator","errorMessage","isAemAssetsEnabled","config","getConfigValue","getDefaultAemAssetsOptimizationParams","isAemAssetsUrl","generateAemAssetsOptimizedUrl","assetUrl","alias","params","mergedParams","crop","optimizedParams","stringifiedParams","key","searchParams","xOrigin","yOrigin","width","height","cropTransform","tryGenerateAemAssetsOptimizedUrl","assetsUrl","base","makeAemAssetsImageSlot","ctx","wrapper","imageProps","container","imageSrc","imageComponentParams","imageComponentProps","UI","Image","tryRenderAemAssetsImage","renderDefaultImage"],"mappings":"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"}