{"version":3,"file":"updateProductsFromCart.js","sources":["/@dropins/storefront-cart/src/api/addProductsToCart/graphql/AddProductsToCartMutation.ts","/@dropins/storefront-cart/src/api/updateProductsFromCart/graphql/UpdateProductsMutation.ts","/@dropins/storefront-cart/src/api/updateProductsFromCart/updateProductsFromCart.ts"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { CART_FRAGMENT } from '@/cart/api/graphql/CartFragment';\n\nexport const ADD_PRODUCTS_TO_CART_MUTATION = `\n  mutation ADD_PRODUCTS_TO_CART_MUTATION(\n      $cartId: String!, \n      $cartItems: [CartItemInput!]!,\n      $pageSize: Int! = 100,\n      $currentPage: Int! = 1,\n      $itemsSortInput: QuoteItemsSortInput! = {field: CREATED_AT, order: DESC}\n    ) {\n    addProductsToCart(\n      cartId: $cartId\n      cartItems: $cartItems\n    ) {\n      cart {\n        ...CART_FRAGMENT\n      }\n      user_errors {\n        code\n        message\n      }\n    }\n  }\n    \n  ${CART_FRAGMENT}\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { CART_FRAGMENT } from '@/cart/api/graphql/CartFragment';\n\nexport const UPDATE_PRODUCTS_FROM_CART_MUTATION = `\n  mutation UPDATE_PRODUCTS_FROM_CART_MUTATION(\n      $cartId: String!, \n      $cartItems: [CartItemUpdateInput!]!,\n      $pageSize: Int! = 100,\n      $currentPage: Int! = 1,\n      $itemsSortInput: QuoteItemsSortInput! = {field: CREATED_AT, order: DESC}\n    ) {\n    updateCartItems(\n      input: {\n        cart_id: $cartId\n        cart_items: $cartItems\n      }\n    ) {\n      cart {\n        ...CART_FRAGMENT\n      }\n\n    }\n  }\n\n  ${CART_FRAGMENT}\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { state } from '@/cart/lib/state';\nimport { fetchGraphQl } from '@/cart/api';\nimport { handleFetchError } from '@/cart/lib/fetch-error';\nimport { CartModel } from '@/cart/data/models';\nimport { transformCart } from '@/cart/data/transforms';\nimport { events } from '@adobe-commerce/event-bus';\nimport { publishCartUpdateEvents } from '@/cart/lib/acdl';\nimport { getPersistedCartData } from '@/cart/lib/persisted-data';\nimport { ADD_PRODUCTS_TO_CART_MUTATION } from '../addProductsToCart/graphql/AddProductsToCartMutation';\nimport { UPDATE_PRODUCTS_FROM_CART_MUTATION } from './graphql/UpdateProductsMutation';\n\ntype UpdateProductsFromCart = Array<{\n  uid: string;\n  quantity: number;\n  sku?: string;\n  parentSku?: string;\n  optionsUIDs?: string[];\n  enteredOptions?: { uid: string; value: string }[];\n  giftOptions?: {\n    gift_wrapping_id?: string | null;\n    gift_message: {\n      to: string;\n      from: string;\n      message: string;\n    };\n  };\n  customFields?: Record<string, any>;\n}>;\n\ntype ItemError = {\n  message: string;\n  path?: string[];\n  extensions?: {\n    category: string;\n  };\n};\n\n/**\n * Collects individual item errors from cart items response\n * @param cartItems - The cart items from the response\n * @param updatedItemUIDs - Array of UIDs of items that were updated\n * @returns Array of ItemError objects\n */\nconst collectCartItemErrors = (\n  cartItems: Array<{\n    uid: string;\n    errors?: Array<{ message: string; code: string }>;\n  }>,\n  updatedItemUIDs: string[]\n): ItemError[] => {\n  const itemErrors: ItemError[] = [];\n\n  cartItems\n    .filter(\n      (item) => item.errors && updatedItemUIDs.some((uid) => uid === item.uid)\n    )\n    .forEach((item) => {\n      item.errors?.forEach((error) => {\n        itemErrors.push({\n          message: error.message,\n          path: [item.uid],\n          extensions: {\n            category: error.code,\n          },\n        });\n      });\n    });\n\n  return itemErrors;\n};\n\n/**\n * Creates the arrays of cart items to be sent to the graphql mutations\n *\n * @param items\n * @param currentCartItems\n * @returns {\n *  itemsToAdd: Array<{\n *    sku: string;\n *    parentSku: string;\n *    quantity: number;\n *    optionsUIDs: string[];\n *    enteredOptions: { uid: string; value: string }[];\n *    customFields: Record<string, any>;\n *  }>\n *  itemsToRemove: Array<string>\n *  itemsToUpdate: Array<{\n *    uid: string;\n *    quantity: number;\n *    customFields: Record<string, any>;\n *  }>\n * }\n */\nconst getCartItems = (\n  items: UpdateProductsFromCart,\n  currentCartItems: Array<CartModel['items'][number] & { customFields?: Record<string, any> }>\n) => {\n  const itemsToAdd: Array<{\n    sku?: string;\n    parentSku?: string;\n    quantity: number;\n    optionsUIDs?: string[];\n    enteredOptions?: { uid: string; value: string }[];\n    customFields?: Record<string, any>;\n  }> = [];\n  // Items to remove from the cart will be items that have optionUIDs and\n  // their optionUIDs are not the same as their matching entry in the current cart item identified by the uid\n  const itemsToRemove: Array<string> = [];\n  const itemsToUpdate: Array<{\n    uid: string;\n    quantity: number;\n    giftOptions?: {\n      gift_wrapping_id?: string | null;\n      gift_message: {\n        to: string;\n        from: string;\n        message: string;\n      };\n    };\n    customFields?: Record<string, any>;\n  }> = [];\n\n  items.forEach((item) => {\n    // Check if the item exists in the cart\n    const currentItem = currentCartItems.find(\n      (cartItem) => cartItem.uid === item.uid\n    );\n\n    if (currentItem) {\n      if (item.optionsUIDs) {\n        const currentItemOptions = Object.values(\n          currentItem?.selectedOptionsUIDs ?? {}\n        );\n\n        const { sku, topLevelSku: parentSku } = currentItem;\n        const { optionsUIDs, enteredOptions, quantity, customFields } = item;\n\n        itemsToAdd.push({\n          sku,\n          parentSku,\n          quantity,\n          optionsUIDs,\n          enteredOptions,\n          customFields,\n        });\n\n        // If the item has optionUIDs and they are not the exact same as the current item, remove the item\n        if (\n          item.optionsUIDs.some(\n            (optionUID) => !currentItemOptions.includes(optionUID)\n          )\n        ) {\n          itemsToRemove.push(item.uid);\n        }\n      }\n      else if (item.customFields) {\n        const { sku, topLevelSku: parentSku } = currentItem;\n        const { optionsUIDs, enteredOptions, quantity, customFields } = item;\n\n        itemsToAdd.push({\n          sku,\n          parentSku,\n          quantity,\n          optionsUIDs,\n          enteredOptions,\n          customFields,\n        });\n        itemsToRemove.push(item.uid);\n      }\n      else {\n        itemsToUpdate.push({\n          uid: item.uid,\n          quantity: item.quantity,\n          giftOptions: item.giftOptions,\n          customFields: item.customFields,\n        });\n      }\n    } else {\n      throw Error(\n        `Invalid Cart Item UID: No matching cart entry found for ${item.uid}`\n      );\n    }\n  });\n\n  return {\n    itemsToAdd,\n    itemsToRemove,\n    itemsToUpdate,\n  };\n};\n\nconst DELETE_ITEM_QUANTITY = 0;\n\nexport const updateProductsFromCart = async (\n  items: UpdateProductsFromCart\n): Promise<CartModel | null> => {\n  const cartId = state.cartId;\n  const cart = getPersistedCartData();\n\n  if (!cartId) {\n    return Promise.reject(new Error('Cart ID is not set'));\n  }\n\n  if (!cart) {\n    return Promise.reject(new Error('Cart is not set'));\n  }\n\n  const { itemsToAdd, itemsToRemove, itemsToUpdate } = getCartItems(\n    items,\n    cart.items\n  );\n\n  // Array of promises to be resolved\n  let results: Array<Promise<CartModel | null>> = [];\n\n  // If there are items with options and matching cart items, add the products to the cart and remove the old one.\n  // Note: The SKU must be the incoming parent sku and not the current cart item sku.\n  if (itemsToAdd.length > 0) {\n    results.push(\n      fetchGraphQl(ADD_PRODUCTS_TO_CART_MUTATION, {\n        variables: {\n          cartId,\n          cartItems: itemsToAdd.map(\n            ({\n              parentSku: sku,\n              quantity,\n              optionsUIDs: selected_options,\n              enteredOptions: entered_options,\n              customFields,\n            }) => ({\n              sku,\n              quantity,\n              selected_options,\n              entered_options,\n              ...(customFields ? customFields : {}),\n            })\n          ),\n        },\n      })\n        .then(({ errors, data }) => {\n          // Collect individual item errors from the response\n          const updatedItemsErrors = collectCartItemErrors(\n            data?.addProductsToCart?.cart?.itemsV2.items || [],\n            items.map((item) => item.uid)\n          );\n\n          // handle errors\n          const _errors = [\n            ...(data?.addProductsToCart?.user_errors ?? []),\n            ...(errors ?? []),\n            ...updatedItemsErrors,\n          ];\n\n          if (_errors.length > 0) return handleFetchError(_errors);\n\n          if (itemsToRemove.length > 0) {\n            // remove the old item\n            return updateProductQuantities(\n              cartId,\n              itemsToRemove.map((uid) => ({\n                uid,\n                quantity: DELETE_ITEM_QUANTITY, //Delete Item\n              }))\n            ).catch((error) => {\n              return Promise.reject(\n                new Error(`Failed to update products in cart: ${error}`)\n              );\n            });\n          }\n          return Promise.resolve(transformCart(data?.addProductsToCart?.cart));\n        })\n        .then((payload) => {\n          // emit events\n          events.emit('cart/updated', payload);\n          events.emit('cart/data', payload);\n\n          // Publish cart update events\n          publishCartUpdateEvents(payload!, items, state.locale ?? 'en-US');\n\n          return Promise.resolve(payload);\n        })\n        .catch((error) => {\n          return Promise.reject(\n            new Error(`Failed to add products to cart: ${error}`)\n          );\n        })\n    );\n  }\n\n  if (itemsToUpdate.length > 0) {\n    results.push(\n      updateProductQuantities(cartId, itemsToUpdate).catch((error) => {\n        return Promise.reject(new Error(error));\n      })\n    );\n  }\n\n  // Return the last promise in the results array\n  return Promise.all(results).then((results) => results[results.length - 1]);\n};\n\nconst updateProductQuantities = async (\n  cartId: string,\n  items: UpdateProductsFromCart\n): Promise<CartModel | null> => {\n  return fetchGraphQl(UPDATE_PRODUCTS_FROM_CART_MUTATION, {\n    variables: {\n      cartId,\n      cartItems: items.map(({ uid, quantity, giftOptions }) => ({\n        cart_item_uid: uid,\n        quantity,\n        ...giftOptions,\n      })),\n    },\n  }).then(({ errors, data }) => {\n    // Collect individual item errors from the response using the new function\n    const updatedItemsErrors = collectCartItemErrors(\n      data?.updateCartItems?.cart?.itemsV2.items || [],\n      items.map((item) => item.uid)\n    );\n\n    // handle errors\n    const _errors = [\n      ...(data?.updateCartItems?.user_errors ?? []),\n      ...(errors ?? []),\n      ...updatedItemsErrors,\n    ];\n\n    // transform cart\n    const payload =\n      data?.updateCartItems && transformCart(data.updateCartItems.cart);\n\n    // Emit data event\n    if (payload) {\n      events.emit('cart/data', payload);\n    }\n\n    if (_errors.length > 0) return handleFetchError(_errors);\n\n    // No errors, emit updated event\n    events.emit('cart/updated', payload);\n\n    // emit product updated events\n    if (payload) {\n      const updatedItems = payload.items.filter(\n        (item: CartModel['items'][number]) =>\n          items.some((updateItem) => updateItem.uid === item.uid)\n      );\n\n      events.emit('cart/product/updated', updatedItems);\n    }\n\n    // data collection\n    if (payload) {\n      // Publish cart update events\n      publishCartUpdateEvents(payload, items, state.locale ?? 'en-US');\n    }\n\n    return payload;\n  });\n};\n"],"names":["ADD_PRODUCTS_TO_CART_MUTATION","CART_FRAGMENT","UPDATE_PRODUCTS_FROM_CART_MUTATION","collectCartItemErrors","cartItems","updatedItemUIDs","itemErrors","item","uid","_a","error","getCartItems","items","currentCartItems","itemsToAdd","itemsToRemove","itemsToUpdate","currentItem","cartItem","currentItemOptions","sku","parentSku","optionsUIDs","enteredOptions","quantity","customFields","optionUID","DELETE_ITEM_QUANTITY","updateProductsFromCart","cartId","state","cart","getPersistedCartData","results","fetchGraphQl","selected_options","entered_options","errors","data","updatedItemsErrors","_b","_errors","_c","handleFetchError","updateProductQuantities","transformCart","_d","payload","events","publishCartUpdateEvents","giftOptions","updatedItems","updateItem"],"mappings":"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"}