{"version":3,"file":"CustomerInformationCard.js","sources":["/@dropins/storefront-account/src/containers/AddressForm/AddressForm.tsx","/@dropins/storefront-account/src/lib/validationFields.ts","/@dropins/storefront-account/src/lib/convertToBoolean.ts","/@dropins/storefront-account/src/lib/normalizeGetAddressData.ts","/@dropins/storefront-account/src/lib/getFormValuesFromRef.ts","/@dropins/storefront-account/src/lib/areRequiredFieldsValid.ts","/@dropins/storefront-account/src/lib/checkIsFunction.ts","/@dropins/storefront-account/src/lib/initializeFormDataAndErrors.ts","/@dropins/storefront-account/src/hooks/components/useForm.tsx","/@dropins/storefront-account/src/data/models/attributes-form.ts","/@dropins/storefront-account/src/components/Form/FormInputs/FormInputs.tsx","/@dropins/storefront-account/src/components/AccountLoaders/AccountLoaders.tsx","/@dropins/storefront-account/src/components/Form/Form.tsx","/@dropins/storefront-account/src/lib/getAddressButtonAriaLabel.ts","/@dropins/storefront-account/src/components/AddressCard/AddressCard.tsx","../../node_modules/@adobe-commerce/elsie/src/icons/Add.svg","../../node_modules/@adobe-commerce/elsie/src/icons/ChevronRight.svg","../../node_modules/@adobe-commerce/elsie/src/icons/AddressBook.svg","../../node_modules/@adobe-commerce/elsie/src/icons/EmptyBox.svg","/@dropins/storefront-account/src/components/AddressActions/AddressActions.tsx","/@dropins/storefront-account/src/components/AddressModal/AddressModal.tsx","/@dropins/storefront-account/src/components/EmptyList/EmptyList.tsx","/@dropins/storefront-account/src/lib/manageAddressDeletion.ts","/@dropins/storefront-account/src/configs/defaultAttributePreset.config.ts","/@dropins/storefront-account/src/lib/sortingAddressesList.ts","/@dropins/storefront-account/src/hooks/containers/useAddresses.tsx","/@dropins/storefront-account/src/components/AddressesWrapper/AddressesWrapper.tsx","/@dropins/storefront-account/src/configs/addressField.config.ts","/@dropins/storefront-account/src/lib/getFieldsConfig.ts","/@dropins/storefront-account/src/lib/getFormValues.ts","/@dropins/storefront-account/src/lib/prepareNormalizedData.ts","/@dropins/storefront-account/src/lib/normalizeAttributes.ts","/@dropins/storefront-account/src/lib/serializeAddressForm.ts","/@dropins/storefront-account/src/lib/transformSessionData.ts","/@dropins/storefront-account/src/hooks/containers/useAddressForm.tsx","/@dropins/storefront-account/src/lib/transformDefaultValuesAddresses.ts","/@dropins/storefront-account/src/components/AddressFormWrapper/AddressFormWrapper.tsx"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { classes, Container } from '@adobe-commerce/elsie/lib';\nimport { AddressFormWrapper } from '@/account/components';\nimport { AddressFormProps } from '@/account/types';\n\nexport const AddressForm: Container<AddressFormProps> = ({\n  hideActionFormButtons,\n  formName,\n  showFormLoader,\n  showSaveCheckBox,\n  saveCheckBoxValue,\n  forwardFormRef,\n  slots,\n  addressesFormTitle,\n  className,\n  addressFormId,\n  inputsDefaultValueSet,\n  billingCheckBoxValue,\n  shippingCheckBoxValue,\n  showBillingCheckBox,\n  showShippingCheckBox,\n  isOpen,\n  fieldIdPrefix,\n  onSubmit,\n  onCloseBtnClick,\n  onSuccess,\n  onError,\n  onChange,\n}) => {\n  return (\n    <div className={classes(['account-address-form'])}>\n      <AddressFormWrapper\n        hideActionFormButtons={hideActionFormButtons}\n        formName={formName}\n        showFormLoader={showFormLoader}\n        slots={slots}\n        addressesFormTitle={addressesFormTitle}\n        className={className}\n        addressFormId={addressFormId}\n        inputsDefaultValueSet={inputsDefaultValueSet}\n        shippingCheckBoxValue={shippingCheckBoxValue}\n        billingCheckBoxValue={billingCheckBoxValue}\n        showShippingCheckBox={showShippingCheckBox}\n        showBillingCheckBox={showBillingCheckBox}\n        isOpen={isOpen}\n        fieldIdPrefix={fieldIdPrefix}\n        onSubmit={onSubmit}\n        onCloseBtnClick={onCloseBtnClick}\n        onSuccess={onSuccess}\n        onError={onError}\n        onChange={onChange}\n        forwardFormRef={forwardFormRef}\n        showSaveCheckBox={showSaveCheckBox}\n        saveCheckBoxValue={saveCheckBoxValue}\n      />\n    </div>\n  );\n};\n","/* eslint-disable no-useless-escape */\n\n/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\ntype ValidationConfig = Record<string, string>;\ntype TranslationList = Record<string, string>;\ntype ErrorsList = Record<string, string>;\nexport type ValidationFieldsConfig = {\n  validateRules: Record<string, string>[];\n  code?: string;\n  customUpperCode: string;\n  required: boolean;\n};\n\nenum ConfigEnumLength {\n  MIN_TEXT_LENGTH = 'MIN_TEXT_LENGTH',\n  MAX_TEXT_LENGTH = 'MAX_TEXT_LENGTH',\n  DATE_RANGE_MIN = 'DATE_RANGE_MIN',\n  DATE_RANGE_MAX = 'DATE_RANGE_MAX',\n}\n\nexport enum InputValidation {\n  Numeric = 'numeric',\n  AlphanumWithSpaces = 'alphanum-with-spaces',\n  Alphanumeric = 'alphanumeric',\n  Alpha = 'alpha',\n  Email = 'email',\n  Length = 'length',\n  Date = 'date',\n  Url = 'url',\n}\n\nconst flattenObjectsArray = (arr: ValidationConfig[]): ValidationConfig => {\n  return arr.reduce((acc, obj) => {\n    return { ...acc, [obj.name]: obj.value };\n  }, {});\n};\n\n//The basic material for the functions responsible for validation was taken from https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/lib/validation/rules.js\nexport const validateNumeric = (value: string): boolean => /^\\d+$/.test(value);\n\nexport const validateAlphanumWithSpaces = (value: string): boolean =>\n  /^[a-zA-Z0-9\\s]+$/.test(value);\n\nexport const validateAlphanumeric = (value: string): boolean =>\n  /^[a-zA-Z0-9]+$/.test(value);\n\nexport const validateAlpha = (value: string): boolean =>\n  /^[a-zA-Z]+$/.test(value);\n\nexport const validateEmail = (value: string): boolean =>\n  /^[a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]+(\\.[a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]+)*@([a-z0-9-]+\\.)+[a-z]{2,}$/i.test(\n    value\n  );\n\nexport const validateDate = (value: string): boolean =>\n  /^\\d{4}-\\d{2}-\\d{2}$/.test(value) && !isNaN(Date.parse(value));\n\nexport const isDateWithinRange = (\n  date: string,\n  minTimestamp?: number,\n  maxTimestamp?: number\n): boolean => {\n  const dateTimestamp = new Date(date).getTime() / 1000;\n\n  if (isNaN(dateTimestamp) || dateTimestamp < 0) {\n    return false;\n  }\n\n  if (minTimestamp !== undefined && dateTimestamp < minTimestamp) {\n    return false;\n  }\n\n  if (maxTimestamp !== undefined && dateTimestamp > maxTimestamp) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const convertTimestampToDate = (\n  timestamp: string | null | undefined\n): string => {\n  if (!timestamp || isNaN(Number(timestamp))) {\n    return '';\n  }\n\n  return new Date(parseInt(timestamp, 10) * 1000).toISOString().split('T')[0];\n};\n\nexport const validateUrl = (url: string) => {\n  const urlPattern =\n    /^(https?|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i;\n  return urlPattern.test(url);\n};\n\nexport const validateLength = (\n  value: string,\n  minLength: number,\n  maxLength: number\n): boolean => {\n  const length = value.length;\n  return length >= minLength && length <= maxLength;\n};\n\nexport const validationFields = (\n  value: string,\n  configs: ValidationFieldsConfig,\n  translations: TranslationList,\n  errorsList: ErrorsList\n) => {\n  const {\n    requiredFieldError,\n    lengthTextError,\n    numericError,\n    alphaNumWithSpacesError,\n    alphaNumericError,\n    alphaError,\n    emailError,\n    dateError,\n    urlError,\n    dateLengthError,\n  } = translations;\n\n  const fieldName = configs?.customUpperCode as string;\n\n  const defaultFields = { [fieldName]: '' };\n\n  if (errorsList[fieldName]) {\n    delete errorsList[fieldName];\n  }\n\n  if (configs?.required && (!value || value === 'false')) {\n    return { [fieldName]: requiredFieldError };\n  }\n\n  if (!configs?.required && !value) {\n    return defaultFields;\n  }\n\n  if (!configs?.validateRules?.length) return defaultFields;\n\n  const validateRulesConfig = flattenObjectsArray(configs?.validateRules);\n\n  const min = validateRulesConfig[ConfigEnumLength.MIN_TEXT_LENGTH] ?? 1;\n  const max = validateRulesConfig[ConfigEnumLength.MAX_TEXT_LENGTH] ?? 255;\n  const dateMin = validateRulesConfig[ConfigEnumLength.DATE_RANGE_MIN];\n  const dateMax = validateRulesConfig[ConfigEnumLength.DATE_RANGE_MAX];\n\n  if (!validateLength(value, +min, +max) && !(dateMin || dateMax)) {\n    return {\n      [fieldName]: lengthTextError.replace('{min}', min).replace('{max}', max),\n    };\n  }\n\n  if (!isDateWithinRange(value, +dateMin, +dateMax) && (dateMin || dateMax)) {\n    return {\n      [fieldName]: dateLengthError\n        .replace('{min}', convertTimestampToDate(dateMin))\n        .replace('{max}', convertTimestampToDate(dateMax)),\n    };\n  }\n\n  const validationMap = {\n    [InputValidation.Numeric]: {\n      validate: validateNumeric,\n      error: numericError,\n    },\n    [InputValidation.AlphanumWithSpaces]: {\n      validate: validateAlphanumWithSpaces,\n      error: alphaNumWithSpacesError,\n    },\n    [InputValidation.Alphanumeric]: {\n      validate: validateAlphanumeric,\n      error: alphaNumericError,\n    },\n    [InputValidation.Alpha]: {\n      validate: validateAlpha,\n      error: alphaError,\n    },\n    [InputValidation.Email]: {\n      validate: validateEmail,\n      error: emailError,\n    },\n    [InputValidation.Date]: {\n      validate: validateDate,\n      error: dateError,\n    },\n    [InputValidation.Url]: {\n      validate: validateUrl,\n      error: urlError,\n    },\n  };\n\n  const validation =\n    validationMap[\n      validateRulesConfig['INPUT_VALIDATION'] as keyof typeof validationMap\n    ];\n\n  if (\n    validation &&\n    !validation.validate(value) &&\n    !errorsList[fieldName]?.length\n  ) {\n    return { [fieldName]: validation.error };\n  }\n\n  return defaultFields;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const convertToBoolean = (element: string | number): boolean => {\n  switch (element) {\n    case 'on':\n    case 'true':\n    case 1:\n    case '1':\n      return true;\n    case '0':\n    case 'off':\n    case 'false':\n    case 0:\n      return false;\n    default:\n      return false;\n  }\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { convertKeysCase, convertToSnakeCase } from '@/account/lib/convertCase';\nimport { convertToBoolean } from './convertToBoolean';\n\nconst booleanList = ['true', 'false', 'yes', 'on', 'off'];\n\nconst dictionary: Record<string, string> = {\n  firstName: '',\n  lastName: '',\n  city: '',\n  company: '',\n  countryCode: '',\n  region: '',\n  regionCode: '',\n  regionId: '',\n  id: '',\n  telephone: '',\n  vatId: '',\n  postcode: '',\n  defaultShipping: '',\n  defaultBilling: '',\n  street: '',\n  saveAddressBook: '',\n  prefix: '',\n  middleName: '',\n  fax: '',\n  suffix: '',\n} as const;\n\nexport const groupMultilineFields = (\n  inputObj: Record<string, any>\n): Record<string, any> => {\n  const outputObj: Record<string, any> = {};\n  const multilineFields: Record<\n    string,\n    Array<{ index: number; value: any }>\n  > = {};\n\n  for (const key in inputObj) {\n    if (Object.prototype.hasOwnProperty.call(inputObj, key)) {\n      const value = inputObj[key];\n      const match = key.match(/^(.*)Multiline_(\\d+)$/);\n\n      if (match) {\n        const baseKey: string = match[1];\n        const index: number = parseInt(match[2], 10);\n\n        if (!multilineFields[baseKey]) {\n          multilineFields[baseKey] = [];\n        }\n\n        multilineFields[baseKey].push({ index, value });\n      } else {\n        const relatedMultilineKeys = Object.keys(inputObj).filter((k) =>\n          k.startsWith(`${key}Multiline_`)\n        );\n        if (relatedMultilineKeys.length > 0) {\n          multilineFields[key] = [{ index: 1, value }];\n        } else {\n          outputObj[key] = value;\n        }\n      }\n    }\n  }\n\n  for (const baseKey in multilineFields) {\n    if (Object.prototype.hasOwnProperty.call(multilineFields, baseKey)) {\n      const entries = multilineFields[baseKey];\n      entries.sort((a, b) => a.index - b.index);\n      outputObj[baseKey] = entries.map((entry) => entry.value);\n    }\n  }\n\n  return outputObj;\n};\n\nexport const separateKeys = (\n  inputData: Record<string, any>\n): Record<keyof typeof dictionary, unknown> => {\n  const defaultFields: Record<string, any> = {};\n  const customAttributes: Record<string, string | boolean | number>[] = [];\n\n  for (const key in inputData) {\n    const value = booleanList.includes(inputData[key])\n      ? convertToBoolean(inputData[key])\n      : inputData[key];\n\n    if (Object.prototype.hasOwnProperty.call(inputData, key)) {\n      if (Object.prototype.hasOwnProperty.call(dictionary, key)) {\n        defaultFields[key] = value;\n      } else {\n        customAttributes.push({ code: convertToSnakeCase(key), value });\n      }\n    }\n  }\n\n  return { ...defaultFields, customAttributes };\n};\n\nexport default (fields?: Record<string, any>, isForm = false) => {\n  const newFields = convertKeysCase(fields, 'camelCase', {\n    firstname: 'firstName',\n    lastname: 'lastName',\n    middlename: 'middleName',\n  });\n\n  const result = separateKeys(groupMultilineFields(newFields));\n\n  if (!isForm) return result;\n\n  const [regionCode, regionId] = result.region\n    ? (result.region as string).split(',')\n    : [];\n\n  return {\n    ...result,\n    region: {\n      regionCode,\n      ...(regionId && { regionId: +regionId }),\n    },\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { RefObject } from 'preact';\n\nexport default (formRef: RefObject<HTMLFormElement>): Record<string, any> => {\n  if (!formRef.current) {\n    return {};\n  }\n\n  const elements = formRef.current.elements;\n\n  const formValues = Array.from(elements).reduce(\n    (acc: Record<string, any>, el: any) => {\n      if (el.name) {\n        acc[el.name] = el.type === 'checkbox' ? el.checked : el.value;\n      }\n      return acc;\n    },\n    {}\n  );\n\n  return formValues;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\ntype ErrorsList = {\n  [key: string]: string;\n};\n\nexport default (\n  errorsList: ErrorsList,\n  forValues: Record<string, string | number | boolean>\n): boolean => {\n  if (!Object.keys(errorsList).length) return false;\n\n  const result = Object.keys(errorsList).every(\n    (key) => key in forValues && forValues[key] !== ''\n  );\n\n  return result;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const checkIsFunction = (value: any): value is Function => {\n  return typeof value === 'function';\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport default (\n  fieldsConfig: Array<{\n    customUpperCode?: string;\n    required?: boolean;\n    defaultValue?: unknown;\n  }>\n): {\n  initialData: Record<string, unknown>;\n  errorList: Record<string, string>;\n} => {\n  return fieldsConfig.reduce(\n    (\n      acc: {\n        initialData: Record<string, unknown>;\n        errorList: Record<string, string>;\n      },\n      { customUpperCode, required, defaultValue }\n    ) => {\n      if (required && customUpperCode) {\n        acc.initialData[customUpperCode] = defaultValue || '';\n        acc.errorList[customUpperCode] = '';\n      }\n\n      return acc;\n    },\n    {\n      initialData: {},\n      errorList: {},\n    }\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { useFormProps } from '@/account/types';\nimport {\n  validationFields,\n  ValidationFieldsConfig,\n} from '@/account/lib/validationFields';\nimport normalizeGetAddressData from '@/account/lib/normalizeGetAddressData';\nimport getFormValuesFromRef from '@/account/lib/getFormValuesFromRef';\nimport areRequiredFieldsValid from '@/account/lib/areRequiredFieldsValid';\nimport { checkIsFunction } from '@/account/lib/checkIsFunction';\nimport { CustomerAddressesModel } from '@/account/data/models';\nimport initializeFormDataAndErrors from '@/account/lib/initializeFormDataAndErrors';\n\nconst isObjectNotEmpty = (obj: Record<string, string>) =>\n  Object.keys(obj).length > 0;\n\nexport const useForm = ({\n  fieldsConfig,\n  onSubmit,\n  onChange,\n  setInputChange,\n  formName,\n}: useFormProps) => {\n  const translations = useText({\n    requiredFieldError: 'Account.FormText.requiredFieldError',\n    lengthTextError: 'Account.FormText.lengthTextError',\n    numericError: 'Account.FormText.numericError',\n    alphaNumWithSpacesError: 'Account.FormText.alphaNumWithSpacesError',\n    alphaNumericError: 'Account.FormText.alphaNumericError',\n    alphaError: 'Account.FormText.alphaError',\n    emailError: 'Account.FormText.emailError',\n    dateError: 'Account.FormText.dateError',\n    dateLengthError: 'Account.FormText.dateLengthError',\n    urlError: 'Account.FormText.urlError',\n  });\n\n  const formRef = useRef<HTMLFormElement>(null);\n  const [formData, setFormData] = useState<Record<string, string | number>>({});\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [requiredFields, setRequiredFields] = useState({});\n  const [regionEnabled, setRegionEnabled] = useState(true);\n  const [effectHasRun, setEffectHasRun] = useState(false);\n  const [shouldBlockEffect, setShouldBlockEffect] = useState(false);\n  const [shouldTriggerEffect, setShouldTriggerEffect] = useState(true);\n  const [isDataValid, setIsDataValid] = useState(false);\n\n  useEffect(() => {\n    const getGridRowCount = () => {\n      if (formRef.current) {\n        const computedStyles = window.getComputedStyle(formRef.current);\n        const rows = computedStyles\n          .getPropertyValue('grid-template-rows')\n          .split(' ').length;\n        const checkbox = formRef.current.querySelector(\n          '.account-address-form--saveAddressBook'\n        );\n\n        if (checkbox) {\n          (checkbox as HTMLInputElement).style.gridRow = String(rows - 1);\n        }\n      }\n    };\n\n    getGridRowCount();\n\n    window.addEventListener('resize', getGridRowCount);\n\n    return () => {\n      window.removeEventListener('resize', getGridRowCount);\n    };\n  }, [fieldsConfig?.length]);\n\n  const handleValidationSubmit = useCallback(\n    (disableShowError = false) => {\n      let formValid = true;\n      const errorsList = { ...errors };\n      let firstErrorField: string | null = null;\n\n      for (const [name, value] of Object.entries(formData)) {\n        const fieldConfig = fieldsConfig?.find((config) =>\n          config.customUpperCode.includes(name)\n        );\n\n        const validationResult = validationFields(\n          value.toString(),\n          fieldConfig as ValidationFieldsConfig,\n          translations,\n          errorsList\n        );\n\n        if (validationResult[name]) {\n          Object.assign(errorsList, validationResult);\n          formValid = false;\n        }\n\n        if (!firstErrorField) {\n          firstErrorField =\n            Object.keys(errorsList).find((key) => errorsList[key]) || null;\n        }\n      }\n\n      if (!disableShowError) {\n        setErrors(errorsList);\n      }\n\n      if (firstErrorField && formRef.current && !disableShowError) {\n        const input = formRef.current.elements.namedItem(\n          firstErrorField\n        ) as HTMLElement;\n        input?.focus();\n      }\n\n      return formValid;\n    },\n    [errors, fieldsConfig, formData, translations]\n  );\n\n  const collectFormData = useCallback(\n    (\n      fieldValue: string | number | boolean,\n      name: string,\n      requiredList: Record<string, string>,\n      event: Event | null\n    ) => {\n      const fieldsForm = {\n        ...getFormValuesFromRef(formRef),\n        [name]: fieldValue,\n        ...(name.includes('countryCode') ? { region: '' } : {}),\n      };\n\n      const data = {\n        data: normalizeGetAddressData(fieldsForm, true),\n        isDataValid: areRequiredFieldsValid(requiredList, fieldsForm),\n      };\n      setIsDataValid(data.isDataValid);\n      handleValidationSubmit(true);\n\n      ['selectedShippingAddress', 'selectedBillingAddress'].includes(\n        formName\n      ) &&\n        sessionStorage.setItem(`${formName}_addressData`, JSON.stringify(data));\n      // @ts-ignore\n      onChange?.(data, {}, event);\n    },\n    [handleValidationSubmit, formName, onChange]\n  );\n\n  useEffect(() => {\n    if (fieldsConfig?.length) {\n      const { initialData, errorList } =\n        initializeFormDataAndErrors(fieldsConfig);\n\n      setFormData((prev) => ({\n        ...(initialData as Record<string, string | number>),\n        ...prev,\n      }));\n\n      setErrors(errorList);\n      setRequiredFields(errorList);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(fieldsConfig)]);\n\n  useEffect(() => {\n    if (shouldBlockEffect) return;\n    // This code is responsible for initializing data when we retrieve it from session storage. It validates the data, sets the initial configurations for the form, and sends the data through the callback to check if it's valid or not.\n    const fields = getFormValuesFromRef(formRef);\n    const sessionAddressForm = sessionStorage.getItem(\n      `${formName}_addressData`\n    );\n\n    if (\n      isObjectNotEmpty(formData as Record<string, string>) &&\n      isObjectNotEmpty(requiredFields)\n    ) {\n      let data = {};\n\n      const isDataValid = areRequiredFieldsValid(\n        requiredFields,\n        formData as Record<string, string | number | boolean>\n      );\n\n      if (sessionAddressForm) {\n        data = JSON.parse(sessionAddressForm).data as CustomerAddressesModel;\n      } else {\n        // This code is used as an initializer and needs to run once during the page load in the default state, as the user can pass default parameters via props.\n        data = normalizeGetAddressData(fields, true) ?? {};\n      }\n\n      // @ts-ignore\n      onChange?.({ data, isDataValid }, {}, null);\n      setIsDataValid(isDataValid);\n      setShouldBlockEffect(true);\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [formData, requiredFields]);\n\n  useEffect(() => {\n    if (!shouldTriggerEffect) return;\n\n    const fields = getFormValuesFromRef(formRef);\n    const hasCountryCode = Boolean(fields?.countryCode);\n    const hasRegion = Boolean(fields?.region?.length);\n    const shouldTriggerChange =\n      fields && hasCountryCode && !hasRegion && checkIsFunction(onChange);\n\n    if (shouldTriggerChange) {\n      collectFormData(fields?.region, 'region', requiredFields, null);\n    }\n  }, [\n    shouldTriggerEffect,\n    regionEnabled,\n    fieldsConfig,\n    formRef,\n    onChange,\n    collectFormData,\n    requiredFields,\n    effectHasRun,\n  ]);\n\n  const handleInputChange = useCallback(\n    (event: Event, errorsProp?: Record<string, string>) => {\n      const { name, value, type, checked } = event?.target as HTMLInputElement;\n      const fieldValue = type === 'checkbox' ? checked : value;\n\n      setFormData((prev) => {\n        const updatedFormData = {\n          ...prev,\n          [name]: fieldValue,\n        };\n\n        if (name === 'countryCode') {\n          updatedFormData.region = '';\n          setRegionEnabled(true);\n          setEffectHasRun(false);\n        }\n\n        return updatedFormData as Record<string, string | number>;\n      });\n\n      setInputChange?.({ [name]: fieldValue });\n      setShouldBlockEffect(true);\n\n      const fieldConfig = fieldsConfig?.find((config) =>\n        config.customUpperCode.includes(name)\n      );\n\n      let errorsList = errorsProp ? { ...errorsProp } : { ...errors };\n\n      if (fieldConfig) {\n        const validationResult = validationFields(\n          fieldValue.toString(),\n          fieldConfig as ValidationFieldsConfig,\n          translations,\n          errorsList\n        );\n\n        if (validationResult) {\n          Object.assign(errorsList, validationResult);\n        }\n\n        setErrors(errorsList);\n      }\n\n      collectFormData(fieldValue, name, requiredFields, event);\n    },\n    [\n      setInputChange,\n      fieldsConfig,\n      errors,\n      translations,\n      collectFormData,\n      requiredFields,\n      regionEnabled,\n    ]\n  );\n\n  const onFocus = useCallback((event: Event) => {\n    const { name } = event?.target as HTMLInputElement;\n\n    const fieldConfig = fieldsConfig?.find(\n      (config) => config.customUpperCode === name\n    );\n\n    if (name === 'region' && fieldConfig?.options.length) {\n      setShouldTriggerEffect(false);\n    }\n\n    if (name !== 'countryCode') {\n      setShouldTriggerEffect(false);\n    } else {\n      setShouldTriggerEffect(true);\n    }\n  }, []);\n\n  const handleBlur = useCallback(\n    (event: Event, errorsProp?: Record<string, string>) => {\n      const { name, value, type, checked } = event?.target as HTMLInputElement;\n      const fieldValue = type === 'checkbox' ? checked : value;\n\n      const fieldConfig = fieldsConfig?.find(\n        (config) => config.customUpperCode === name\n      );\n\n      if (fieldConfig) {\n        const errorsList = errorsProp ? { ...errorsProp } : { ...errors };\n\n        const validationResult = validationFields(\n          fieldValue.toString(),\n          fieldConfig as ValidationFieldsConfig,\n          translations,\n          errorsList\n        );\n\n        if (validationResult) {\n          Object.assign(errorsList, validationResult);\n        }\n\n        setErrors(errorsList);\n      }\n    },\n    [errors, fieldsConfig, translations]\n  );\n\n  const handleSubmit = useCallback(\n    (event: SubmitEvent) => {\n      event.preventDefault();\n\n      const formValid = handleValidationSubmit();\n\n      onSubmit?.(event, formValid);\n    },\n    [handleValidationSubmit, onSubmit]\n  );\n\n  return {\n    isDataValid,\n    formData,\n    errors,\n    formRef,\n    handleInputChange,\n    onFocus,\n    handleBlur,\n    handleSubmit,\n    handleValidationSubmit,\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport enum FieldEnumList {\n  BOOLEAN = 'BOOLEAN',\n  DATE = 'DATE',\n  DATETIME = 'DATETIME',\n  DROPDOWN = 'DROPDOWN',\n  FILE = 'FILE',\n  GALLERY = 'GALLERY',\n  HIDDEN = 'HIDDEN',\n  IMAGE = 'IMAGE',\n  MEDIA_IMAGE = 'MEDIA_IMAGE',\n  MULTILINE = 'MULTILINE',\n  MULTISELECT = 'MULTISELECT',\n  PRICE = 'PRICE',\n  SELECT = 'SELECT',\n  TEXT = 'TEXT',\n  TEXTAREA = 'TEXTAREA',\n  UNDEFINED = 'UNDEFINED',\n  VISUAL = 'VISUAL',\n  WEIGHT = 'WEIGHT',\n  EMPTY = '',\n}\n\nexport interface AttributesFormItemsProps {\n  code: string;\n  name: string;\n  id: string;\n  required: boolean;\n  label: string;\n  options: { isDefault: boolean; text: string; value: string }[];\n  entityType: string;\n  className: string;\n  defaultValue: string | boolean | number;\n  fieldType: FieldEnumList;\n  multilineCount: number;\n  isUnique: boolean;\n  orderNumber: number;\n  isHidden: boolean;\n  customUpperCode: string;\n  validateRules: Record<string, string | number | boolean>[];\n}\n\nexport interface AttributesFormModel extends AttributesFormItemsProps {}\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport { classes, Slot } from '@adobe-commerce/elsie/lib';\nimport { memo } from 'preact/compat';\nimport {\n  Field,\n  Input,\n  Picker,\n  Checkbox,\n  InputDate,\n  TextArea,\n} from '@adobe-commerce/elsie/components';\nimport { FieldEnumList } from '@/account/data/models';\nimport { FieldsProps, FormInputsProps } from '@/account/types';\n\nexport const FormInputs: FunctionComponent<FormInputsProps> = memo(\n  ({\n    loading,\n    values,\n    fields = [],\n    errors,\n    className = '',\n    onChange,\n    onBlur,\n    onFocus,\n    slots,\n    fieldIdPrefix,\n  }) => {\n    const itemClassName = `${className}__field`;\n\n    const renderSlot = (item: any, errorMessage: string) => {\n      if (!slots?.[`AddressFormInput_${item.code}`]) return;\n\n      const contextValue = {\n        inputName: item.customUpperCode,\n        handleOnChange: onChange,\n        handleOnBlur: onBlur,\n        handleOnFocus: onFocus,\n        errorMessage,\n        errors,\n        config: item,\n      };\n\n      return (\n        <Slot\n          data-testid={`addressFormInput_${item.code}`}\n          name={`AddressFormInput_${item.code}`}\n          slot={slots[`AddressFormInput_${item.code}`]}\n          context={contextValue}\n          key={item.id}\n        />\n      );\n    };\n\n    const selectElement = (\n      item: any,\n      valueMessage: string,\n      errorMessage: string\n    ) => {\n      const defaultSelectValue =\n        item.options.find(\n          (option: { isDefault: boolean; value: string; text: string }) =>\n            option.isDefault\n        )?.value ??\n        valueMessage ??\n        item.defaultValue;\n\n      return (\n        <>\n          {renderSlot(item, errorMessage) ?? (\n            <Field\n              key={item.id}\n              error={errorMessage}\n              className={classes([\n                itemClassName,\n                `${itemClassName}--${item.id}`,\n                [`${itemClassName}--${item.id}-hidden`, item.isHidden],\n                item.className,\n              ])}\n              data-testid={`${className}--${item.id}`}\n              disabled={loading || item.disabled}\n            >\n              <Picker\n                aria-label={item.label}\n                aria-required={item.required ? 'true' : 'false'}\n                id={fieldIdPrefix ? `${fieldIdPrefix}_${item.code}` : item.code}\n                required={item?.required}\n                name={item.customUpperCode}\n                floatingLabel={`${item.label} ${item.required ? '*' : ''}`}\n                placeholder={item.label!}\n                options={item.options}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                handleSelect={onChange}\n                defaultValue={defaultSelectValue}\n                value={defaultSelectValue}\n              />\n            </Field>\n          )}\n        </>\n      );\n    };\n\n    const inputElement = (\n      item: any,\n      valueMessage: string,\n      errorMessage: string\n    ) => {\n      return (\n        <>\n          {renderSlot(item, errorMessage) ?? (\n            <Field\n              key={item.id}\n              error={errorMessage}\n              className={classes([\n                itemClassName,\n                `${itemClassName}--${item.id}`,\n                [`${itemClassName}--${item.id}-hidden`, item.isHidden],\n                item.className,\n              ])}\n              data-testid={`${className}--${item.id}`}\n              disabled={loading}\n            >\n              <Input\n                aria-label={item.label}\n                aria-required={item.required ? 'true' : 'false'}\n                id={fieldIdPrefix ? `${fieldIdPrefix}_${item.code}` : item.code}\n                type=\"text\"\n                name={item.customUpperCode}\n                value={valueMessage ?? item.defaultValue}\n                placeholder={item.label}\n                floatingLabel={`${item.label} ${item.required ? '*' : ''}`}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                onChange={onChange}\n              />\n            </Field>\n          )}\n        </>\n      );\n    };\n\n    const inputDateElement = (\n      item: any,\n      valueMessage: string,\n      errorMessage: string\n    ) => {\n      return (\n        <>\n          {renderSlot(item, errorMessage) ?? (\n            <Field\n              key={item.id}\n              error={errorMessage}\n              className={classes([\n                itemClassName,\n                `${itemClassName}--${item.id}`,\n                [`${itemClassName}--${item.id}-hidden`, item.isHidden],\n                item.className,\n              ])}\n              data-testid={`${className}--${item.id}`}\n              disabled={loading || item.disabled}\n            >\n              <InputDate\n                aria-label={item.label}\n                aria-required={item.required ? 'true' : 'false'}\n                id={fieldIdPrefix ? `${fieldIdPrefix}_${item.code}` : item.code}\n                type=\"text\"\n                name={item.customUpperCode}\n                value={valueMessage || item.defaultValue}\n                placeholder={item.label}\n                floatingLabel={`${item.label} ${item.required ? '*' : ''}`}\n                onBlur={onBlur}\n                onChange={onChange}\n                disabled={loading || item.disabled}\n              />\n            </Field>\n          )}\n        </>\n      );\n    };\n\n    const inputCheckBoxElement = (\n      item: any,\n      valueMessage: string,\n      errorMessage: string\n    ) => {\n      return (\n        <>\n          {renderSlot(item, errorMessage) ?? (\n            <Field\n              key={item.id}\n              error={errorMessage}\n              className={classes([\n                itemClassName,\n                `${itemClassName}--${item.id}`,\n                [`${itemClassName}--${item.id}-hidden`, item.isHidden],\n                item.className,\n              ])}\n              data-testid={`${className}--${item.id}`}\n              disabled={item?.isHidden ?? loading}\n            >\n              <Checkbox\n                aria-label={item.label}\n                aria-required={item.required ? 'true' : 'false'}\n                aria-hidden={item.isHidden}\n                tabindex={item?.isHidden ? -1 : 0}\n                id={fieldIdPrefix ? `${fieldIdPrefix}_${item.code}` : item.code}\n                name={item.customUpperCode}\n                checked={valueMessage || item.defaultValue}\n                placeholder={item.label}\n                label={`${item.label} ${item.required ? '*' : ''}`}\n                onBlur={onBlur}\n                onChange={onChange}\n              />\n            </Field>\n          )}\n        </>\n      );\n    };\n\n    const textAreaElement = (\n      item: any,\n      valueMessage: string,\n      errorMessage: string\n    ) => {\n      return (\n        <>\n          {renderSlot(item, errorMessage) ?? (\n            <Field\n              key={item.id}\n              error={errorMessage}\n              className={classes([\n                itemClassName,\n                `${itemClassName}--${item.id}`,\n                [`${itemClassName}--${item.id}-hidden`, item.isHidden],\n                item.className,\n              ])}\n              data-testid={`${className}--${item.id}`}\n              disabled={loading}\n            >\n              <TextArea\n                aria-label={item.label}\n                aria-required={item.required ? 'true' : 'false'}\n                id={fieldIdPrefix ? `${fieldIdPrefix}_${item.code}` : item.code}\n                type=\"text\"\n                name={item.customUpperCode}\n                value={valueMessage ?? item.defaultValue}\n                label={`${item.label} ${item.required ? '*' : ''}`}\n                onBlur={onBlur}\n                onChange={onChange}\n              />\n            </Field>\n          )}\n        </>\n      );\n    };\n\n    if (!fields.length) return null;\n\n    return (\n      <>\n        {fields.map((item: FieldsProps) => {\n          const errorMessage = errors?.[item.customUpperCode] as string;\n          const valueMessage = values?.[item.customUpperCode] as string;\n\n          switch (item.fieldType) {\n            case FieldEnumList.TEXT: {\n              if (item.options.length) {\n                return selectElement(item, valueMessage, errorMessage);\n              }\n\n              return inputElement(item, valueMessage, errorMessage);\n            }\n\n            case FieldEnumList.MULTILINE: {\n              return inputElement(item, valueMessage, errorMessage);\n            }\n\n            case FieldEnumList.SELECT: {\n              return selectElement(item, valueMessage, errorMessage);\n            }\n\n            case FieldEnumList.DATE: {\n              return inputDateElement(item, valueMessage, errorMessage);\n            }\n\n            case FieldEnumList.BOOLEAN: {\n              return inputCheckBoxElement(item, valueMessage, errorMessage);\n            }\n\n            case FieldEnumList.TEXTAREA: {\n              return textAreaElement(item, valueMessage, errorMessage);\n            }\n\n            default:\n              return null;\n          }\n        })}\n      </>\n    );\n  }\n);\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { Skeleton, SkeletonRow, Card } from '@adobe-commerce/elsie/components';\nimport '@/account/components/AccountLoaders/AccountLoaders.css';\nimport { classes } from '@adobe-commerce/elsie/lib';\n\nexport const CardLoader = ({\n  testId,\n  withCard = true,\n}: {\n  testId?: string;\n  withCard?: boolean;\n}) => {\n  const defaultSkeleton = (\n    <Skeleton data-testid={testId || 'skeletonLoader'}>\n      <SkeletonRow\n        variant=\"heading\"\n        size=\"xlarge\"\n        fullWidth={false}\n        lines={1}\n      />\n      <SkeletonRow variant=\"heading\" size=\"xlarge\" fullWidth={true} lines={1} />\n      <SkeletonRow variant=\"heading\" size=\"xlarge\" fullWidth={true} lines={1} />\n    </Skeleton>\n  );\n\n  if (withCard) {\n    return defaultSkeleton;\n  }\n\n  return (\n    <Card\n      variant=\"secondary\"\n      className={classes([\n        'account-account-loaders',\n        'account-account-loaders--card-loader',\n      ])}\n    >\n      {defaultSkeleton}\n    </Card>\n  );\n};\n\nexport const AddressFormLoader = () => {\n  return (\n    <Skeleton data-testid=\"addressFormLoader\">\n      <SkeletonRow variant=\"heading\" size=\"medium\" />\n      <SkeletonRow variant=\"empty\" size=\"medium\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" fullWidth={true} />\n      <SkeletonRow size=\"large\" fullWidth={true} lines={3} />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" fullWidth={true} />\n    </Skeleton>\n  );\n};\n\nexport const PickerLoader = (props: any) => {\n  return (\n    <Skeleton\n      {...props}\n      rowGap={'xsmall'}\n      className={classes([\n        'account-account-loaders',\n        'account-account-loaders--picker-loader',\n      ])}\n    >\n      <SkeletonRow variant=\"heading\" size=\"xsmall\" />\n      <SkeletonRow variant=\"empty\" size=\"small\" />\n      <SkeletonRow size=\"small\" />\n    </Skeleton>\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { useForm } from '@/account/hooks/components/useForm';\nimport { FormProps, FormRef } from '@/account/types';\nimport FormInputs from '@/account/components/Form/FormInputs';\nimport { forwardRef, memo, useImperativeHandle } from 'preact/compat';\nimport '@/account/components/Form/Form.css';\nimport { classes, Slot } from '@adobe-commerce/elsie/lib';\nimport normalizeGetAddressData from '@/account/lib/normalizeGetAddressData';\nimport getFormValuesFromRef from '@/account/lib/getFormValuesFromRef';\nimport { AddressFormLoader } from '../AccountLoaders';\nimport { Checkbox } from '@adobe-commerce/elsie/components';\nimport { useText } from '@adobe-commerce/elsie/i18n';\n\nexport const Form = memo(\n  forwardRef<FormRef, FormProps>(\n    ({\n      setInputChange,\n      showFormLoader,\n      slots,\n      name,\n      loading,\n      children,\n      className = 'defaultForm',\n      fieldsConfig,\n      onSubmit,\n      onChange,\n      forwardFormRef,\n      regionOptions,\n      showSaveCheckBox,\n      handleSaveCheckBoxAddress,\n      saveCheckBoxAddress,\n      fieldIdPrefix,\n    }) => {\n      const translations = useText({\n        saveAddressBook: 'Account.AddressForm.formText.saveAddressBook',\n      });\n\n      const {\n        isDataValid,\n        formData,\n        errors,\n        formRef,\n        handleInputChange,\n        handleBlur,\n        handleSubmit,\n        handleValidationSubmit,\n        onFocus,\n      } = useForm({\n        fieldsConfig,\n        onSubmit,\n        onChange,\n        setInputChange,\n        regionOptions,\n        formName: name!,\n      });\n\n      useImperativeHandle(forwardFormRef, () => {\n        const modifyFormRef = getFormValuesFromRef(formRef);\n\n        return {\n          handleValidationSubmit,\n          formData: normalizeGetAddressData(modifyFormRef, true),\n          isDataValid,\n        };\n      });\n\n      if (showFormLoader || !fieldsConfig?.length) return <AddressFormLoader />;\n\n      return (\n        <form\n          className={classes(['account-form', className])}\n          onSubmit={handleSubmit}\n          name={name}\n          ref={formRef}\n        >\n          <FormInputs\n            className={className}\n            loading={loading}\n            fields={fieldsConfig}\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            errors={errors}\n            values={formData}\n            onFocus={onFocus}\n            slots={slots}\n            fieldIdPrefix={fieldIdPrefix}\n          />\n          {slots?.AddressFormInputs ? (\n            <Slot\n              data-testid=\"addressFormInputs\"\n              name=\"AddressFormInputs\"\n              slot={slots.AddressFormInputs}\n              context={{ formActions: { handleChange: handleInputChange } }}\n            />\n          ) : null}\n          {showSaveCheckBox ? (\n            <div className={'account-address-form--saveAddressBook'}>\n              <Checkbox\n                data-testid=\"testSaveAddressBook\"\n                name=\"saveAddressBook\"\n                label={translations.saveAddressBook}\n                // @ts-ignore\n                checked={saveCheckBoxAddress}\n                onChange={(event) => {\n                  handleInputChange(event);\n                  handleSaveCheckBoxAddress?.(event);\n                }}\n              />\n            </div>\n          ) : null}\n          {children}\n        </form>\n      );\n    }\n  )\n);\n","export const getAddressButtonAriaLabel = (\n  defaultShipping?: boolean,\n  defaultBilling?: boolean,\n  translations: Record<string, string> = {},\n  type: 'removeButton' | 'editButton' = 'editButton'\n): string => {\n  const isRemove = type === 'removeButton';\n\n  const labelMap = {\n    shippingAndBilling: {\n      edit: translations.editAddressAriaLabelShippingAndBilling,\n      remove: translations.removeAddressAriaLabelShippingAndBilling,\n    },\n    shipping: {\n      edit: translations.editAddressAriaLabelShipping,\n      remove: translations.removeAddressAriaLabelShipping,\n    },\n    billing: {\n      edit: translations.editAddressAriaLabelBilling,\n      remove: translations.removeAddressAriaLabelBilling,\n    },\n    default: {\n      edit: translations.editAddressAriaLabelDefault,\n      remove: translations.removeAddressAriaLabelDefault,\n    },\n  };\n\n  let key: keyof typeof labelMap = 'default';\n  if (defaultShipping && defaultBilling) key = 'shippingAndBilling';\n  else if (defaultShipping) key = 'shipping';\n  else if (defaultBilling) key = 'billing';\n\n  return isRemove ? labelMap[key].remove : labelMap[key].edit;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport { useCallback, useId, useMemo } from 'preact/compat';\nimport { Card, Button, Tag } from '@adobe-commerce/elsie/components';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport CardLoader from '@/account/components/AccountLoaders';\nimport { AddressCardProps } from '@/account/types';\nimport { CustomerAddressesModel } from '@/account/data/models';\nimport '@/account/components/AddressCard/AddressCard.css';\nimport { Slot } from '@adobe-commerce/elsie/lib';\nimport { getAddressButtonAriaLabel } from '@/account/lib/getAddressButtonAriaLabel';\n\nexport const AddressCard: FunctionComponent<AddressCardProps> = ({\n  slots,\n  selectable,\n  selectShipping,\n  selectBilling,\n  variant = 'secondary',\n  minifiedView,\n  keysSortOrder,\n  addressData,\n  loading,\n  setAddressId,\n  handleRenderModal,\n  handleRenderForm,\n}) => {\n  const addressCardAriaId = useId();\n\n  const minifiedViewKey = minifiedView ? 'minifiedView' : 'fullSizeView';\n\n  const translations = useText({\n    actionRemove: `Account.${minifiedViewKey}.Addresses.addressCard.actionRemove`,\n    actionEdit: `Account.${minifiedViewKey}.Addresses.addressCard.actionEdit`,\n    cardLabelShipping: `Account.${minifiedViewKey}.Addresses.addressCard.cardLabelShipping`,\n    cardLabelBilling: `Account.${minifiedViewKey}.Addresses.addressCard.cardLabelBilling`,\n    defaultLabelText: `Account.${minifiedViewKey}.Addresses.addressCard.defaultLabelText`,\n\n    editAddressAriaLabelDefault: `Account.${minifiedViewKey}.Addresses.addressCard.ariaLabel.editButton.default`,\n    editAddressAriaLabelShipping: `Account.${minifiedViewKey}.Addresses.addressCard.ariaLabel.editButton.shipping`,\n    editAddressAriaLabelBilling: `Account.${minifiedViewKey}.Addresses.addressCard.ariaLabel.editButton.billing`,\n    editAddressAriaLabelShippingAndBilling: `Account.${minifiedViewKey}.Addresses.addressCard.ariaLabel.editButton.shippingAndBilling`,\n\n    removeAddressAriaLabelDefault: `Account.${minifiedViewKey}.Addresses.addressCard.ariaLabel.removeButton.default`,\n    removeAddressAriaLabelShipping: `Account.${minifiedViewKey}.Addresses.addressCard.ariaLabel.removeButton.shipping`,\n    removeAddressAriaLabelBilling: `Account.${minifiedViewKey}.Addresses.addressCard.ariaLabel.removeButton.billing`,\n    removeAddressAriaLabelShippingAndBilling: `Account.${minifiedViewKey}.Addresses.addressCard.ariaLabel.removeButton.shippingAndBilling`,\n  });\n\n  const defaultBillingLabel = translations.cardLabelBilling.toLocaleUpperCase();\n  const defaultShippingLabel =\n    translations.cardLabelShipping.toLocaleUpperCase();\n  const defaultLabelText = translations.defaultLabelText.toLocaleUpperCase();\n\n  const getLabelStatus = useMemo(() => {\n    const defaultValue = {\n      shippingLabel: defaultShippingLabel,\n      billingLabel: defaultBillingLabel,\n      hideShipping: false,\n      hideBilling: false,\n    };\n\n    if (!selectable) {\n      return defaultValue;\n    }\n\n    if (selectShipping && !selectBilling) {\n      return {\n        shippingLabel: defaultLabelText,\n        billingLabel: defaultLabelText,\n        hideShipping: false,\n        hideBilling: true,\n      };\n    } else if (selectBilling && !selectShipping) {\n      return {\n        shippingLabel: defaultLabelText,\n        billingLabel: defaultLabelText,\n        hideShipping: true,\n        hideBilling: false,\n      };\n    } else if (selectBilling && selectShipping) {\n      return defaultValue;\n    }\n\n    return defaultValue;\n  }, [\n    defaultBillingLabel,\n    defaultLabelText,\n    defaultShippingLabel,\n    selectBilling,\n    selectShipping,\n    selectable,\n  ]);\n\n  const handleRemove = useCallback(() => {\n    setAddressId?.(addressData?.id as string);\n    handleRenderModal?.();\n  }, [handleRenderModal, addressData?.id, setAddressId]);\n\n  const handleEdit = useCallback(() => {\n    setAddressId?.(addressData?.id as string);\n    handleRenderForm?.();\n  }, [handleRenderForm, addressData?.id, setAddressId]);\n\n  const normalizeAddress = useMemo(() => {\n    if (!keysSortOrder) return [];\n\n    const { region, ...address } = addressData as CustomerAddressesModel;\n\n    const modifyAddressData = {\n      ...address,\n      ...region,\n    } as any;\n\n    return keysSortOrder\n      .filter(({ name }) => modifyAddressData[name as string])\n      .map((item) => {\n        return {\n          name: item.name,\n          orderNumber: item.orderNumber,\n          value: modifyAddressData[item.name as string],\n          label: item.label,\n        };\n      });\n  }, [addressData, keysSortOrder]);\n\n  const { shippingLabel, billingLabel, hideShipping, hideBilling } =\n    getLabelStatus;\n\n  return (\n    <Card\n      variant={variant}\n      className=\"account-address-card\"\n      data-testid=\"addressCard\"\n    >\n      {loading ? (\n        <CardLoader />\n      ) : (\n        <>\n          <div className=\"account-address-card__action\">\n            {handleRenderModal ? (\n              <Button\n                // @ts-ignore\n                type={'button'}\n                variant=\"tertiary\"\n                onClick={handleRemove}\n                data-testid=\"removeButton\"\n                aria-label={getAddressButtonAriaLabel(\n                  addressData?.defaultShipping,\n                  addressData?.defaultBilling,\n                  translations,\n                  'removeButton'\n                )}\n                aria-describedby={addressCardAriaId}\n              >\n                {translations.actionRemove}\n              </Button>\n            ) : null}\n            {handleRenderForm ? (\n              <Button\n                // @ts-ignore\n                type={'button'}\n                variant=\"tertiary\"\n                onClick={handleEdit}\n                className=\"account-address-card__action--editbutton\"\n                data-testid=\"editButton\"\n                aria-label={getAddressButtonAriaLabel(\n                  addressData?.defaultShipping,\n                  addressData?.defaultBilling,\n                  translations,\n                  'editButton'\n                )}\n                aria-describedby={addressCardAriaId}\n              >\n                {translations.actionEdit}\n              </Button>\n            ) : null}\n          </div>\n          <div\n            className=\"account-address-card__description\"\n            id={addressCardAriaId}\n          >\n            {slots?.AddressCard ? (\n              <Slot\n                name=\"AddressCard\"\n                slot={slots?.AddressCard}\n                context={{ addressData: normalizeAddress }}\n              />\n            ) : (\n              <>\n                {normalizeAddress.map((el, index) => {\n                  const value = !el.label\n                    ? el?.value\n                    : `${el.label}: ${el?.value}`;\n\n                  return (\n                    <p key={index} data-testid={`${el.name}_${index}`}>\n                      {value}\n                    </p>\n                  );\n                })}\n              </>\n            )}\n          </div>\n          {(addressData?.defaultShipping || addressData?.defaultBilling) &&\n          !selectable ? (\n            <div className=\"account-address-card__labels\">\n              {addressData?.defaultShipping ? (\n                <Tag label={defaultShippingLabel} />\n              ) : null}\n              {addressData?.defaultBilling ? (\n                <Tag label={defaultBillingLabel} />\n              ) : null}\n            </div>\n          ) : null}\n          {selectable ? (\n            <div className=\"account-address-card__labels\">\n              {!hideShipping && addressData?.defaultShipping ? (\n                <Tag label={shippingLabel} />\n              ) : null}\n              {!hideBilling && addressData?.defaultBilling ? (\n                <Tag label={billingLabel} />\n              ) : null}\n            </div>\n          ) : null}\n        </>\n      )}\n    </Card>\n  );\n};\n","import * as React from \"react\";\nconst SvgAdd = (props) => /* @__PURE__ */ React.createElement(\"svg\", { id: \"Icon_Add_Base\", \"data-name\": \"Icon \\\\u2013 Add \\\\u2013 Base\", xmlns: \"http://www.w3.org/2000/svg\", width: 24, height: 24, viewBox: \"0 0 24 24\", ...props }, /* @__PURE__ */ React.createElement(\"g\", { id: \"Large\" }, /* @__PURE__ */ React.createElement(\"rect\", { id: \"Placement_area\", \"data-name\": \"Placement area\", width: 24, height: 24, fill: \"#fff\", opacity: 0 }), /* @__PURE__ */ React.createElement(\"g\", { id: \"Add_icon\", \"data-name\": \"Add icon\", transform: \"translate(9.734 9.737)\" }, /* @__PURE__ */ React.createElement(\"line\", { vectorEffect: \"non-scaling-stroke\", id: \"Line_579\", \"data-name\": \"Line 579\", y2: 12.7, transform: \"translate(2.216 -4.087)\", fill: \"none\", stroke: \"currentColor\" }), /* @__PURE__ */ React.createElement(\"line\", { vectorEffect: \"non-scaling-stroke\", id: \"Line_580\", \"data-name\": \"Line 580\", x2: 12.7, transform: \"translate(-4.079 2.263)\", fill: \"none\", stroke: \"currentColor\" }))));\nexport default SvgAdd;\n","import * as React from \"react\";\nconst SvgChevronRight = (props) => /* @__PURE__ */ React.createElement(\"svg\", { id: \"Icon_Chevron_right_Base\", \"data-name\": \"Icon \\\\u2013 Chevron right \\\\u2013 Base\", xmlns: \"http://www.w3.org/2000/svg\", width: 24, height: 24, viewBox: \"0 0 24 24\", ...props }, /* @__PURE__ */ React.createElement(\"g\", { id: \"Large\" }, /* @__PURE__ */ React.createElement(\"rect\", { id: \"Placement_area\", \"data-name\": \"Placement area\", width: 24, height: 24, fill: \"#fff\", opacity: 0 }), /* @__PURE__ */ React.createElement(\"g\", { id: \"Chevron_right_icon\", \"data-name\": \"Chevron right icon\" }, /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", id: \"chevron\", d: \"M199.75,367.5l4.255,-4.255-4.255,-4.255\", transform: \"translate(-189.25 -351.0)\", fill: \"none\", stroke: \"currentColor\" }))));\nexport default SvgChevronRight;\n","import * as React from \"react\";\nconst SvgAddressBook = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 24, height: 24, viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M3.375 7.38672C3.09886 7.38672 2.875 7.61058 2.875 7.88672C2.875 8.16286 3.09886 8.38672 3.375 8.38672V7.38672ZM5.88409 8.38672C6.16023 8.38672 6.38409 8.16286 6.38409 7.88672C6.38409 7.61058 6.16023 7.38672 5.88409 7.38672V8.38672ZM3.375 11.1836C3.09886 11.1836 2.875 11.4075 2.875 11.6836C2.875 11.9597 3.09886 12.1836 3.375 12.1836V11.1836ZM5.88409 12.1836C6.16023 12.1836 6.38409 11.9597 6.38409 11.6836C6.38409 11.4075 6.16023 11.1836 5.88409 11.1836V12.1836ZM3.375 15.6133C3.09886 15.6133 2.875 15.8371 2.875 16.1133C2.875 16.3894 3.09886 16.6133 3.375 16.6133V15.6133ZM5.88409 16.6133C6.16023 16.6133 6.38409 16.3894 6.38409 16.1133C6.38409 15.8371 6.16023 15.6133 5.88409 15.6133V16.6133ZM8.52059 16.4182C8.51422 16.6942 8.73286 16.9232 9.00893 16.9296C9.285 16.9359 9.51396 16.7173 9.52032 16.4412L8.52059 16.4182ZM9.19302 14.8261L8.70612 14.7124C8.70434 14.72 8.70274 14.7277 8.70132 14.7354L9.19302 14.8261ZM11.2762 13.3887L11.4404 13.8611L11.4499 13.8576L11.2762 13.3887ZM12.3195 13.1013C12.4035 12.8382 12.2583 12.5569 11.9953 12.4729C11.7322 12.3889 11.4509 12.5341 11.3669 12.7971L12.3195 13.1013ZM15.7342 16.4412C15.7406 16.7173 15.9695 16.9359 16.2456 16.9296C16.5217 16.9232 16.7403 16.6942 16.734 16.4182L15.7342 16.4412ZM16.0615 14.8261L16.5532 14.7354C16.5518 14.7277 16.5502 14.72 16.5484 14.7124L16.0615 14.8261ZM13.9784 13.3887L13.8046 13.8577L13.8142 13.861L13.9784 13.3887ZM13.8877 12.7971C13.8037 12.5341 13.5223 12.3889 13.2593 12.4729C12.9962 12.5569 12.8511 12.8382 12.9351 13.1013L13.8877 12.7971ZM10.9023 10.418L11.4023 10.418V10.418H10.9023ZM11.2309 8.60993L11.6861 8.81678L11.6861 8.81678L11.2309 8.60993ZM12.0518 12.7684L11.7218 13.1441L11.7682 13.1848L11.823 13.213L12.0518 12.7684ZM13.202 12.7684L13.4308 13.213L13.4787 13.1884L13.5203 13.1541L13.202 12.7684ZM3.375 8.38672H5.88409V7.38672H3.375V8.38672ZM3.375 12.1836H5.88409V11.1836H3.375V12.1836ZM3.375 16.6133H5.88409V15.6133H3.375V16.6133ZM6.41058 2.375H18.844V1.375H6.41058V2.375ZM18.844 2.375C19.4866 2.375 20.125 2.99614 20.125 3.9225H21.125C21.125 2.57636 20.1627 1.375 18.844 1.375V2.375ZM20.125 3.9225V20.0775H21.125V3.9225H20.125ZM20.125 20.0775C20.125 20.9945 19.485 21.625 18.844 21.625V22.625C20.1643 22.625 21.125 21.4105 21.125 20.0775H20.125ZM18.844 21.625H6.41058V22.625H18.844V21.625ZM6.41058 21.625C5.76792 21.625 5.12955 21.0039 5.12955 20.0775H4.12955C4.12955 21.4236 5.09185 22.625 6.41058 22.625V21.625ZM5.12955 20.0775V3.9225H4.12955V20.0775H5.12955ZM5.12955 3.9225C5.12955 3.0055 5.76956 2.375 6.41058 2.375V1.375C5.0902 1.375 4.12955 2.5895 4.12955 3.9225H5.12955ZM9.52032 16.4412C9.53194 15.9373 9.59014 15.4295 9.68473 14.9168L8.70132 14.7354C8.59869 15.2917 8.53362 15.853 8.52059 16.4182L9.52032 16.4412ZM9.67993 14.9397C9.69157 14.8899 9.78099 14.7261 10.1128 14.496C10.4223 14.2813 10.8711 14.0589 11.4404 13.861L11.112 12.9165C10.4856 13.1343 9.94827 13.3931 9.54284 13.6743C9.15974 13.94 8.80542 14.2871 8.70612 14.7124L9.67993 14.9397ZM11.4499 13.8576C11.5852 13.8074 11.7547 13.7102 11.8933 13.6105C11.9656 13.5584 12.0441 13.4954 12.1133 13.4247C12.1723 13.3646 12.2709 13.2534 12.3195 13.1013L11.3669 12.7971C11.3809 12.7532 11.3985 12.7277 11.4022 12.7225C11.407 12.7157 11.4073 12.7164 11.3993 12.7246C11.3827 12.7416 11.3525 12.7676 11.3092 12.7988C11.2674 12.8288 11.222 12.8575 11.1805 12.8808C11.1363 12.9057 11.1089 12.9175 11.1024 12.9199L11.4499 13.8576ZM16.734 16.4182C16.7209 15.853 16.6559 15.2917 16.5532 14.7354L15.5698 14.9168C15.6644 15.4295 15.7226 15.9373 15.7342 16.4412L16.734 16.4182ZM16.5484 14.7124C16.4491 14.2871 16.0948 13.94 15.7117 13.6743C15.3063 13.3931 14.769 13.1343 14.1426 12.9165L13.8142 13.861C14.3834 14.0589 14.8322 14.2813 15.1417 14.496C15.4736 14.7261 15.563 14.8899 15.5746 14.9397L16.5484 14.7124ZM14.1521 12.9199C14.1456 12.9175 14.1183 12.9057 14.074 12.8808C14.0325 12.8575 13.9871 12.8288 13.9453 12.7988C13.9021 12.7676 13.8719 12.7416 13.8552 12.7246C13.8472 12.7164 13.8476 12.7157 13.8524 12.7225C13.856 12.7277 13.8736 12.7532 13.8877 12.7971L12.9351 13.1013C12.9836 13.2534 13.0823 13.3646 13.1412 13.4247C13.2105 13.4954 13.2889 13.5584 13.3612 13.6105C13.4999 13.7102 13.6694 13.8074 13.8046 13.8576L14.1521 12.9199ZM11.4023 10.418C11.4023 9.83385 11.4811 9.26803 11.6861 8.81678L10.7757 8.40309C10.4878 9.03666 10.4023 9.76284 10.4023 10.418H11.4023ZM11.6861 8.81678C11.8053 8.55448 12.0796 8.38672 12.5813 8.38672V7.38672C11.8704 7.38672 11.1213 7.6426 10.7757 8.40309L11.6861 8.81678ZM12.5813 8.38672C13.087 8.38672 13.4614 8.60522 13.5777 8.83539L14.4703 8.38448C14.1169 7.685 13.2884 7.38672 12.5813 7.38672V8.38672ZM13.5777 8.83539C13.7606 9.19738 13.8523 9.72518 13.8523 10.418H14.8523C14.8523 9.66433 14.757 8.95213 14.4703 8.38448L13.5777 8.83539ZM12.5813 12.4492C12.5364 12.4492 12.5158 12.4464 12.5087 12.4451C12.5046 12.4444 12.5042 12.4442 12.5008 12.4428C12.4922 12.4391 12.4782 12.4321 12.438 12.4096C12.4018 12.3893 12.3471 12.358 12.2805 12.3238L11.823 13.213C11.8698 13.2371 11.9055 13.2576 11.9494 13.2821C11.9893 13.3045 12.0449 13.3354 12.1079 13.3623C12.2569 13.426 12.403 13.4492 12.5813 13.4492V12.4492ZM12.3817 12.3927C11.8273 11.9058 11.4022 11.3083 11.4023 10.418L10.4023 10.4179C10.4022 11.6973 11.0412 12.5462 11.7218 13.1441L12.3817 12.3927ZM13.8523 10.418C13.8523 11.3319 13.4575 11.9093 12.8838 12.3828L13.5203 13.1541C14.2611 12.5427 14.8523 11.7035 14.8523 10.418H13.8523ZM12.9733 12.3238C12.7638 12.4316 12.717 12.4492 12.5813 12.4492V13.4492C12.9639 13.4492 13.1869 13.3385 13.4308 13.213L12.9733 12.3238Z\", fill: \"currentColor\" }));\nexport default SvgAddressBook;\n","import * as React from \"react\";\nconst SvgEmptyBox = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 24, height: 24, viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M12.002 21L11.8275 21.4686C11.981 21.5257 12.1528 21.5041 12.2873 21.4106C12.4218 21.3172 12.502 21.1638 12.502 21H12.002ZM3.89502 17.9823H3.39502C3.39502 18.1912 3.52485 18.378 3.72059 18.4509L3.89502 17.9823ZM3.89502 8.06421L4.07193 7.59655C3.91831 7.53844 3.74595 7.55948 3.61082 7.65284C3.47568 7.74619 3.39502 7.89997 3.39502 8.06421H3.89502ZM12.0007 21H11.5007C11.5007 21.1638 11.5809 21.3172 11.7154 21.4106C11.8499 21.5041 12.0216 21.5257 12.1751 21.4686L12.0007 21ZM20.1076 17.9823L20.282 18.4509C20.4778 18.378 20.6076 18.1912 20.6076 17.9823H20.1076ZM20.1076 8.06421H20.6076C20.6076 7.89997 20.527 7.74619 20.3918 7.65284C20.2567 7.55948 20.0843 7.53844 19.9307 7.59655L20.1076 8.06421ZM12.0007 11.1311L11.8238 10.6634C11.6293 10.737 11.5007 10.9232 11.5007 11.1311H12.0007ZM20.2858 8.53191C20.5441 8.43421 20.6743 8.14562 20.5766 7.88734C20.4789 7.62906 20.1903 7.49889 19.932 7.5966L20.2858 8.53191ZM12.002 4.94826L12.1775 4.48008C12.0605 4.43623 11.9314 4.43775 11.8154 4.48436L12.002 4.94826ZM5.87955 6.87106C5.62334 6.97407 5.49915 7.26528 5.60217 7.52149C5.70518 7.77769 5.99639 7.90188 6.2526 7.79887L5.87955 6.87106ZM18.1932 7.80315C18.4518 7.90008 18.74 7.76904 18.8369 7.51047C18.9338 7.2519 18.8028 6.96371 18.5442 6.86678L18.1932 7.80315ZM12 4.94827L11.5879 5.23148C11.6812 5.36719 11.8353 5.44827 12 5.44827C12.1647 5.44827 12.3188 5.36719 12.4121 5.23148L12 4.94827ZM14.0263 2L14.2028 1.53218C13.9875 1.45097 13.7446 1.52717 13.6143 1.71679L14.0263 2ZM21.8421 4.94827L22.2673 5.2113C22.3459 5.08422 22.3636 4.92863 22.3154 4.78717C22.2673 4.64571 22.1584 4.53319 22.0186 4.48045L21.8421 4.94827ZM9.97368 2L10.3857 1.71679C10.2554 1.52717 10.0125 1.45097 9.79721 1.53218L9.97368 2ZM2.15789 4.94827L1.98142 4.48045C1.84161 4.53319 1.73271 4.64571 1.68456 4.78717C1.63641 4.92863 1.65406 5.08422 1.73267 5.2113L2.15789 4.94827ZM12 11.1256L11.6702 11.5014C11.8589 11.667 12.1411 11.667 12.3298 11.5014L12 11.1256ZM15.0395 8.45812L14.8732 7.98659C14.8131 8.00779 14.7576 8.04028 14.7097 8.08232L15.0395 8.45812ZM23 5.65024L23.3288 6.0269C23.5095 5.86916 23.5527 5.60532 23.4318 5.39817C23.3109 5.19102 23.0599 5.09893 22.8337 5.17871L23 5.65024ZM8.96053 8.45812L9.29034 8.08232C9.24244 8.04028 9.18695 8.00779 9.12685 7.98659L8.96053 8.45812ZM1 5.65024L1.16632 5.17871C0.940115 5.09893 0.689119 5.19102 0.568192 5.39817C0.447264 5.60532 0.49048 5.86916 0.671176 6.0269L1 5.65024ZM12.1764 20.5314L4.06945 17.5137L3.72059 18.4509L11.8275 21.4686L12.1764 20.5314ZM4.39502 17.9823V8.06421H3.39502V17.9823H4.39502ZM3.71811 8.53187L11.8251 11.5987L12.1789 10.6634L4.07193 7.59655L3.71811 8.53187ZM11.502 11.1311V21H12.502V11.1311H11.502ZM12.1751 21.4686L20.282 18.4509L19.9332 17.5137L11.8262 20.5314L12.1751 21.4686ZM20.6076 17.9823V8.06421H19.6076V17.9823H20.6076ZM19.9307 7.59655L11.8238 10.6634L12.1776 11.5987L20.2845 8.53187L19.9307 7.59655ZM11.5007 11.1311V21H12.5007V11.1311H11.5007ZM19.932 7.5966L11.8251 10.6634L12.1789 11.5987L20.2858 8.53191L19.932 7.5966ZM11.8154 4.48436L5.87955 6.87106L6.2526 7.79887L12.1885 5.41217L11.8154 4.48436ZM11.8265 5.41645L18.1932 7.80315L18.5442 6.86678L12.1775 4.48008L11.8265 5.41645ZM11.502 4.94826V11.1311H12.502V4.94826H11.502ZM12.4121 5.23148L14.4384 2.28321L13.6143 1.71679L11.5879 4.66507L12.4121 5.23148ZM13.8498 2.46782L21.6656 5.4161L22.0186 4.48045L14.2028 1.53218L13.8498 2.46782ZM21.4169 4.68525L20.5485 6.08919L21.3989 6.61524L22.2673 5.2113L21.4169 4.68525ZM12.4121 4.66507L10.3857 1.71679L9.56162 2.28321L11.5879 5.23148L12.4121 4.66507ZM9.79721 1.53218L1.98142 4.48045L2.33437 5.4161L10.1502 2.46782L9.79721 1.53218ZM1.73267 5.2113L2.60109 6.61524L3.45154 6.08919L2.58312 4.68525L1.73267 5.2113ZM12.3298 11.5014L15.3693 8.83392L14.7097 8.08232L11.6702 10.7498L12.3298 11.5014ZM15.2058 8.92965L23.1663 6.12177L22.8337 5.17871L14.8732 7.98659L15.2058 8.92965ZM22.6712 5.27358L19.7764 7.80067L20.4341 8.554L23.3288 6.0269L22.6712 5.27358ZM12.3298 10.7498L9.29034 8.08232L8.63072 8.83392L11.6702 11.5014L12.3298 10.7498ZM9.12685 7.98659L1.16632 5.17871L0.83368 6.12177L8.79421 8.92965L9.12685 7.98659ZM0.671176 6.0269L3.56591 8.554L4.22356 7.80067L1.32882 5.27358L0.671176 6.0269Z\", fill: \"currentColor\" }));\nexport default SvgEmptyBox;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport { classes } from '@adobe-commerce/elsie/lib';\nimport { Add, ChevronRight } from '@adobe-commerce/elsie/icons';\nimport { Icon } from '@adobe-commerce/elsie/components';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport '@/account/components/AddressActions/AddressActions.css';\nimport { AddressActionsProps } from '@/account/types';\n\nexport const AddressActions: FunctionComponent<AddressActionsProps> = ({\n  selectable,\n  className,\n  addNewAddress,\n  minifiedView,\n  routeAddressesPage,\n}) => {\n  const minifiedViewKey = minifiedView ? 'minifiedView' : 'fullSizeView';\n\n  const translations = useText({\n    viewAllAddressesButton: `Account.${minifiedViewKey}.Addresses.viewAllAddressesButton`,\n    addNewAddressButton: `Account.${minifiedViewKey}.Addresses.addNewAddressButton`,\n    differentAddressButton: `Account.${minifiedViewKey}.Addresses.differentAddressButton`,\n  });\n\n  const TagType = selectable ? 'span' : 'button';\n  const buttonProps = selectable ? {} : { AriaRole: 'button', type: 'button' };\n\n  const nonSelectableViewButton =\n    minifiedView && !addNewAddress\n      ? translations.viewAllAddressesButton\n      : translations.addNewAddressButton;\n\n  const buttonText = selectable\n    ? translations.differentAddressButton\n    : nonSelectableViewButton;\n\n  return (\n    <TagType\n      {...buttonProps}\n      className={classes([\n        'account-actions-address',\n        ['account-actions-address--viewall', minifiedView],\n        ['account-actions-address--address', !minifiedView],\n        ['account-actions-address--selectable', selectable],\n        className,\n      ])}\n      data-testid=\"showRouteFullAddress\"\n      onClick={routeAddressesPage}\n    >\n      <span\n        className=\"account-actions-address__title\"\n        data-testid=\"addressActionsText\"\n      >\n        {buttonText}\n      </span>\n      <Icon\n        source={minifiedView && !addNewAddress ? ChevronRight : Add}\n        size=\"32\"\n      />\n    </TagType>\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport { Button, Modal, ProgressSpinner } from '@adobe-commerce/elsie/components';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport AddressCard from '@/account/components/AddressCard';\nimport '@/account/components/AddressModal/AddressModal.css';\nimport { AddressModalProps } from '@/account/types';\n\nexport const AddressModal: FunctionComponent<AddressModalProps> = ({\n  minifiedView,\n  keysSortOrder,\n  addressData,\n  open,\n  submitLoading,\n  onRemoveAddress,\n  closeModal,\n}) => {\n  const minifiedViewKey = minifiedView ? 'minifiedView' : 'fullSizeView';\n\n  const translations = useText({\n    title: `Account.${minifiedViewKey}.Addresses.removeAddressModal.title`,\n    description: `Account.${minifiedViewKey}.Addresses.removeAddressModal.description`,\n    actionCancel: `Account.${minifiedViewKey}.Addresses.removeAddressModal.actionCancel`,\n    actionConfirm: `Account.${minifiedViewKey}.Addresses.removeAddressModal.actionConfirm`,\n  });\n\n  if (!open) return null;\n\n  return (\n    <Modal\n      className=\"account-address-modal--overlay\"\n      title={<h3>{translations.title}</h3>}\n      size=\"full\"\n      data-testid=\"addressModal\"\n      showCloseButton\n      onClose={closeModal}\n    >\n      <div className=\"account-address-modal\">\n        {submitLoading ? (\n          <div\n            className=\"account-address-modal__spinner\"\n            data-testid=\"progressSpinner\"\n          >\n            <ProgressSpinner stroke={'4'} size={'large'} />\n          </div>\n        ) : null}\n        <p>{translations.description}</p>\n        <AddressCard\n          minifiedView={minifiedView}\n          addressData={addressData}\n          keysSortOrder={keysSortOrder}\n        />\n        <div className=\"account-address-modal__buttons\">\n          <Button\n            // @ts-ignore\n            type={'button'}\n            onClick={closeModal}\n            variant=\"secondary\"\n            disabled={submitLoading}\n          >\n            {translations.actionCancel}\n          </Button>\n          <Button disabled={submitLoading} onClick={onRemoveAddress}>\n            {translations.actionConfirm}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes, useMemo } from 'preact/compat';\nimport { classes } from '@adobe-commerce/elsie/lib';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { Icon, IllustratedMessage } from '@adobe-commerce/elsie/components';\nimport { AddressBook, EmptyBox } from '@adobe-commerce/elsie/icons';\nimport '@/account/components/EmptyList/EmptyList.css';\nimport { EmptyListProps } from '@/account/types';\n\nexport const EmptyList: FunctionComponent<EmptyListProps> = ({\n  typeList,\n  isEmpty,\n  minifiedView,\n  className,\n}) => {\n  const minifiedViewKey = minifiedView ? 'minifiedView' : 'fullSizeView';\n\n  const translations = useText({\n    addressesMessage: `Account.${minifiedViewKey}.EmptyList.Addresses.message`,\n    ordersListMessage: `Account.${minifiedViewKey}.EmptyList.OrdersList.message`,\n  });\n\n  const config = useMemo(() => {\n    switch (typeList) {\n      case 'address':\n        return {\n          icon: AddressBook,\n          text: <p>{translations.addressesMessage}</p>,\n        };\n      case 'orders':\n        return {\n          icon: EmptyBox,\n          text: <p>{translations.ordersListMessage}</p>,\n        };\n      default:\n        return { icon: '', text: '' };\n    }\n  }, [typeList, translations]);\n\n  if (!isEmpty || !typeList || !config.text) return null;\n\n  return (\n    <IllustratedMessage\n      className={classes([\n        'account-empty-list',\n        minifiedView ? 'account-empty-list--minified' : '',\n        className,\n      ])}\n      message={config.text as VNode<HTMLAttributes<HTMLElement>>}\n      icon={<Icon source={config.icon} />}\n      data-testid=\"emptyList\"\n    />\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { updateCustomerAddress } from '../api';\nimport { CustomerAddressesModel } from '../data/models';\n\n/**\n\nManages the deletion of an address from a list. If the address is the last one in the list, it removes any default properties before deletion. If the address is not the last, it ensures that no default properties are set on the item, transfers them if necessary to another address, and then deletes the address.\n\n*/\n\nexport const manageAddressDeletion = async (\n  removeId: string,\n  addressesList: CustomerAddressesModel[]\n) => {\n  if (addressesList.length === 1) {\n    const address = addressesList[0];\n    const isRegionValid = Object.values(address.region as any).every((el) =>\n      Boolean(el)\n    );\n\n    const region = isRegionValid\n      ? {}\n      : { region: { ...address.region, regionId: 0 } };\n\n    const result = await updateCustomerAddress({\n      addressId: Number(address?.id),\n      defaultShipping: false,\n      defaultBilling: false,\n      ...(region as any),\n    });\n\n    return !!result;\n  }\n\n  const newDefaultAddress = addressesList.filter((item) => {\n    return (\n      (item.id !== removeId && (item.defaultBilling || item.defaultShipping)) ||\n      item.id !== removeId\n    );\n  });\n\n  const fallbackDefaultAddress = addressesList[addressesList.length - 1];\n  const updatedDefaultAddress =\n    newDefaultAddress[0] ||\n    (fallbackDefaultAddress?.id !== removeId ? fallbackDefaultAddress : null);\n\n  if (!updatedDefaultAddress || !updatedDefaultAddress.id) return false;\n\n  const result = await updateCustomerAddress({\n    addressId: +updatedDefaultAddress.id,\n    defaultShipping: true,\n    defaultBilling: true,\n  });\n\n  return !!result;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const defaultAttributePreset = [\n  'firstname',\n  'lastname',\n  'city',\n  'company',\n  'country_code',\n  'region',\n  'region_code',\n  'region_id',\n  'telephone',\n  'id',\n  'vat_id',\n  'postcode',\n  'street',\n  'street_multiline_2',\n  'default_shipping',\n  'default_billing',\n  'fax',\n  'prefix',\n  'suffix',\n  'middlename',\n];\n\nexport const defaultAccountAttributePreset = [\n  'email',\n  'firstname',\n  'lastname',\n  'middlename',\n  'gender',\n  'dob',\n  'prefix',\n  'suffix',\n  'fax',\n];\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { CustomerAddressesModel } from '../data/models';\n\nexport default (\n  data: CustomerAddressesModel[],\n  selectShipping: boolean,\n  selectBilling: boolean\n): CustomerAddressesModel[] => {\n  if (\n    (selectShipping && selectBilling) ||\n    (!selectShipping && !selectBilling)\n  ) {\n    return data;\n  }\n\n  const copyAddressList: CustomerAddressesModel[] = data.slice();\n\n  if (selectShipping) {\n    return copyAddressList.sort(\n      (a, b) => Number(b.defaultShipping) - Number(a.defaultShipping)\n    );\n  }\n\n  if (selectBilling) {\n    return copyAddressList.sort(\n      (a, b) => Number(b.defaultBilling) - Number(a.defaultBilling)\n    );\n  }\n\n  return data;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { useState, useEffect, useCallback } from 'preact/hooks';\nimport {\n  getAttributesForm,\n  getCustomerAddress,\n  removeCustomerAddress,\n} from '@/account/api/';\nimport { CustomerAddressesModel } from '@/account/data/models';\nimport { checkIsFunction } from '@/account/lib/checkIsFunction';\nimport { KeysSortOrderProps, useAddressesProps } from '@/account/types';\nimport { manageAddressDeletion } from '@/account/lib/manageAddressDeletion';\nimport { defaultAttributePreset } from '@/account/configs/defaultAttributePreset.config';\nimport { convertToCamelCase } from '@/account/lib/convertCase';\nimport normalizeGetAddressData from '@/account/lib/normalizeGetAddressData';\nimport sortingAddressesList from '@/account/lib/sortingAddressesList';\n\nconst isEmpty = (obj: any): boolean => {\n  if (obj === undefined || obj === null) return true;\n  if (typeof obj !== 'object') return false;\n  return Object.keys(obj).length === 0 || Object.values(obj).every(isEmpty);\n};\n\nexport const useAddresses = ({\n  selectShipping,\n  selectBilling,\n  defaultSelectAddressId,\n  onAddressData,\n  minifiedView,\n  routeAddressesPage,\n  onSuccess,\n}: useAddressesProps) => {\n  const [selectedAddressOption, setSelectedAddressOption] =\n    useState<string>('');\n  const [isModalRendered, setIsModalRendered] = useState<boolean>(false);\n  const [isFormRendered, setIsFormRendered] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [submitLoading, setSubmitLoading] = useState<boolean>(false);\n  const [addNewAddress, setAddNewAddress] = useState<boolean>(false);\n  const [addressId, setEditAddressId] = useState<string>('');\n  const [addressesList, setAddressesList] = useState<CustomerAddressesModel[]>(\n    []\n  );\n  const [keysSortOrder, setKeysSortOrder] = useState<KeysSortOrderProps[] | []>(\n    []\n  );\n\n  const getAddressesList = useCallback(async () => {\n    setLoading(true);\n\n    Promise.all([getAttributesForm('shortRequest'), getCustomerAddress()])\n      .then((response) => {\n        const [attributesFormResponse, addressResponse] = response;\n\n        if (attributesFormResponse) {\n          const result: KeysSortOrderProps[] = attributesFormResponse.map(\n            ({ name, orderNumber, label }) => ({\n              name: convertToCamelCase(name as string),\n              orderNumber,\n              label: !defaultAttributePreset.includes(name as string)\n                ? label\n                : null,\n            })\n          );\n\n          setKeysSortOrder(result);\n        }\n\n        if (addressResponse) {\n          if (minifiedView) {\n            const defaultAddresses = addressResponse.filter(\n              (el) => Boolean(el.defaultShipping) || Boolean(el.defaultBilling)\n            );\n\n            const addressesToSet = defaultAddresses.length\n              ? defaultAddresses\n              : addressResponse.slice(-1);\n\n            setAddressesList(addressesToSet);\n          } else {\n            setAddressesList(addressResponse);\n          }\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [minifiedView]);\n\n  useEffect(() => {\n    getAddressesList();\n  }, [getAddressesList]);\n\n  useEffect(() => {\n    if (!addressesList.length) return;\n\n    if (defaultSelectAddressId === 0) {\n      setAddNewAddress(true);\n      setSelectedAddressOption('0');\n    } else {\n      const item =\n        addressesList.find((el) => +el.id! === defaultSelectAddressId) ||\n        sortingAddressesList(addressesList, selectShipping!, selectBilling!)[0];\n\n      const normalizeAddressData = {\n        data: normalizeGetAddressData(item),\n        isDataValid: !isEmpty(item),\n      };\n\n      setSelectedAddressOption(\n        (defaultSelectAddressId!.toString() || item?.id?.toString()) as string\n      );\n\n      onAddressData?.(normalizeAddressData);\n    }\n  }, [\n    addressesList,\n    defaultSelectAddressId,\n    onAddressData,\n    selectBilling,\n    selectShipping,\n  ]);\n\n  const setEditingAddressId = useCallback((id: string) => {\n    setEditAddressId(id);\n    setAddNewAddress(false);\n  }, []);\n\n  const handleSelectAddressOption = useCallback(\n    (event: Event, item?: {} | CustomerAddressesModel | undefined) => {\n      const value = (event?.target as HTMLInputElement).value;\n      const nextSibling = (event?.target as HTMLInputElement)\n        .nextSibling as HTMLElement;\n\n      setSelectedAddressOption(value);\n\n      const normalizeAddressData = {\n        data: normalizeGetAddressData(item),\n        isDataValid: !isEmpty(normalizeGetAddressData(item)),\n      };\n\n      onAddressData?.(normalizeAddressData);\n      setAddNewAddress(value === '0');\n\n      if (nextSibling) {\n        nextSibling.focus();\n        window.scrollBy(0, 100);\n      }\n    },\n    [onAddressData]\n  );\n\n  const handleRenderForm = useCallback(() => {\n    setIsFormRendered(true);\n  }, []);\n\n  const onCloseBtnClick = useCallback(() => {\n    setEditAddressId('');\n    setIsFormRendered(false);\n    setIsModalRendered(false);\n  }, []);\n\n  const handleRenderModal = useCallback(() => {\n    setIsModalRendered(true);\n  }, []);\n\n  const removeAddress = useCallback(async () => {\n    setSubmitLoading(true);\n\n    await manageAddressDeletion(addressId, addressesList);\n\n    removeCustomerAddress(+addressId)\n      .then(() => {\n        getAddressesList();\n        onCloseBtnClick();\n      })\n      .finally(() => {\n        setSubmitLoading(false);\n      });\n  }, [addressesList, addressId, onCloseBtnClick, getAddressesList]);\n\n  const closeNewAddressForm = useCallback(() => {\n    setAddNewAddress(false);\n  }, []);\n\n  const redirectToAddressesRoute = useCallback(() => {\n    const isClientRoute =\n      checkIsFunction(routeAddressesPage) && minifiedView && !addNewAddress;\n\n    if (isClientRoute) {\n      window.location.href = routeAddressesPage();\n    } else {\n      setAddNewAddress(true);\n      setEditAddressId('');\n    }\n  }, [addNewAddress, routeAddressesPage, minifiedView]);\n\n  const handleOnSuccess = useCallback(async () => {\n    await getAddressesList();\n    await onSuccess?.();\n  }, [getAddressesList, onSuccess]);\n\n  return {\n    keysSortOrder,\n    submitLoading,\n    isModalRendered,\n    isFormRendered,\n    loading,\n    addNewAddress,\n    addressesList,\n    addressId,\n    handleRenderForm,\n    handleRenderModal,\n    removeAddress,\n    onCloseBtnClick,\n    setEditingAddressId,\n    closeNewAddressForm,\n    redirectToAddressesRoute,\n    handleOnSuccess,\n    handleSelectAddressOption,\n    selectedAddressOption,\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { classes } from '@adobe-commerce/elsie/lib';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { memo } from 'preact/compat';\nimport { Fragment, FunctionComponent } from 'preact';\nimport { useAddresses } from '@/account/hooks/containers/useAddresses';\nimport { AddressForm } from '@/account/containers/AddressForm';\nimport { Card, Header } from '@adobe-commerce/elsie/components';\nimport {\n  AddressActions,\n  AddressCard,\n  AddressModal,\n  CardLoader,\n  EmptyList,\n} from '@/account/components';\nimport { AddressesWrapperProps } from '@/account/types';\nimport '@/account/components/AddressesWrapper/AddressesWrapper.css';\nimport sortingAddressesList from '@/account/lib/sortingAddressesList';\n\nexport const AddressesWrapper: FunctionComponent<AddressesWrapperProps> = memo(\n  ({\n    minifiedViewKey,\n    hideActionFormButtons = false,\n    inputName,\n    slots,\n    title = '',\n    addressFormTitle = '',\n    defaultSelectAddressId = '',\n    showFormLoader = false,\n    onAddressData,\n    forwardFormRef,\n    className,\n    showSaveCheckBox = false,\n    saveCheckBoxValue = false,\n    selectShipping = false,\n    selectBilling = false,\n    selectable = false,\n    withHeader = true,\n    minifiedView = false,\n    withActionsInMinifiedView = false,\n    withActionsInFullSizeView = true,\n    inputsDefaultValueSet,\n    showShippingCheckBox = true,\n    showBillingCheckBox = true,\n    shippingCheckBoxValue = true,\n    billingCheckBoxValue = true,\n    routeAddressesPage,\n    onSuccess,\n    onError,\n  }) => {\n    const translations = useText({\n      containerTitle: `Account.${minifiedViewKey}.Addresses.containerTitle`,\n      differentAddressFormTitle: `Account.${minifiedViewKey}.Addresses.differentAddressFormTitle`,\n      editAddressFormTitle: `Account.${minifiedViewKey}.Addresses.editAddressFormTitle`,\n      viewAllAddressesButton: `Account.${minifiedViewKey}.Addresses.viewAllAddressesButton`,\n      newAddressFormTitle: `Account.${minifiedViewKey}.Addresses.newAddressFormTitle`,\n      ariaLabelAddressPicker: `Account.${minifiedViewKey}.Addresses.ariaLabelAddressPicker`,\n    });\n\n    const {\n      keysSortOrder,\n      submitLoading,\n      isModalRendered,\n      isFormRendered,\n      loading,\n      addNewAddress,\n      addressesList,\n      addressId,\n      handleRenderForm,\n      handleRenderModal,\n      removeAddress,\n      onCloseBtnClick,\n      handleOnSuccess,\n      setEditingAddressId,\n      closeNewAddressForm,\n      redirectToAddressesRoute,\n      handleSelectAddressOption,\n      selectedAddressOption,\n    } = useAddresses({\n      defaultSelectAddressId,\n      minifiedView,\n      routeAddressesPage,\n      onSuccess,\n      onAddressData,\n      selectShipping,\n      selectBilling,\n    });\n\n    const headerTitle = title || translations.containerTitle;\n\n    let addressesComponent = null;\n\n    if (selectable) {\n      const sortedAddressesList =\n        sortingAddressesList(addressesList, selectShipping, selectBilling) ||\n        [];\n\n      let addressesFooterSection;\n\n      if (addNewAddress) {\n        addressesFooterSection = (\n          <div\n            className={classes([\n              'account-addresses-form__footer__wrapper',\n              ['account-addresses-form__footer__wrapper-show', addNewAddress],\n            ])}\n          >\n            <AddressForm\n              slots={slots}\n              hideActionFormButtons={hideActionFormButtons}\n              formName={inputName}\n              showFormLoader={showFormLoader}\n              isOpen={addNewAddress}\n              forwardFormRef={forwardFormRef}\n              showSaveCheckBox={showSaveCheckBox}\n              saveCheckBoxValue={saveCheckBoxValue}\n              shippingCheckBoxValue={shippingCheckBoxValue}\n              billingCheckBoxValue={billingCheckBoxValue}\n              addressesFormTitle={\n                addressFormTitle || translations.differentAddressFormTitle\n              }\n              inputsDefaultValueSet={inputsDefaultValueSet}\n              showShippingCheckBox={showShippingCheckBox}\n              showBillingCheckBox={showBillingCheckBox}\n              onCloseBtnClick={closeNewAddressForm}\n              onSuccess={handleOnSuccess}\n              onError={onError}\n              onChange={onAddressData}\n            />\n          </div>\n        );\n      } else if (sortedAddressesList.length) {\n        addressesFooterSection = (\n          <AddressActions\n            selectable={selectable}\n            minifiedView={minifiedView}\n            addNewAddress={addNewAddress}\n            routeAddressesPage={redirectToAddressesRoute}\n          />\n        );\n      } else {\n        addressesFooterSection = null;\n      }\n\n      const generalLabelId = `generalLabel_${headerTitle.replace(/\\s+/g, '')}`;\n\n      addressesComponent = (\n        <div className={'account-addresses-wrapper--select-view'}>\n          <span id={generalLabelId} style=\"display: none;\">\n            {headerTitle}\n          </span>\n          {sortedAddressesList.map((item, index) => {\n            const inputId = `${inputName}_${item.id}`;\n            const labelId = `${inputId}_label`;\n\n            return (\n              <Fragment key={item.id}>\n                <input\n                  data-testid={`radio-${index + 1}`}\n                  type=\"radio\"\n                  name={inputName}\n                  id={inputId}\n                  value={item.id}\n                  checked={selectedAddressOption === item?.id!.toString()}\n                  onChange={(event) => handleSelectAddressOption(event, item)}\n                  aria-labelledby={`${generalLabelId} ${labelId}`}\n                />\n                <label\n                  id={labelId}\n                  htmlFor={inputId}\n                  className={'account-addresses-wrapper__label'}\n                >\n                  <AddressCard\n                    slots={slots}\n                    selectable={selectable}\n                    selectShipping={selectShipping}\n                    selectBilling={selectBilling}\n                    minifiedView={minifiedView}\n                    addressData={item}\n                    keysSortOrder={keysSortOrder}\n                    loading={loading}\n                  />\n                </label>\n              </Fragment>\n            );\n          })}\n\n          {addressesFooterSection && (\n            <div className=\"account-addresses-wrapper__footer-section\">\n              <input\n                aria-label={`${headerTitle} ${translations.ariaLabelAddressPicker}`}\n                data-testid={`radio-0`}\n                type=\"radio\"\n                name={inputName}\n                id={`${inputName}_addressActions`}\n                value={'0'}\n                checked={selectedAddressOption === '0'}\n                onChange={(event) => handleSelectAddressOption(event, {})}\n                tabindex={addressesFooterSection ? 0 : -1}\n              />\n              <label\n                htmlFor={`${inputName}_addressActions`}\n                className={'account-addresses-wrapper__label'}\n              >\n                {addressesFooterSection}\n              </label>\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      addressesComponent = (\n        <>\n          {addressesList.map((item) => (\n            <Fragment key={item.id}>\n              {addressId === item.id && isFormRendered ? (\n                <Card variant=\"secondary\" style={{ marginBottom: 20 }}>\n                  <AddressForm\n                    slots={slots}\n                    isOpen={addressId === item.id && isFormRendered}\n                    addressFormId={addressId}\n                    inputsDefaultValueSet={item}\n                    addressesFormTitle={translations.editAddressFormTitle}\n                    showShippingCheckBox={showShippingCheckBox}\n                    showBillingCheckBox={showBillingCheckBox}\n                    shippingCheckBoxValue={shippingCheckBoxValue}\n                    billingCheckBoxValue={billingCheckBoxValue}\n                    onCloseBtnClick={onCloseBtnClick}\n                    onSuccess={handleOnSuccess}\n                    onError={onError}\n                  />\n                </Card>\n              ) : (\n                <AddressCard\n                  slots={slots}\n                  key={item.id}\n                  minifiedView={minifiedView}\n                  addressData={item}\n                  keysSortOrder={keysSortOrder}\n                  loading={loading}\n                  setAddressId={setEditingAddressId}\n                  handleRenderModal={\n                    (minifiedView && withActionsInMinifiedView) ||\n                    (!minifiedView && withActionsInFullSizeView)\n                      ? handleRenderModal\n                      : undefined\n                  }\n                  handleRenderForm={\n                    (minifiedView && withActionsInMinifiedView) ||\n                    (!minifiedView && withActionsInFullSizeView)\n                      ? handleRenderForm\n                      : undefined\n                  }\n                />\n              )}\n            </Fragment>\n          ))}\n\n          <div className=\"account-addresses__footer\">\n            {addNewAddress ? (\n              <Card variant=\"secondary\">\n                <AddressForm\n                  slots={slots}\n                  isOpen={addNewAddress}\n                  addressesFormTitle={translations.newAddressFormTitle}\n                  inputsDefaultValueSet={inputsDefaultValueSet}\n                  showShippingCheckBox={!!addressesList?.length}\n                  showBillingCheckBox={!!addressesList?.length}\n                  shippingCheckBoxValue={shippingCheckBoxValue}\n                  billingCheckBoxValue={billingCheckBoxValue}\n                  onCloseBtnClick={closeNewAddressForm}\n                  onSuccess={handleOnSuccess}\n                  onError={onError}\n                />\n              </Card>\n            ) : (\n              <AddressActions\n                minifiedView={minifiedView}\n                addNewAddress={addNewAddress}\n                routeAddressesPage={redirectToAddressesRoute}\n              />\n            )}\n          </div>\n        </>\n      );\n    }\n\n    return (\n      <div>\n        {withHeader ? (\n          <Header\n            title={headerTitle}\n            divider={!minifiedView}\n            className={minifiedView ? 'account-addresses-header' : ''}\n          />\n        ) : null}\n        <div\n          className={classes(['account-addresses-wrapper', className])}\n          data-testid=\"addressesIdWrapper\"\n        >\n          <AddressModal\n            minifiedView={minifiedView}\n            addressData={addressesList?.find((el) => el.id === addressId)}\n            keysSortOrder={keysSortOrder}\n            submitLoading={submitLoading}\n            open={isModalRendered}\n            closeModal={onCloseBtnClick}\n            onRemoveAddress={removeAddress}\n          />\n          {loading ? (\n            <CardLoader testId={'addressSkeletonLoader'} withCard={false} />\n          ) : !selectable ? (\n            <EmptyList\n              isEmpty={!addressesList?.length}\n              typeList=\"address\"\n              minifiedView={minifiedView}\n            />\n          ) : (\n            <AddressForm\n              slots={slots}\n              hideActionFormButtons={hideActionFormButtons}\n              formName={inputName}\n              isOpen={!addressesList?.length}\n              forwardFormRef={forwardFormRef}\n              showSaveCheckBox={showSaveCheckBox}\n              saveCheckBoxValue={saveCheckBoxValue}\n              shippingCheckBoxValue={shippingCheckBoxValue}\n              billingCheckBoxValue={billingCheckBoxValue}\n              inputsDefaultValueSet={inputsDefaultValueSet}\n              showShippingCheckBox={showShippingCheckBox}\n              showBillingCheckBox={showBillingCheckBox}\n              onCloseBtnClick={closeNewAddressForm}\n              onSuccess={handleOnSuccess}\n              onError={onError}\n              onChange={onAddressData}\n            />\n          )}\n          {addressesComponent}\n        </div>\n      </div>\n    );\n  }\n);\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FieldEnumList } from '../data/models';\n\nconst defaultCheckBox = {\n  entityType: 'CUSTOMER_ADDRESS',\n  isUnique: false,\n  options: [],\n  multilineCount: 0,\n  validateRules: [],\n  defaultValue: false,\n  fieldType: FieldEnumList.BOOLEAN,\n  className: '',\n  required: false,\n  orderNumber: 90,\n  isHidden: false,\n};\n\nexport const defaultShippingCheckBox = {\n  ...defaultCheckBox,\n  label: 'Set as default shipping address',\n  name: 'default_shipping',\n  id: 'default_shipping',\n  code: 'default_shipping',\n  customUpperCode: 'defaultShipping',\n};\n\nexport const defaultBillingCheckBox = {\n  ...defaultCheckBox,\n  label: 'Set as default billing address',\n  name: 'default_billing',\n  id: 'default_billing',\n  code: 'default_billing',\n  customUpperCode: 'defaultBilling',\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { AttributesFormModel } from '../data/models';\n\nexport const getFieldsConfig = (\n  itemValues: Record<string, any>,\n  attributesFormList: AttributesFormModel[]\n) => {\n  return attributesFormList?.map((field) => {\n    const newItemValues = {\n      ...itemValues,\n      firstName: itemValues.firstname ?? itemValues.firstName,\n      lastName: itemValues.lastname ?? itemValues.lastName,\n      middleName: itemValues.middlename ?? itemValues.middleName,\n    };\n    const newField = JSON.parse(JSON.stringify(field));\n\n    if (Object.hasOwn(newItemValues, field.customUpperCode)) {\n      const value =\n        newItemValues[field.customUpperCode as keyof typeof newItemValues];\n\n      if (field.customUpperCode === 'region' && typeof value === 'object') {\n        newField.defaultValue =\n          value.regionCode && value.regionId\n            ? `${value.regionCode},${value.regionId}`\n            : value.region ?? value.regionCode;\n      } else {\n        newField.defaultValue = value;\n      }\n    }\n\n    return newField;\n  });\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const getFormValues = (form: HTMLFormElement) => {\n  if (!form) return null;\n\n  const formData = new FormData(form);\n\n  const checkboxes = form.querySelectorAll(\n    'input[type=\"checkbox\"]'\n    // eslint-disable-next-line no-undef\n  ) as NodeListOf<HTMLInputElement>;\n  checkboxes.forEach((checkbox: HTMLInputElement) => {\n    if (!formData.has(checkbox.name)) {\n      formData.set(checkbox.name, 'false');\n    }\n    if (checkbox.checked) {\n      formData.set(checkbox.name, 'true');\n    }\n  });\n\n  if (formData && typeof formData.entries === 'function') {\n    const entries = formData.entries();\n    if (entries && typeof entries[Symbol.iterator] === 'function') {\n      return JSON.parse(JSON.stringify(Object.fromEntries(entries))) || {};\n    }\n  }\n\n  return {};\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { Country, RegionTransform } from '../data/models';\n\ntype Field = {\n  customUpperCode: string;\n  defaultValue?: string | boolean | number;\n  options?: any[];\n  required?: boolean;\n  disabled?: boolean;\n};\n\ninterface ProcessFieldsProps {\n  fields: Field[];\n  countryOptions: Country[];\n  regionOptions: RegionTransform[];\n  isRequiredRegion: boolean;\n  isRequiredPostCode: boolean;\n  disableField: boolean;\n  addressId?: string | number;\n}\n\nexport default ({\n  fields,\n  addressId,\n  countryOptions,\n  disableField,\n  regionOptions,\n  isRequiredRegion,\n  isRequiredPostCode,\n}: ProcessFieldsProps): Field[] => {\n  const result = fields\n    .filter((item) => {\n      const defaultShippingBilling =\n        addressId &&\n        (item.customUpperCode === 'defaultShipping' ||\n          item.customUpperCode === 'defaultBilling');\n\n      return !(defaultShippingBilling && item.defaultValue);\n    })\n    .map((element) => {\n      if (element.customUpperCode === 'countryCode') {\n        return {\n          ...element,\n          options: countryOptions,\n          disabled: disableField,\n        };\n      }\n\n      if (element.customUpperCode === 'postcode') {\n        return { ...element, required: isRequiredPostCode };\n      }\n\n      if (element.customUpperCode === 'region') {\n        return {\n          ...element,\n          options: regionOptions,\n          required: isRequiredRegion,\n          disabled: disableField,\n        };\n      }\n\n      return element;\n    });\n\n  return result;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { convertToSnakeCase } from './convertCase';\n\nexport const normalizeAttributes = (\n  input: Record<string, any>,\n  type = 'address'\n) => {\n  const baseKeys =\n    type === 'address'\n      ? [\n          'region',\n          'city',\n          'company',\n          'countryCode',\n          'countryId',\n          'defaultBilling',\n          'defaultShipping',\n          'fax',\n          'firstName',\n          'lastName',\n          'middleName',\n          'postcode',\n          'prefix',\n          'street',\n          'suffix',\n          'telephone',\n          'vatId',\n          'addressId',\n        ]\n      : [\n          'email',\n          'firstName',\n          'lastName',\n          'middleName',\n          'gender',\n          'dob',\n          'prefix',\n          'suffix',\n          'fax',\n        ];\n\n  const result: Record<string, any> = {};\n  const customAttributes: Record<string, any>[] = [];\n\n  Object.keys(input).forEach((key: string) => {\n    if (baseKeys.includes(key)) {\n      result[key] = input[key];\n    } else {\n      customAttributes.push({\n        attribute_code: convertToSnakeCase(key),\n        value: input[key],\n      });\n    }\n  });\n\n  if (customAttributes.length > 0) {\n    result.custom_attributesV2 = customAttributes;\n  }\n\n  return result;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { CustomerAddressesModel } from '../data/models';\nimport { convertToBoolean } from './convertToBoolean';\nimport { normalizeAttributes } from './normalizeAttributes';\n\nexport const serializeAddressForm = (\n  formValues: Record<string, string>\n): CustomerAddressesModel => {\n  const streetListKeys = ['street', 'streetMultiline_1', 'streetMultiline_2'];\n  const elementValues = ['on', 'off', 'true', 'false'];\n  const streetList: string[] = [];\n  const modifyFormCheckBoxValues: Record<string, boolean> = {};\n\n  for (const key in formValues) {\n    const value = formValues[key];\n\n    if (elementValues.includes(value)) {\n      modifyFormCheckBoxValues[key] = convertToBoolean(value);\n    }\n\n    if (streetListKeys.includes(key)) {\n      streetList.push(value);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { street, streetMultiline_2, streetMultiline_1, region, ...props } =\n    formValues;\n  const [regionCode, regionId] = region\n    ? region.split(',')\n    : [undefined, undefined];\n\n  const regionConfigs =\n    regionId && regionCode\n      ? {\n          regionId: +regionId,\n          regionCode,\n        }\n      : { region: regionCode };\n\n  const result = normalizeAttributes({\n    ...props,\n    ...modifyFormCheckBoxValues,\n    region: { ...regionConfigs },\n    street: streetList,\n  });\n\n  return result;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { RegionTransform } from '../data/models';\n\ntype InputData = Record<string, any>;\n\nexport default (input: InputData, regions: RegionTransform[]): InputData => {\n  const transformedData: InputData = {};\n\n  for (const key in input) {\n    if (Object.prototype.hasOwnProperty.call(input, key)) {\n      const value = input[key];\n\n      if (key === 'region' && value.regionId) {\n        const foundRegion = regions.find(\n          (region) => region?.id === value.regionId\n        );\n        if (foundRegion) {\n          transformedData[key] = {\n            ...value,\n            text: foundRegion.text,\n          };\n        } else {\n          transformedData[key] = value;\n        }\n      } else if (Array.isArray(value)) {\n        transformedData[key] = value[0] || '';\n        value.slice(1).forEach((val: any, index: number) => {\n          transformedData[`${key}Multiline_${index + 2}`] = val;\n        });\n      } else {\n        transformedData[key] = value;\n      }\n    }\n  }\n\n  return transformedData;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport {\n  createCustomerAddress,\n  getAttributesForm,\n  updateCustomerAddress,\n  getCountries,\n} from '@/account/api';\nimport {\n  defaultShippingCheckBox,\n  defaultBillingCheckBox,\n} from '@/account/configs/addressField.config';\nimport {\n  AttributesFormModel,\n  Country,\n  CustomerAddressesModel,\n} from '@/account/data/models';\nimport { getFieldsConfig } from '@/account/lib/getFieldsConfig';\nimport { getFormValues } from '@/account/lib/getFormValues';\nimport prepareNormalizedData from '@/account/lib/prepareNormalizedData';\nimport { serializeAddressForm } from '@/account/lib/serializeAddressForm';\nimport transformSessionData from '@/account/lib/transformSessionData';\nimport { useAddressFormProps } from '@/account/types';\nimport { VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { useCallback, useEffect, useMemo, useState } from 'preact/hooks';\n\nexport const findNonEmptyObject = (\n  obj1: Record<string, unknown> | undefined,\n  obj2: CustomerAddressesModel | undefined\n): CustomerAddressesModel | Record<string, unknown> => {\n  if (obj1 && Object.keys(obj1).length > 0) {\n    return obj1;\n  }\n\n  if (obj2 && Object.keys(obj2).length > 0) {\n    return obj2;\n  }\n\n  return {};\n};\n\nexport const useAddressForm = ({\n  showFormLoader,\n  showSaveCheckBox,\n  saveCheckBoxValue,\n  addressFormId,\n  billingCheckBoxValue,\n  shippingCheckBoxValue,\n  showShippingCheckBox,\n  showBillingCheckBox,\n  inputsDefaultValueSet,\n  onCloseBtnClick,\n  onSuccess,\n  onError,\n  formName,\n}: useAddressFormProps) => {\n  const [inLineAlert, setInLineAlert] = useState<{\n    text: string;\n    type: 'success' | 'warning' | 'error';\n    icon?: VNode<HTMLAttributes<SVGSVGElement>>;\n  }>({\n    text: '',\n    type: 'success',\n  });\n  const [submitLoading, setSubmitLoading] = useState(showFormLoader ?? false);\n  const [addressId, setAddressId] = useState<string>(addressFormId || '');\n  const [attributesFormList, setAttributesFormList] = useState<\n    AttributesFormModel[]\n  >([]);\n  const [countriesData, setCountriesData] = useState<{\n    availableCountries: Country[];\n    countriesWithRequiredRegion: string[];\n    optionalZipCountries: string[];\n  } | null>(null);\n  const [inputChange, setInputChange] = useState(() => {\n    const savedData = sessionStorage.getItem(`${formName}_addressData`);\n    return savedData\n      ? { countryCode: JSON.parse(savedData)?.data?.countryCode }\n      : inputsDefaultValueSet;\n  });\n  const [disableField, setDisableField] = useState(false);\n  const [saveCheckBoxAddress, setSaveCheckBoxAddress] = useState<boolean>(\n    () => {\n      const sessionAddressForm = sessionStorage.getItem(\n        `${formName}_addressData`\n      );\n\n      const sessionAddressFormData = sessionAddressForm\n        ? JSON.parse(sessionAddressForm)?.data?.['saveAddressBook']\n        : (saveCheckBoxValue as boolean);\n\n      return sessionAddressFormData;\n    }\n  );\n\n  const handleSaveCheckBoxAddress = useCallback((event: Event) => {\n    setSaveCheckBoxAddress((event.target as HTMLInputElement).checked);\n  }, []);\n\n  useEffect(() => {\n    if (typeof showFormLoader === 'undefined') return;\n    setSubmitLoading(showFormLoader);\n  }, [showFormLoader]);\n\n  useEffect(() => {\n    getAttributesForm(\n      addressId ? 'customer_address_edit' : 'customer_register_address'\n    ).then((attributeFormResponse) => {\n      setAttributesFormList(attributeFormResponse);\n    });\n  }, [addressId]);\n\n  useEffect(() => {\n    setDisableField(true);\n    getCountries().then(\n      ({\n        availableCountries,\n        countriesWithRequiredRegion,\n        optionalZipCountries,\n      }) => {\n        setCountriesData({\n          availableCountries,\n          countriesWithRequiredRegion,\n          optionalZipCountries,\n        });\n        setDisableField(false);\n      }\n    );\n  }, []);\n\n  const countryOptions = useMemo(() => {\n    return countriesData?.availableCountries || [];\n  }, [countriesData]);\n\n  const isRequiredRegion = useMemo(() => {\n    if (!inputChange?.countryCode || !countriesData) return false;\n    return countriesData.countriesWithRequiredRegion.includes(inputChange.countryCode as string);\n  }, [inputChange?.countryCode, countriesData]);\n\n  const isRequiredPostCode = useMemo(() => {\n    if (!inputChange?.countryCode || !countriesData) return true;\n    return !countriesData.optionalZipCountries.includes(inputChange.countryCode as string);\n  }, [inputChange?.countryCode, countriesData]);\n\n  const regionOptions = useMemo(() => {\n    if (!inputChange?.countryCode || !countriesData) return [];\n\n    const country = countriesData.availableCountries.find(\n      (c) => c.value === inputChange.countryCode\n    );\n\n    return country?.availableRegions?.map((region) => ({\n      text: region.name,\n      value: `${region.code},${region.id}`,\n    })) || [];\n  }, [inputChange?.countryCode, countriesData]);\n\n  const handleOnCloseForm = useCallback(() => {\n    setInLineAlert({\n      text: '',\n      type: 'success',\n    });\n    onCloseBtnClick?.();\n  }, [onCloseBtnClick]);\n\n  const handleUpdateAddress = useCallback(\n    async (event: Event, valid: boolean): Promise<void | null | undefined> => {\n      if (!valid) return null;\n\n      setSubmitLoading(true);\n\n      const formValues = getFormValues(event.target as HTMLFormElement);\n      const serializeValues = serializeAddressForm(formValues);\n\n      await updateCustomerAddress(serializeValues as any)\n        .then(() => {\n          onSuccess?.();\n          onCloseBtnClick?.();\n          (event?.target as HTMLFormElement)?.reset();\n        })\n        .catch((error) => {\n          setInLineAlert((prev) => ({\n            ...prev,\n            text: error.message,\n            type: 'error',\n          }));\n          onError?.(error);\n        })\n        .finally(() => {\n          setAddressId('');\n          setSubmitLoading(false);\n        });\n    },\n    [onCloseBtnClick, onError, onSuccess]\n  );\n\n  const handleCreateAddress = useCallback(\n    async (event: Event, valid: boolean): Promise<void | null | undefined> => {\n      if (!valid) return;\n\n      setSubmitLoading(true);\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { saveAddressBook, ...formValues } = getFormValues(\n        event.target as HTMLFormElement\n      );\n\n      const serializeValues = serializeAddressForm(formValues);\n\n      await createCustomerAddress(serializeValues as any)\n        .then(() => {\n          onSuccess?.();\n          onCloseBtnClick?.();\n          (event?.target as HTMLFormElement)?.reset();\n        })\n        .catch((error) => {\n          setInLineAlert((prev) => ({\n            ...prev,\n            text: error.message,\n            type: 'error',\n          }));\n          onError?.(error);\n        })\n        .finally(() => {\n          setAddressId('');\n          setSubmitLoading(false);\n        });\n    },\n    [onCloseBtnClick, onError, onSuccess]\n  );\n\n  const normalizeFieldsConfig = useMemo(() => {\n    if (!attributesFormList.length) return [];\n\n    const shippingCheckBox = {\n      ...defaultShippingCheckBox,\n      defaultValue: shippingCheckBoxValue ?? false,\n      isHidden:\n        showSaveCheckBox && !saveCheckBoxAddress ? true : !showShippingCheckBox,\n    };\n\n    const billingCheckBox = {\n      ...defaultBillingCheckBox,\n      defaultValue: billingCheckBoxValue ?? false,\n      isHidden:\n        showSaveCheckBox && !saveCheckBoxAddress ? true : !showBillingCheckBox,\n    };\n\n    const updatedAttributesFormList = [\n      ...attributesFormList,\n      shippingCheckBox,\n      billingCheckBox,\n    ];\n\n    const sessionAddressForm = sessionStorage.getItem(\n      `${formName}_addressData`\n    );\n\n    const sessionAddressFormData = sessionAddressForm\n      ? transformSessionData(\n          JSON.parse(sessionAddressForm).data as CustomerAddressesModel,\n          regionOptions\n        )\n      : {};\n\n    const fields = getFieldsConfig(\n      findNonEmptyObject(sessionAddressFormData, inputsDefaultValueSet),\n      updatedAttributesFormList\n    );\n\n    return prepareNormalizedData({\n      fields,\n      addressId,\n      countryOptions,\n      disableField,\n      regionOptions,\n      isRequiredRegion,\n      isRequiredPostCode,\n    });\n  }, [\n    attributesFormList,\n    shippingCheckBoxValue,\n    showSaveCheckBox,\n    saveCheckBoxAddress,\n    showShippingCheckBox,\n    billingCheckBoxValue,\n    showBillingCheckBox,\n    formName,\n    regionOptions,\n    inputsDefaultValueSet,\n    addressId,\n    countryOptions,\n    disableField,\n    isRequiredRegion,\n    isRequiredPostCode,\n  ]);\n\n  const handleInputChange = useCallback(\n    (values: Record<string, string | number | boolean>) => {\n      setInputChange((prev) => ({ ...prev, ...values }));\n    },\n    []\n  );\n\n  return {\n    regionOptions,\n    saveCheckBoxAddress,\n    inLineAlert,\n    addressId,\n    submitLoading,\n    normalizeFieldsConfig,\n    handleSaveCheckBoxAddress,\n    handleUpdateAddress,\n    handleCreateAddress,\n    handleOnCloseForm,\n    handleInputChange,\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { CustomerAddressesModel } from '../data/models';\nimport { convertKeysCase } from './convertCase';\n\ntype CustomAttributesType = {\n  customAttributes?: { code: string; value: string }[];\n};\n\nexport const transformDefaultValuesAddresses = (\n  address?: CustomerAddressesModel & CustomAttributesType\n): CustomerAddressesModel => {\n  if (!address || !Array.isArray(address.customAttributes)) {\n    return address ?? {};\n  }\n\n  const customAttributesObject: Record<string, string> = {};\n\n  address?.customAttributes?.forEach((attr) => {\n    if (attr.code && Object.hasOwn(attr, 'value')) {\n      customAttributesObject[attr.code] = attr.value;\n    }\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { customAttributes, ...restOfObject } = address;\n\n  return {\n    ...restOfObject,\n    ...convertKeysCase(customAttributesObject, 'camelCase', {}),\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport { classes, Slot } from '@adobe-commerce/elsie/lib';\nimport { Button, InLineAlert } from '@adobe-commerce/elsie/components';\nimport { Form } from '@/account/components';\nimport { AddressFormWrapperProps, FieldsProps } from '@/account/types';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { useAddressForm } from '@/account/hooks/containers/useAddressForm';\nimport '@/account/components/AddressFormWrapper/AddressFormWrapper.css';\nimport { transformDefaultValuesAddresses } from '@/account/lib/transformDefaultValuesAddresses';\n\nexport const AddressFormWrapper: FunctionComponent<AddressFormWrapperProps> = ({\n  hideActionFormButtons,\n  formName = '',\n  showFormLoader = false,\n  showSaveCheckBox = false,\n  saveCheckBoxValue = false,\n  forwardFormRef,\n  slots,\n  addressesFormTitle,\n  className,\n  addressFormId,\n  inputsDefaultValueSet,\n  showShippingCheckBox = true,\n  showBillingCheckBox = true,\n  shippingCheckBoxValue = true,\n  billingCheckBoxValue = true,\n  isOpen,\n  fieldIdPrefix,\n  onSubmit,\n  onCloseBtnClick,\n  onSuccess,\n  onError,\n  onChange,\n}) => {\n  const translations = useText({\n    secondaryButton: 'Account.AddressForm.formText.secondaryButton',\n    primaryButton: 'Account.AddressForm.formText.primaryButton',\n    saveAddressBook: 'Account.AddressForm.formText.saveAddressBook',\n  });\n\n  const {\n    inLineAlert,\n    addressId,\n    submitLoading,\n    normalizeFieldsConfig,\n    handleUpdateAddress,\n    handleCreateAddress,\n    handleOnCloseForm,\n    handleSaveCheckBoxAddress,\n    saveCheckBoxAddress,\n    handleInputChange,\n    regionOptions,\n  } = useAddressForm({\n    showFormLoader,\n    addressFormId,\n    inputsDefaultValueSet: transformDefaultValuesAddresses(\n      inputsDefaultValueSet\n    ),\n    shippingCheckBoxValue,\n    billingCheckBoxValue,\n    showShippingCheckBox,\n    showBillingCheckBox,\n    saveCheckBoxValue,\n    showSaveCheckBox,\n    onSuccess,\n    onError,\n    onCloseBtnClick,\n    formName,\n  });\n\n  if (!isOpen) return null;\n\n  return (\n    <div className={classes(['account-address-form-wrapper', className])}>\n      {addressesFormTitle ? (\n        <div\n          className=\"account-address-form-wrapper__title\"\n          data-testid=\"addressesFormTitle\"\n        >\n          {addressesFormTitle}\n        </div>\n      ) : null}\n      {inLineAlert.text ? (\n        <InLineAlert\n          data-testid=\"inLineAlert\"\n          className=\"account-address-form-wrapper__notification\"\n          type={inLineAlert.type}\n          variant=\"secondary\"\n          heading={inLineAlert.text}\n          icon={inLineAlert.icon}\n        />\n      ) : null}\n      <Form\n        regionOptions={regionOptions}\n        forwardFormRef={forwardFormRef}\n        slots={slots}\n        className=\"account-address-form\"\n        name={formName || 'addressesForm'}\n        fieldsConfig={normalizeFieldsConfig as FieldsProps[]}\n        onSubmit={\n          onSubmit || (addressId ? handleUpdateAddress : handleCreateAddress)\n        }\n        setInputChange={handleInputChange}\n        loading={submitLoading}\n        showFormLoader={showFormLoader}\n        showSaveCheckBox={showSaveCheckBox}\n        handleSaveCheckBoxAddress={handleSaveCheckBoxAddress}\n        saveCheckBoxAddress={saveCheckBoxAddress}\n        onChange={onChange}\n        fieldIdPrefix={fieldIdPrefix}\n      >\n        {addressId ? (\n          <input\n            type=\"hidden\"\n            name=\"addressId\"\n            value={addressId}\n            data-testid=\"hidden_test_id\"\n          />\n        ) : null}\n        {!hideActionFormButtons ? (\n          <div\n            className={classes([\n              'dropin-field account-address-form-wrapper__buttons',\n              [\n                'account-address-form-wrapper__buttons--empty',\n                showSaveCheckBox,\n              ],\n            ])}\n          >\n            {slots?.AddressFormActions ? (\n              <Slot\n                data-testid=\"addressFormActions\"\n                name=\"AddressFormActions\"\n                slot={slots.AddressFormActions}\n                context={{\n                  handleUpdateAddress,\n                  handleCreateAddress,\n                  addressId,\n                }}\n              />\n            ) : (\n              <>\n                {!showSaveCheckBox ? (\n                  <>\n                    <Button\n                      // @ts-ignore\n                      type={'button'}\n                      onClick={handleOnCloseForm}\n                      variant=\"secondary\"\n                      disabled={submitLoading}\n                    >\n                      {translations.secondaryButton}\n                    </Button>\n                    <Button disabled={submitLoading}>\n                      {translations.primaryButton}\n                    </Button>\n                  </>\n                ) : null}\n              </>\n            )}\n          </div>\n        ) : null}\n      </Form>\n    </div>\n  );\n};\n"],"names":["AddressForm","hideActionFormButtons","formName","showFormLoader","showSaveCheckBox","saveCheckBoxValue","forwardFormRef","slots","addressesFormTitle","className","addressFormId","inputsDefaultValueSet","billingCheckBoxValue","shippingCheckBoxValue","showBillingCheckBox","showShippingCheckBox","isOpen","fieldIdPrefix","onSubmit","onCloseBtnClick","onSuccess","onError","onChange","classes","jsx","AddressFormWrapper","flattenObjectsArray","arr","acc","obj","validateNumeric","value","validateAlphanumWithSpaces","validateAlphanumeric","validateAlpha","validateEmail","validateDate","isDateWithinRange","date","minTimestamp","maxTimestamp","dateTimestamp","convertTimestampToDate","timestamp","validateUrl","url","validateLength","minLength","maxLength","length","validationFields","configs","translations","errorsList","requiredFieldError","lengthTextError","numericError","alphaNumWithSpacesError","alphaNumericError","alphaError","emailError","dateError","urlError","dateLengthError","fieldName","defaultFields","_a","validateRulesConfig","min","max","dateMin","dateMax","validation","_b","convertToBoolean","element","booleanList","dictionary","groupMultilineFields","inputObj","outputObj","multilineFields","key","match","baseKey","index","k","entries","a","b","entry","separateKeys","inputData","customAttributes","convertToSnakeCase","normalizeGetAddressData","fields","isForm","newFields","convertKeysCase","result","regionCode","regionId","getFormValuesFromRef","formRef","elements","el","areRequiredFieldsValid","forValues","checkIsFunction","initializeFormDataAndErrors","fieldsConfig","customUpperCode","required","defaultValue","isObjectNotEmpty","useForm","setInputChange","useText","useRef","formData","setFormData","useState","errors","setErrors","requiredFields","setRequiredFields","regionEnabled","setRegionEnabled","effectHasRun","setEffectHasRun","shouldBlockEffect","setShouldBlockEffect","shouldTriggerEffect","setShouldTriggerEffect","isDataValid","setIsDataValid","useEffect","getGridRowCount","rows","checkbox","handleValidationSubmit","useCallback","disableShowError","formValid","firstErrorField","name","fieldConfig","config","validationResult","input","collectFormData","fieldValue","requiredList","event","fieldsForm","data","initialData","errorList","prev","sessionAddressForm","hasCountryCode","hasRegion","handleInputChange","errorsProp","type","checked","updatedFormData","onFocus","handleBlur","handleSubmit","FieldEnumList","FormInputs","memo","loading","values","onBlur","itemClassName","renderSlot","item","errorMessage","contextValue","Slot","selectElement","valueMessage","defaultSelectValue","option","Fragment","Field","Picker","inputElement","Input","inputDateElement","InputDate","inputCheckBoxElement","Checkbox","textAreaElement","TextArea","CardLoader","testId","withCard","defaultSkeleton","jsxs","Skeleton","SkeletonRow","Card","AddressFormLoader","Form","forwardRef","children","regionOptions","handleSaveCheckBoxAddress","saveCheckBoxAddress","useImperativeHandle","modifyFormRef","getAddressButtonAriaLabel","defaultShipping","defaultBilling","isRemove","labelMap","AddressCard","selectable","selectShipping","selectBilling","variant","minifiedView","keysSortOrder","addressData","setAddressId","handleRenderModal","handleRenderForm","addressCardAriaId","useId","minifiedViewKey","defaultBillingLabel","defaultShippingLabel","defaultLabelText","getLabelStatus","useMemo","handleRemove","handleEdit","normalizeAddress","region","address","modifyAddressData","shippingLabel","billingLabel","hideShipping","hideBilling","Button","Tag","SvgAdd","props","React","SvgChevronRight","SvgAddressBook","SvgEmptyBox","AddressActions","addNewAddress","routeAddressesPage","TagType","buttonProps","nonSelectableViewButton","buttonText","Icon","ChevronRight","Add","AddressModal","open","submitLoading","onRemoveAddress","closeModal","Modal","ProgressSpinner","EmptyList","typeList","isEmpty","AddressBook","EmptyBox","IllustratedMessage","manageAddressDeletion","removeId","addressesList","updateCustomerAddress","newDefaultAddress","fallbackDefaultAddress","updatedDefaultAddress","defaultAttributePreset","defaultAccountAttributePreset","sortingAddressesList","copyAddressList","useAddresses","defaultSelectAddressId","onAddressData","selectedAddressOption","setSelectedAddressOption","isModalRendered","setIsModalRendered","isFormRendered","setIsFormRendered","setLoading","setSubmitLoading","setAddNewAddress","addressId","setEditAddressId","setAddressesList","setKeysSortOrder","getAddressesList","getAttributesForm","getCustomerAddress","response","attributesFormResponse","addressResponse","orderNumber","label","convertToCamelCase","defaultAddresses","addressesToSet","normalizeAddressData","setEditingAddressId","id","handleSelectAddressOption","nextSibling","removeAddress","removeCustomerAddress","closeNewAddressForm","redirectToAddressesRoute","handleOnSuccess","AddressesWrapper","inputName","title","addressFormTitle","withHeader","withActionsInMinifiedView","withActionsInFullSizeView","headerTitle","addressesComponent","sortedAddressesList","addressesFooterSection","generalLabelId","inputId","labelId","Header","defaultCheckBox","defaultShippingCheckBox","defaultBillingCheckBox","getFieldsConfig","itemValues","attributesFormList","field","newItemValues","newField","getFormValues","form","prepareNormalizedData","countryOptions","disableField","isRequiredRegion","isRequiredPostCode","normalizeAttributes","baseKeys","serializeAddressForm","formValues","streetListKeys","elementValues","streetList","modifyFormCheckBoxValues","street","streetMultiline_2","streetMultiline_1","regionConfigs","transformSessionData","regions","transformedData","foundRegion","val","findNonEmptyObject","obj1","obj2","useAddressForm","inLineAlert","setInLineAlert","setAttributesFormList","countriesData","setCountriesData","inputChange","savedData","setDisableField","setSaveCheckBoxAddress","attributeFormResponse","getCountries","availableCountries","countriesWithRequiredRegion","optionalZipCountries","country","c","handleOnCloseForm","handleUpdateAddress","valid","serializeValues","error","handleCreateAddress","saveAddressBook","createCustomerAddress","normalizeFieldsConfig","shippingCheckBox","billingCheckBox","updatedAttributesFormList","sessionAddressFormData","transformDefaultValuesAddresses","customAttributesObject","attr","restOfObject","InLineAlert"],"mappings":"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","x_google_ignoreList":[15,16,17,18]}