{"version":3,"file":"removeCustomerAddress.js","sources":["/@dropins/storefront-account/src/lib/convertCase.ts","/@dropins/storefront-account/src/api/fetch-graphql/fetch-graphql.ts","/@dropins/storefront-account/src/api/getAttributesForm/graphql/getAttributesForm.graphql.ts","/@dropins/storefront-account/src/lib/network-error.ts","/@dropins/storefront-account/src/lib/fetch-error.ts","/@dropins/storefront-account/src/data/transforms/transform-attributes-form.ts","/@dropins/storefront-account/src/data/transforms/transform-customer-address.ts","/@dropins/storefront-account/src/data/transforms/transform-countries.ts","/@dropins/storefront-account/src/api/getAttributesForm/getAttributesForm.ts","/@dropins/storefront-account/src/api/createCustomerAddress/graphql/createCustomerAddress.graphql.ts","/@dropins/storefront-account/src/api/createCustomerAddress/createCustomerAddress.ts","/@dropins/storefront-account/src/api/getCustomerAddress/graphql/getCustomerAddress.graphql.ts","/@dropins/storefront-account/src/api/getCustomerAddress/getCustomerAddress.ts","/@dropins/storefront-account/src/api/getCountries/graphql/getCountries.graphql.ts","/@dropins/storefront-account/src/api/getCountries/getCountries.ts","/@dropins/storefront-account/src/api/updateCustomerAddress/graphql/updateCustomerAddress.graphql.ts","/@dropins/storefront-account/src/api/updateCustomerAddress/updateCustomerAddress.ts","/@dropins/storefront-account/src/api/removeCustomerAddress/graphql/removeCustomerAddress.graphql.ts","/@dropins/storefront-account/src/api/removeCustomerAddress/removeCustomerAddress.ts"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const convertToCamelCase = (key: string): string => {\n  return key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n};\n\nexport const convertToSnakeCase = (key: string): string => {\n  return key.replace(/([A-Z])/g, (letter) => `_${letter.toLowerCase()}`);\n};\n\nexport const convertKeysCase = (\n  data: any,\n  type: 'snakeCase' | 'camelCase',\n  dictionary?: Record<string, string>\n): any => {\n  const typeList = ['string', 'boolean', 'number'];\n  const callback =\n    type === 'camelCase' ? convertToCamelCase : convertToSnakeCase;\n\n  if (Array.isArray(data)) {\n    return data.map((element) => {\n      if (typeList.includes(typeof element) || element === null) return element;\n\n      if (typeof element === 'object') {\n        return convertKeysCase(element, type, dictionary);\n      }\n      return element;\n    });\n  }\n\n  if (data !== null && typeof data === 'object') {\n    return Object.entries(data).reduce((acc, [key, value]) => {\n      const newKey =\n        dictionary && dictionary[key] ? dictionary[key] : callback(key);\n      acc[newKey] =\n        typeList.includes(typeof value) || value === null\n          ? value\n          : convertKeysCase(value, type, dictionary);\n      return acc;\n    }, {} as Record<string, unknown>);\n  }\n\n  return data;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FetchGraphQL } from '@adobe-commerce/fetch-graphql';\n\nexport const {\n  setEndpoint,\n  setFetchGraphQlHeader,\n  removeFetchGraphQlHeader,\n  setFetchGraphQlHeaders,\n  fetchGraphQl,\n  getConfig,\n} = new FetchGraphQL().getMethods();\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const GET_ATTRIBUTES_FORM = /* GraphQL */ `\n  query GET_ATTRIBUTES_FORM($formCode: String!) {\n    attributesForm(formCode: $formCode) {\n      items {\n        code\n        default_value\n        entity_type\n        frontend_class\n        frontend_input\n        is_required\n        is_unique\n        label\n        options {\n          is_default\n          label\n          value\n        }\n        ... on CustomerAttributeMetadata {\n          multiline_count\n          sort_order\n          validate_rules {\n            name\n            value\n          }\n        }\n      }\n      errors {\n        type\n        message\n      }\n    }\n  }\n`;\n\nexport const GET_ATTRIBUTES_FORM_SHORT = /* GraphQL */ `\n  query GET_ATTRIBUTES_FORM_SHORT {\n    attributesForm(formCode: \"customer_register_address\") {\n      items {\n        frontend_input\n        label\n        code\n        ... on CustomerAttributeMetadata {\n          multiline_count\n          sort_order\n        }\n      }\n    }\n  }\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { events } from '@adobe-commerce/event-bus';\n\n/**\n * A function which can be attached to fetchGraphQL to handle thrown errors in\n * a generic way.\n */\nexport const handleNetworkError = (error: Error) => {\n  const isAbortError =\n    error instanceof DOMException && error.name === 'AbortError';\n\n  if (!isAbortError) {\n    // @ts-ignore\n    events.emit('error', {\n      source: 'auth',\n      type: 'network',\n      error,\n    });\n  }\n  throw error;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\n/** Actions */\nexport const handleFetchError = (errors: Array<{ message: string }>) => {\n  const errorMessage = errors.map((e: any) => e.message).join(' ');\n\n  throw Error(errorMessage);\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport {\n  GetAttributesFormResponse,\n  ResponseAttributesFormItemsProps,\n} from '@/account/types';\nimport { AttributesFormModel, FieldEnumList } from '../models';\nimport { convertToCamelCase } from '@/account/lib/convertCase';\n\nexport const cloneArrayIfExists = (\n  fields: ResponseAttributesFormItemsProps[]\n) => {\n  let multilineItems: any = [];\n\n  for (const element of fields) {\n    if (element.frontend_input !== 'MULTILINE' || element.multiline_count < 2) {\n      continue;\n    }\n\n    for (let i = 2; i <= element.multiline_count; i++) {\n      const newItem = {\n        ...element,\n        is_required: false,\n        name: `${element.code}_multiline_${i}`,\n        code: `${element.code}_multiline_${i}`,\n        id: `${element.code}_multiline_${i}`,\n      };\n\n      multilineItems.push(newItem);\n    }\n  }\n\n  return multilineItems;\n};\n\nconst transformCustomUpperCode = (code: string) => {\n  switch (code) {\n    case 'middlename':\n      return 'middleName';\n    case 'firstname':\n      return 'firstName';\n    case 'lastname':\n      return 'lastName';\n    default:\n      return convertToCamelCase(code);\n  }\n};\n\nconst transformOptions = (item: any) => {\n  if (!item?.options) return [];\n\n  return item?.options?.map((el: any) => {\n    return {\n      isDefault: el?.is_default ?? false,\n      text: el?.label ?? '',\n      value: el?.value ?? '',\n    };\n  });\n};\n\nexport const transformAttributesForm = (\n  response: GetAttributesFormResponse\n): AttributesFormModel[] => {\n  const items = response?.data?.attributesForm?.items || [];\n\n  if (!items.length) return [];\n\n  const fields = items\n    .filter((el) => !el.frontend_input?.includes('HIDDEN'))\n    ?.map(({ code, ...other }) => {\n      const isDefaultCode = code !== 'country_id' ? code : 'country_code';\n\n      return {\n        ...other,\n        name: isDefaultCode,\n        id: isDefaultCode,\n        code: isDefaultCode,\n      };\n    });\n\n  const multilineItems = cloneArrayIfExists(fields as any);\n\n  const attributesConfig = fields\n    .concat(multilineItems)\n    .map((item) => {\n      return {\n        code: item?.code,\n        name: item?.name,\n        id: item?.id,\n        label: item?.label ?? '',\n        entityType: item?.entity_type,\n        className: item?.frontend_class ?? '',\n        defaultValue: item?.default_value ?? '',\n        fieldType: item?.frontend_input as FieldEnumList,\n        multilineCount: item?.multiline_count ?? 0,\n        orderNumber: Number(item?.sort_order) || 0,\n        isHidden: false,\n        isUnique: item?.is_unique ?? false,\n        required: item?.is_required ?? false,\n        validateRules: item?.validate_rules ?? [],\n        options: transformOptions(item),\n        customUpperCode: transformCustomUpperCode(item?.code),\n      };\n    })\n    .sort((a, b) => Number(a.orderNumber) - Number(b.orderNumber));\n\n  return attributesConfig;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { CustomerAddressesModel } from '../models';\nimport { AddressResponse, UserAddressesProps } from '@/account/types';\nimport { convertKeysCase } from '@/account/lib/convertCase';\n\nconst expandArraysInObject = (inputObject: UserAddressesProps) => {\n  const flattenedAttributes: Record<string, unknown> = {};\n\n  for (const key in inputObject) {\n    const element = inputObject[key as keyof UserAddressesProps];\n\n    if (!Array.isArray(element) || element.length === 0) continue;\n\n    if (key === 'custom_attributesV2') {\n      element.forEach((item) => {\n        if (typeof item === 'object' && 'value' in item) {\n          flattenedAttributes[item?.code] = item?.value;\n        }\n      });\n    } else if (element.length > 1) {\n      element.forEach((value: unknown, index: number) => {\n        index === 0\n          ? (flattenedAttributes[key] = value)\n          : (flattenedAttributes[`${key}_multiline_${index + 1}`] = value);\n      });\n    } else {\n      flattenedAttributes[key] = element[0] as Record<string, string>;\n    }\n  }\n\n  return flattenedAttributes;\n};\nconst transformFullName = (address: UserAddressesProps) => {\n  return {\n    prefix: address?.prefix ?? '',\n    suffix: address?.suffix ?? '',\n    firstname: address?.firstname ?? '',\n    lastname: address?.lastname ?? '',\n    middlename: address?.middlename ?? '',\n  };\n};\n\nconst transformIds = (address: UserAddressesProps) => {\n  return {\n    id: address?.id ?? '',\n    vat_id: address?.vat_id ?? '',\n    postcode: address?.postcode ?? '',\n    country_code: address?.country_code ?? '',\n  };\n};\n\nconst transformContacts = (address: UserAddressesProps) => {\n  return {\n    company: address?.company ?? '',\n    telephone: address?.telephone ?? '',\n    fax: address?.fax ?? '',\n  };\n};\n\n// Function to transform a single address\nexport const transformSingleAddress = (\n  addressData: UserAddressesProps\n): CustomerAddressesModel => {\n  const result = convertKeysCase(\n    {\n      ...transformFullName(addressData),\n      ...transformIds(addressData),\n      ...transformContacts(addressData),\n      city: addressData?.city ?? '',\n      region: {\n        region: addressData?.region?.region ?? '',\n        region_code: addressData?.region?.region_code ?? '',\n        region_id: addressData?.region?.region_id ?? '',\n      },\n      default_shipping: addressData?.default_shipping || false,\n      default_billing: addressData?.default_billing || false,\n      ...expandArraysInObject(addressData),\n    },\n    'camelCase',\n    {}\n  );\n\n  return result;\n};\n\n// Function to transform multiple addresses from a response\nexport const transformMultipleAddresses = (\n  response: AddressResponse\n): CustomerAddressesModel[] | [] => {\n  const addresses: UserAddressesProps[] =\n    response?.data?.customer?.addresses || [];\n\n  if (!addresses.length) return [];\n\n  const result = addresses\n    .map(transformSingleAddress)\n    .sort(\n      (a, b) =>\n        (Number(b.defaultBilling) || Number(b.defaultShipping)) -\n        (Number(a.defaultBilling) || Number(a.defaultShipping))\n    );\n\n  return result;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { CountriesFormResponse } from '@/account/types';\nimport { Country } from '../models';\n\nexport const transformCountries = (\n  response: CountriesFormResponse\n): {\n  availableCountries: Country[] | [];\n  countriesWithRequiredRegion: string[];\n  optionalZipCountries: string[];\n} => {\n  if (!response?.data?.countries?.length) {\n    return {\n      availableCountries: [],\n      countriesWithRequiredRegion: [],\n      optionalZipCountries: [],\n    };\n  }\n\n  const { countries, storeConfig } = response.data;\n\n  const countriesWithRequiredRegion =\n    storeConfig?.countries_with_required_region.split(',');\n  const optionalZipCountries = storeConfig?.optional_zip_countries.split(',');\n\n  const availableCountries = countries\n    .filter(({ two_letter_abbreviation, full_name_locale }) =>\n      Boolean(two_letter_abbreviation && full_name_locale)\n    )\n    .map((country) => {\n      const { two_letter_abbreviation, full_name_locale, available_regions } = country;\n\n      const hasRegions = Array.isArray(available_regions) && available_regions.length > 0;\n      return {\n        value: two_letter_abbreviation,\n        text: full_name_locale,\n        availableRegions: hasRegions ? available_regions : undefined,\n      };\n    })\n    .sort((a, b) => a.text.localeCompare(b.text));\n\n  return {\n    availableCountries,\n    countriesWithRequiredRegion,\n    optionalZipCountries,\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { fetchGraphQl } from '../fetch-graphql';\nimport {\n  GET_ATTRIBUTES_FORM,\n  GET_ATTRIBUTES_FORM_SHORT,\n} from './graphql/getAttributesForm.graphql';\nimport { handleNetworkError } from '@/account/lib/network-error';\nimport { handleFetchError } from '@/account/lib/fetch-error';\nimport { transformAttributesForm } from '@/account/data/transforms';\nimport { AttributesFormModel } from '@/account/data/models';\nimport { GetAttributesFormResponse } from '@/account/types';\n\nexport const getAttributesForm = async (\n  formCode: string\n): Promise<AttributesFormModel[]> => {\n  const sessionStorageKey = `_account_attributesForm_${formCode}`;\n\n  const sessionStorageCache = sessionStorage.getItem(sessionStorageKey);\n\n  if (sessionStorageCache) {\n    return JSON.parse(sessionStorageCache);\n  }\n\n  return await fetchGraphQl(\n    formCode !== 'shortRequest'\n      ? GET_ATTRIBUTES_FORM\n      : GET_ATTRIBUTES_FORM_SHORT,\n    {\n      method: 'GET',\n      cache: 'force-cache',\n      variables: { formCode },\n    }\n  )\n    .then((response: GetAttributesFormResponse) => {\n      if (response.errors?.length) return handleFetchError(response.errors);\n\n      const transformedData = transformAttributesForm(response);\n\n      sessionStorage.setItem(\n        sessionStorageKey,\n        JSON.stringify(transformedData)\n      );\n\n      return transformedData;\n    })\n    .catch(handleNetworkError);\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const CREATE_CUSTOMER_ADDRESS = /* GraphQL */ `\n  mutation CREATE_CUSTOMER_ADDRESS($input: CustomerAddressInput!) {\n    createCustomerAddress(input: $input) {\n      firstname\n    }\n  }\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { CreateCustomerAddressResponse } from '@/account/types';\nimport { fetchGraphQl } from '../fetch-graphql';\nimport { CREATE_CUSTOMER_ADDRESS } from './graphql/createCustomerAddress.graphql';\nimport { handleNetworkError } from '@/account/lib/network-error';\nimport { handleFetchError } from '@/account/lib/fetch-error';\nimport { convertKeysCase } from '@/account/lib/convertCase';\nimport { CustomerAddressesModel } from '@/account/data/models';\n\nexport const createCustomerAddress = async (\n  address: CustomerAddressesModel\n): Promise<string> => {\n  return await fetchGraphQl(CREATE_CUSTOMER_ADDRESS, {\n    method: 'POST',\n    variables: {\n      input: convertKeysCase(address, 'snakeCase', {\n        custom_attributesV2: 'custom_attributesV2',\n        firstName: 'firstname',\n        lastName: 'lastname',\n        middleName: 'middlename',\n      }),\n    },\n  })\n    .then((response: CreateCustomerAddressResponse) => {\n      if (response.errors?.length) return handleFetchError(response.errors);\n\n      return response?.data?.createCustomerAddress?.firstname || '';\n    })\n    .catch(handleNetworkError);\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const GET_CUSTOMER_ADDRESS = /* GraphQL */ `\n  query GET_CUSTOMER_ADDRESS {\n    customer {\n      addresses {\n        firstname\n        lastname\n        middlename\n        fax\n        prefix\n        suffix\n        city\n        company\n        country_code\n        region {\n          region\n          region_code\n          region_id\n        }\n        custom_attributesV2 {\n          ... on AttributeValue {\n            code\n            value\n          }\n        }\n        telephone\n        id\n        vat_id\n        postcode\n        street\n        default_shipping\n        default_billing\n      }\n    }\n  }\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { handleNetworkError } from '@/account/lib/network-error';\nimport { fetchGraphQl } from '@/account/api/fetch-graphql';\nimport { GET_CUSTOMER_ADDRESS } from './graphql/getCustomerAddress.graphql';\nimport { transformMultipleAddresses } from '@/account/data/transforms';\nimport { CustomerAddressesModel } from '@/account/data/models/customer-address';\nimport { AddressResponse } from '@/account/types';\nimport { handleFetchError } from '@/account/lib/fetch-error';\n\nexport const getCustomerAddress = async (): Promise<\n  CustomerAddressesModel[]\n> => {\n  return await fetchGraphQl(GET_CUSTOMER_ADDRESS, {\n    method: 'GET',\n    cache: 'no-cache',\n  })\n    .then((response: AddressResponse) => {\n      if (response.errors?.length) return handleFetchError(response.errors);\n\n      return transformMultipleAddresses(response);\n    })\n    .catch(handleNetworkError);\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const GET_COUNTRIES_QUERY = /* GraphQL */ `\n  query GET_COUNTRIES_QUERY {\n    countries {\n      two_letter_abbreviation\n      full_name_locale\n      available_regions {\n        id\n        code\n        name\n      }\n    }\n    storeConfig {\n      countries_with_required_region\n      optional_zip_countries\n    }\n  }\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { GET_COUNTRIES_QUERY } from './graphql/getCountries.graphql';\nimport { fetchGraphQl } from '@/account/api/fetch-graphql';\nimport { handleNetworkError } from '@/account/lib/network-error';\nimport { handleFetchError } from '@/account/lib/fetch-error';\nimport { transformCountries } from '@/account/data/transforms';\nimport { CountriesFormResponse } from '@/account/types';\nimport { Country } from '@/account/data/models';\n\nexport const getCountries = async (): Promise<{\n  availableCountries: Country[] | [];\n  countriesWithRequiredRegion: string[];\n  optionalZipCountries: string[];\n}> => {\n  const sessionStorageKey = '_account_countries';\n\n  const sessionStorageCache = sessionStorage.getItem(sessionStorageKey);\n\n  if (sessionStorageCache) {\n    return JSON.parse(sessionStorageCache);\n  }\n\n  return await fetchGraphQl(GET_COUNTRIES_QUERY, {\n    method: 'GET',\n    cache: 'no-cache',\n  })\n    .then((response: CountriesFormResponse) => {\n      if (response.errors?.length) return handleFetchError(response.errors);\n\n      const transformedData = transformCountries(response);\n\n      sessionStorage.setItem(\n        sessionStorageKey,\n        JSON.stringify(transformedData)\n      );\n\n      return transformedData;\n    })\n    .catch(handleNetworkError);\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const UPDATE_CUSTOMER_ADDRESS = /* GraphQL */ `\n  mutation UPDATE_CUSTOMER_ADDRESS($id: Int!, $input: CustomerAddressInput) {\n    updateCustomerAddress(id: $id, input: $input) {\n      firstname\n    }\n  }\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { fetchGraphQl } from '../fetch-graphql';\nimport { UPDATE_CUSTOMER_ADDRESS } from './graphql/updateCustomerAddress.graphql';\nimport { handleNetworkError } from '@/account/lib/network-error';\nimport { handleFetchError } from '@/account/lib/fetch-error';\nimport { UpdateCustomerAddressResponse } from '@/account/types';\nimport { CustomerAddressesModel } from '@/account/data/models';\nimport { convertKeysCase } from '@/account/lib/convertCase';\n\ntype ExtendedAddressFormProps = CustomerAddressesModel & {\n  addressId: number;\n};\n\nexport const updateCustomerAddress = async (\n  forms: ExtendedAddressFormProps\n): Promise<string> => {\n  const { addressId, ...address } = forms;\n\n  if (!addressId) return '';\n\n  return await fetchGraphQl(UPDATE_CUSTOMER_ADDRESS, {\n    method: 'POST',\n    variables: {\n      id: Number(addressId),\n      input: convertKeysCase(address, 'snakeCase', {\n        custom_attributesV2: 'custom_attributesV2',\n        firstName: 'firstname',\n        lastName: 'lastname',\n        middleName: 'middlename',\n      }),\n    },\n  })\n    .then((response: UpdateCustomerAddressResponse) => {\n      if (response.errors?.length) return handleFetchError(response.errors);\n\n      return response?.data?.updateCustomerAddress?.firstname || '';\n    })\n    .catch(handleNetworkError);\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const REMOVE_CUSTOMER_ADDRESS = /* GraphQL */ `\n  mutation REMOVE_CUSTOMER_ADDRESS($id: Int!) {\n    deleteCustomerAddress(id: $id)\n  }\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { handleNetworkError } from '@/account/lib/network-error';\nimport { fetchGraphQl } from '@/account/api/fetch-graphql';\nimport { REMOVE_CUSTOMER_ADDRESS } from './graphql/removeCustomerAddress.graphql';\nimport { handleFetchError } from '@/account/lib/fetch-error';\nimport { RemoveCustomerAddressResponse } from '@/account/types';\n\nexport const removeCustomerAddress = async (\n  addressId: number\n): Promise<boolean> => {\n  return await fetchGraphQl(REMOVE_CUSTOMER_ADDRESS, {\n    method: 'POST',\n    variables: { id: addressId },\n  })\n    .then((response: RemoveCustomerAddressResponse) => {\n      if (response.errors?.length) return handleFetchError(response.errors);\n\n      return response.data.deleteCustomerAddress;\n    })\n    .catch(handleNetworkError);\n};\n"],"names":["convertToCamelCase","key","_","letter","convertToSnakeCase","convertKeysCase","data","type","dictionary","typeList","callback","element","acc","value","newKey","setEndpoint","setFetchGraphQlHeader","removeFetchGraphQlHeader","setFetchGraphQlHeaders","fetchGraphQl","getConfig","FetchGraphQL","GET_ATTRIBUTES_FORM","GET_ATTRIBUTES_FORM_SHORT","handleNetworkError","error","events","handleFetchError","errors","errorMessage","e","cloneArrayIfExists","fields","multilineItems","i","newItem","transformCustomUpperCode","code","transformOptions","item","_a","el","transformAttributesForm","response","items","_b","_c","other","isDefaultCode","a","b","expandArraysInObject","inputObject","flattenedAttributes","index","transformFullName","address","transformIds","transformContacts","transformSingleAddress","addressData","transformMultipleAddresses","addresses","transformCountries","countries","storeConfig","countriesWithRequiredRegion","optionalZipCountries","two_letter_abbreviation","full_name_locale","country","available_regions","hasRegions","getAttributesForm","formCode","sessionStorageKey","sessionStorageCache","transformedData","CREATE_CUSTOMER_ADDRESS","createCustomerAddress","GET_CUSTOMER_ADDRESS","getCustomerAddress","GET_COUNTRIES_QUERY","getCountries","UPDATE_CUSTOMER_ADDRESS","updateCustomerAddress","forms","addressId","REMOVE_CUSTOMER_ADDRESS","removeCustomerAddress"],"mappings":"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"}