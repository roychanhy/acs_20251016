{"version":3,"file":"CustomerInformation.js","sources":["../../node_modules/@adobe-commerce/elsie/src/icons/Warning.svg","../../node_modules/@adobe-commerce/elsie/src/icons/CheckWithCircle.svg","../../node_modules/@adobe-commerce/elsie/src/icons/WarningWithCircle.svg","/@dropins/storefront-account/src/data/transforms/transform-account.ts","/@dropins/storefront-account/src/hooks/containers/useGetStoreConfigs.tsx","/@dropins/storefront-account/src/lib/validationChangePassword.ts","/@dropins/storefront-account/src/lib/validationUniqueSymbolsPassword.ts","/@dropins/storefront-account/src/hooks/components/useChangePassword.tsx","/@dropins/storefront-account/src/hooks/components/usePasswordValidationMessage.tsx","/@dropins/storefront-account/src/components/ChangePassword/ChangePassword.tsx","/@dropins/storefront-account/src/components/EditCustomerInformation/EditCustomerInformation.tsx","/@dropins/storefront-account/src/components/CustomerInformationCard/CustomerInformationCard.tsx","/@dropins/storefront-account/src/lib/transformDobCustomer.ts","/@dropins/storefront-account/src/lib/acdl.ts","/@dropins/storefront-account/src/hooks/containers/useCustomerInformation.tsx","/@dropins/storefront-account/src/hooks/useInLineAlert.tsx","/@dropins/storefront-account/src/containers/CustomerInformation/CustomerInformation.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgWarning = (props) => /* @__PURE__ */ React.createElement(\"svg\", { id: \"Icon_Warning_Base\", width: 24, height: 24, viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"g\", { clipPath: \"url(#clip0_841_1324)\" }, /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M11.9949 2.30237L0.802734 21.6977H23.1977L11.9949 2.30237Z\", stroke: \"currentColor\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M12.4336 10.5504L12.3373 14.4766H11.6632L11.5669 10.5504V9.51273H12.4336V10.5504ZM11.5883 18.2636V17.2687H12.4229V18.2636H11.5883Z\", stroke: \"currentColor\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })), /* @__PURE__ */ React.createElement(\"defs\", null, /* @__PURE__ */ React.createElement(\"clipPath\", { id: \"clip0_841_1324\" }, /* @__PURE__ */ React.createElement(\"rect\", { width: 24, height: 21, fill: \"white\", transform: \"translate(0 1.5)\" }))));\nexport default SvgWarning;\n","import * as React from \"react\";\nconst SvgCheckWithCircle = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 24, height: 24, viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M0.75 12C0.75 5.78421 5.78421 0.75 12 0.75C18.2158 0.75 23.25 5.78421 23.25 12C23.25 18.2158 18.2158 23.25 12 23.25C5.78421 23.25 0.75 18.2158 0.75 12Z\", stroke: \"currentColor\" }), /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M6.75 12.762L10.2385 15.75L17.25 9\", stroke: \"currentColor\" }));\nexport default SvgCheckWithCircle;\n","import * as React from \"react\";\nconst SvgWarningWithCircle = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 24, height: 24, viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M0.75 12C0.75 5.78421 5.78421 0.75 12 0.75C18.2158 0.75 23.25 5.78421 23.25 12C23.25 18.2158 18.2158 23.25 12 23.25C5.78421 23.25 0.75 18.2158 0.75 12Z\", stroke: \"currentColor\" }), /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M11.75 5.88423V4.75H12.25V5.88423L12.0485 13.0713H11.9515L11.75 5.88423ZM11.7994 18.25V16.9868H12.2253V18.25H11.7994Z\", stroke: \"currentColor\" }));\nexport default SvgWarningWithCircle;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport {\n  AccountModel,\n  CustomerDataModelShort,\n} from '@/account/data/models/customer';\n\n/**\n * Reference:\n * https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-collector/src/handlers/account/editAccountAEP.ts\n */\nexport const transformAccount = (\n  data: CustomerDataModelShort\n): AccountModel => {\n  return {\n    firstName: data.firstName,\n    lastName: data.lastName,\n    emailAddress: data?.email || '',\n    accountId: data?.email || '',\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { getStoreConfig } from '@/account/api';\nimport { StoreConfigModel } from '@/account/data/models';\nimport { useEffect, useState } from 'preact/hooks';\n\nexport const useGetStoreConfigs = () => {\n  const [passwordConfigs, setPasswordConfigs] = useState<{\n    minLength: number;\n    requiredCharacterClasses: number;\n  } | null>(null);\n\n  useEffect(() => {\n    const storeConfigString = sessionStorage.getItem('accountStoreConfig');\n\n    const cachedStoreConfig: StoreConfigModel = storeConfigString\n      ? JSON.parse(storeConfigString)\n      : null;\n\n    if (cachedStoreConfig) {\n      const { minLength, requiredCharacterClasses } = cachedStoreConfig;\n\n      setPasswordConfigs({\n        minLength,\n        requiredCharacterClasses,\n      });\n    } else {\n      getStoreConfig().then((response) => {\n        if (response) {\n          const { minLength, requiredCharacterClasses } = response;\n\n          sessionStorage.setItem(\n            'accountStoreConfig',\n            JSON.stringify(response)\n          );\n\n          setPasswordConfigs({\n            minLength,\n            requiredCharacterClasses,\n          });\n        }\n      });\n    }\n  }, []);\n\n  return { passwordConfigs };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { DEFAULT_ERRORS_STATE } from '../hooks/components/useChangePassword';\n\ninterface PasswordValidationParams {\n  currentPassword: string;\n  newPassword: string;\n  confirmPassword: string;\n  translations: Record<string, string>;\n}\n\ninterface PasswordErrors {\n  currentPassword: string;\n  newPassword: string;\n  confirmPassword: string;\n}\n\nexport const validationChangePassword = ({\n  currentPassword,\n  newPassword,\n  confirmPassword,\n  translations,\n}: PasswordValidationParams): { isValid: boolean; errors: PasswordErrors } => {\n  let errors: PasswordErrors = { ...DEFAULT_ERRORS_STATE };\n\n  const arePasswordsEmpty =\n    !currentPassword.length && !newPassword.length && !confirmPassword.length;\n  const isNewPasswordMismatch =\n    currentPassword.length && newPassword !== confirmPassword;\n\n  if (arePasswordsEmpty) {\n    errors = {\n      ...errors,\n      currentPassword: translations.requiredFieldError,\n      newPassword: translations.requiredFieldError,\n      confirmPassword: translations.requiredFieldError,\n    };\n    return { isValid: false, errors };\n  }\n\n  if (!currentPassword.length) {\n    errors = {\n      ...errors,\n      currentPassword: translations.requiredFieldError,\n    };\n    return { isValid: false, errors };\n  }\n\n  if (!newPassword.length) {\n    errors = {\n      ...errors,\n      newPassword: translations.requiredFieldError,\n    };\n    return { isValid: false, errors };\n  }\n\n  if (!confirmPassword.length) {\n    errors = {\n      ...errors,\n      confirmPassword: translations.requiredFieldError,\n    };\n    return { isValid: false, errors };\n  }\n\n  if (isNewPasswordMismatch) {\n    errors = {\n      ...errors,\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: translations.passwordMismatch,\n    };\n    return { isValid: false, errors };\n  }\n\n  return { isValid: true, errors };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const validationUniqueSymbolsPassword = (\n  password: string,\n  uniqueSymbolsCount: number\n) => {\n  if (uniqueSymbolsCount <= 1) return true;\n\n  const numbers = /[0-9]/.test(password) ? 1 : 0;\n  const lowerCaseLetter = /[a-z]/.test(password) ? 1 : 0;\n  const upperCaseLetter = /[A-Z]/.test(password) ? 1 : 0;\n  const specialSymbols = /[^a-zA-Z0-9\\s]/.test(password) ? 1 : 0;\n\n  return (\n    numbers + lowerCaseLetter + upperCaseLetter + specialSymbols >=\n    uniqueSymbolsCount\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { updateCustomerPassword } from '@/account/api';\nimport { validationChangePassword } from '@/account/lib/validationChangePassword';\nimport { validationUniqueSymbolsPassword } from '@/account/lib/validationUniqueSymbolsPassword';\nimport { UseChangePasswordProps } from '@/account/types';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { useCallback, useState } from 'preact/hooks';\n\nexport const DEFAULT_ERRORS_STATE = {\n  currentPassword: '',\n  newPassword: '',\n  confirmPassword: '',\n};\n\nexport const useChangePassword = ({\n  passwordConfigs,\n  handleSetInLineAlert,\n  handleHideChangePassword,\n}: UseChangePasswordProps) => {\n  const translations = useText({\n    requiredFieldError: 'Account.FormText.requiredFieldError',\n    passwordMismatch:\n      'Account.minifiedView.CustomerInformation.changePassword.passwordValidationMessage.passwordMismatch',\n    incorrectCurrentPassword:\n      'Account.minifiedView.CustomerInformation.changePassword.passwordValidationMessage.incorrectCurrentPassword',\n    passwordUpdateMessage:\n      'Account.minifiedView.CustomerInformation.changePassword.passwordValidationMessage.passwordUpdateMessage',\n  });\n  const [isClickSubmit, setIsClickSubmit] = useState(false);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [passwordErrors, setPasswordErrors] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n  });\n\n  const hideChangePassword = useCallback(() => {\n    handleHideChangePassword(() => {\n      handleSetInLineAlert({});\n      setPasswordErrors(DEFAULT_ERRORS_STATE);\n    });\n  }, [handleHideChangePassword, handleSetInLineAlert]);\n\n  const handleCurrentPasswordChange = useCallback(\n    (value: string) => {\n      setCurrentPassword(value);\n      setPasswordErrors((prev) => ({\n        ...prev,\n        currentPassword: value ? '' : translations.requiredFieldError,\n      }));\n    },\n    [translations]\n  );\n\n  const handleNewPasswordChange = useCallback(\n    (value: string) => {\n      setNewPassword(value);\n      setPasswordErrors((prev) => ({\n        ...prev,\n        newPassword: value ? '' : translations.requiredFieldError,\n      }));\n    },\n    [translations]\n  );\n\n  const handleConfirmPasswordChange = useCallback(\n    (value: string) => {\n      setConfirmPassword(value);\n      setPasswordErrors((prev) => ({\n        ...prev,\n        confirmPassword: value ? '' : translations.requiredFieldError,\n      }));\n    },\n    [translations]\n  );\n\n  const handleOnBlurPassword = useCallback(\n    (event: Event) => {\n      const { name, value } = event?.target as HTMLInputElement;\n\n      setPasswordErrors((prev) => ({\n        ...prev,\n        [name]: value ? '' : translations.requiredFieldError,\n      }));\n    },\n    [translations]\n  );\n\n  const validatePasswords = useCallback(() => {\n    const { isValid, errors } = validationChangePassword({\n      currentPassword,\n      newPassword,\n      confirmPassword,\n      translations,\n    });\n\n    setPasswordErrors(errors);\n    return isValid;\n  }, [currentPassword, newPassword, confirmPassword, translations]);\n\n  const mutationChangePassword = useCallback(\n    (event: Event) => {\n      event.preventDefault();\n\n      setSubmitLoading(true);\n\n      const requiredCharacterClasses =\n        passwordConfigs?.requiredCharacterClasses ?? 0;\n      const requiredPasswordLength = passwordConfigs?.minLength ?? 1;\n\n      if (!validatePasswords()) {\n        setIsClickSubmit(true);\n        setSubmitLoading(false);\n        return;\n      }\n\n      if (\n        !validationUniqueSymbolsPassword(\n          newPassword,\n          requiredCharacterClasses\n        ) ||\n        requiredPasswordLength > newPassword?.length\n      ) {\n        setIsClickSubmit(true);\n        setSubmitLoading(false);\n\n        return;\n      }\n\n      updateCustomerPassword({ currentPassword, newPassword })\n        .then((result) => {\n          if (!result?.length) {\n            setSubmitLoading(false);\n            return;\n          }\n\n          setCurrentPassword('');\n          setNewPassword('');\n          setConfirmPassword('');\n          setPasswordErrors(DEFAULT_ERRORS_STATE);\n          setIsClickSubmit(false);\n          handleSetInLineAlert({\n            type: 'success',\n            text: translations.passwordUpdateMessage,\n          });\n        })\n        .catch((error) => {\n          if (error.message === 'Invalid login or password.') {\n            handleSetInLineAlert({\n              type: 'error',\n              text: translations.incorrectCurrentPassword,\n            });\n          }\n\n          if (error.message === 'The account is locked.') {\n            handleSetInLineAlert({\n              type: 'error',\n              text: error.message,\n            });\n          }\n        });\n\n      setSubmitLoading(false);\n    },\n    [\n      passwordConfigs,\n      validatePasswords,\n      newPassword,\n      currentPassword,\n      handleSetInLineAlert,\n      translations,\n    ]\n  );\n\n  return {\n    hideChangePassword,\n    handleOnBlurPassword,\n    handleConfirmPasswordChange,\n    handleNewPasswordChange,\n    handleCurrentPasswordChange,\n    mutationChangePassword,\n    currentPassword,\n    newPassword,\n    confirmPassword,\n    passwordErrors,\n    submitLoading,\n    isClickSubmit,\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { validationUniqueSymbolsPassword } from '@/account/lib/validationUniqueSymbolsPassword';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { ValidateLengthConfigProps, statusTypes } from '@/account/types';\nimport { useText } from '@adobe-commerce/elsie/i18n';\n\ninterface UsePasswordValidationMessageProps {\n  passwordConfigs: {\n    minLength: number;\n    requiredCharacterClasses: number;\n  } | null;\n  isClickSubmit: boolean;\n  password: string;\n}\n\nexport const usePasswordValidationMessage = ({\n  passwordConfigs,\n  isClickSubmit,\n  password,\n}: UsePasswordValidationMessageProps) => {\n  const translations = useText({\n    messageLengthPassword:\n      'Account.minifiedView.CustomerInformation.changePassword.passwordValidationMessage.messageLengthPassword',\n  });\n\n  const [isValidUniqueSymbols, setIsValidUniqueSymbols] =\n    useState<statusTypes>('pending');\n\n  useEffect(() => {\n    if (!passwordConfigs) return;\n\n    const result = validationUniqueSymbolsPassword(\n      password,\n      passwordConfigs.requiredCharacterClasses\n    );\n\n    if (isClickSubmit && password.length > 0) {\n      result\n        ? setIsValidUniqueSymbols('success')\n        : setIsValidUniqueSymbols('error');\n    } else if (isClickSubmit && password.length === 0) {\n      setIsValidUniqueSymbols('pending');\n    } else {\n      result\n        ? setIsValidUniqueSymbols('success')\n        : setIsValidUniqueSymbols('pending');\n    }\n  }, [isClickSubmit, passwordConfigs, password]);\n\n  const defaultLengthMessage: ValidateLengthConfigProps | undefined =\n    useMemo(() => {\n      if (!passwordConfigs) return;\n\n      const defaultMessage: ValidateLengthConfigProps = {\n        status: 'pending',\n        icon: 'pending',\n        message: translations.messageLengthPassword?.replace(\n          '{minLength}',\n          `${passwordConfigs.minLength}`\n        ),\n      };\n\n      if (password.length && password.length >= passwordConfigs.minLength) {\n        return { ...defaultMessage, icon: 'success', status: 'success' };\n      }\n\n      if (password.length && password.length < passwordConfigs.minLength) {\n        return isClickSubmit\n          ? { ...defaultMessage, icon: 'error', status: 'error' }\n          : { ...defaultMessage, icon: 'pending', status: 'pending' };\n      }\n\n      return defaultMessage;\n    }, [\n      passwordConfigs,\n      translations.messageLengthPassword,\n      password?.length,\n      isClickSubmit,\n    ]);\n\n  return { isValidUniqueSymbols, defaultLengthMessage };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport {\n  ChangePasswordProps,\n  ValidateLengthConfigProps,\n} from '@/account/types';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport {\n  Button,\n  Card,\n  Header,\n  InLineAlert,\n  InputPassword,\n} from '@adobe-commerce/elsie/components';\nimport '@/account/components/ChangePassword/ChangePassword.css';\nimport { useGetStoreConfigs } from '@/account/hooks/containers/useGetStoreConfigs';\nimport { useChangePassword } from '@/account/hooks/components/useChangePassword';\nimport { usePasswordValidationMessage } from '@/account/hooks/components/usePasswordValidationMessage';\n\nexport const getErrorMessage = (\n  isValidUniqueSymbols: string,\n  defaultLengthMessage: ValidateLengthConfigProps | undefined,\n  isSubmit: boolean,\n  newPassword: string,\n  passwordErrors: { newPassword: string }\n) => {\n  const hasError =\n    isValidUniqueSymbols === 'error' ||\n    defaultLengthMessage?.status === 'error' ||\n    (isSubmit && newPassword.trim().length === 0);\n\n  return hasError ? passwordErrors.newPassword : undefined;\n};\n\nexport const ChangePassword: FunctionComponent<ChangePasswordProps> = ({\n  handleHideChangePassword,\n  handleSetInLineAlert,\n  inLineAlertProps,\n}) => {\n  const { passwordConfigs } = useGetStoreConfigs();\n\n  const {\n    hideChangePassword,\n    handleOnBlurPassword,\n    handleConfirmPasswordChange,\n    handleNewPasswordChange,\n    handleCurrentPasswordChange,\n    mutationChangePassword,\n    currentPassword,\n    newPassword,\n    confirmPassword,\n    passwordErrors,\n    submitLoading,\n    isClickSubmit,\n  } = useChangePassword({\n    passwordConfigs,\n    handleSetInLineAlert,\n    handleHideChangePassword,\n  });\n\n  const { isValidUniqueSymbols, defaultLengthMessage } =\n    usePasswordValidationMessage({\n      password: newPassword,\n      isClickSubmit,\n      passwordConfigs,\n    });\n\n  const translations = useText({\n    containerTitle:\n      'Account.minifiedView.CustomerInformation.changePassword.containerTitle',\n    currentPasswordPlaceholder:\n      'Account.minifiedView.CustomerInformation.changePassword.currentPassword.placeholder',\n    currentPasswordFloatingLabel:\n      'Account.minifiedView.CustomerInformation.changePassword.currentPassword.floatingLabel',\n    newPasswordPlaceholder:\n      'Account.minifiedView.CustomerInformation.changePassword.newPassword.placeholder',\n    newPasswordFloatingLabel:\n      'Account.minifiedView.CustomerInformation.changePassword.newPassword.floatingLabel',\n    confirmPasswordPlaceholder:\n      'Account.minifiedView.CustomerInformation.changePassword.confirmPassword.placeholder',\n    confirmPasswordFloatingLabel:\n      'Account.minifiedView.CustomerInformation.changePassword.confirmPassword.floatingLabel',\n    buttonSecondary:\n      'Account.minifiedView.CustomerInformation.changePassword.buttonSecondary',\n    buttonPrimary:\n      'Account.minifiedView.CustomerInformation.changePassword.buttonPrimary',\n  });\n\n  return (\n    <Card className=\"account-change-password\" variant=\"secondary\">\n      <Header\n        title={translations.containerTitle}\n        divider={false}\n        className={'account-change-password__title'}\n      />\n      {inLineAlertProps.text ? (\n        <InLineAlert\n          className=\"account-change-password__notification\"\n          type={inLineAlertProps.type}\n          variant=\"secondary\"\n          heading={inLineAlertProps.text}\n          icon={inLineAlertProps.icon}\n          data-testid=\"changePasswordInLineAlert\"\n        />\n      ) : null}\n      <div className=\"account-change-password__fields\">\n        <InputPassword\n          className=\"account-change-password__fields-item\"\n          autoComplete=\"currentPassword\"\n          name=\"currentPassword\"\n          placeholder={translations.currentPasswordPlaceholder}\n          floatingLabel={translations.currentPasswordFloatingLabel}\n          errorMessage={passwordErrors.currentPassword}\n          defaultValue={currentPassword}\n          onValue={handleCurrentPasswordChange}\n          onBlur={handleOnBlurPassword}\n        />\n        <InputPassword\n          className=\"account-change-password__fields-item\"\n          autoComplete=\"newPassword\"\n          name=\"newPassword\"\n          placeholder={translations.newPasswordPlaceholder}\n          floatingLabel={translations.newPasswordFloatingLabel}\n          minLength={passwordConfigs?.minLength}\n          validateLengthConfig={defaultLengthMessage}\n          uniqueSymbolsStatus={isValidUniqueSymbols}\n          requiredCharacterClasses={passwordConfigs?.requiredCharacterClasses}\n          errorMessage={getErrorMessage(\n            isValidUniqueSymbols,\n            defaultLengthMessage,\n            isClickSubmit,\n            newPassword,\n            passwordErrors\n          )}\n          defaultValue={newPassword}\n          onValue={handleNewPasswordChange}\n          onBlur={handleOnBlurPassword}\n        />\n        <InputPassword\n          className=\"account-change-password__fields-item\"\n          autoComplete=\"confirmPassword\"\n          name=\"confirmPassword\"\n          placeholder={translations.confirmPasswordPlaceholder}\n          floatingLabel={translations.confirmPasswordFloatingLabel}\n          errorMessage={passwordErrors.confirmPassword}\n          defaultValue={confirmPassword}\n          onValue={handleConfirmPasswordChange}\n          onBlur={handleOnBlurPassword}\n        />\n      </div>\n\n      <div className=\"account-change-password__actions\">\n        <Button\n          // @ts-ignore\n          type=\"button\"\n          disabled={submitLoading}\n          onClick={hideChangePassword}\n          variant=\"secondary\"\n        >\n          {translations.buttonSecondary}\n        </Button>\n        <Button\n          variant=\"primary\"\n          // @ts-ignore\n          type=\"button\"\n          disabled={submitLoading}\n          onClick={mutationChangePassword}\n        >\n          {translations.buttonPrimary}\n        </Button>\n      </div>\n    </Card>\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport { EditCustomerInformationProps, FieldsProps } from '@/account/types';\nimport {\n  Button,\n  Card,\n  Header,\n  InLineAlert,\n  InputPassword,\n} from '@adobe-commerce/elsie/components';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { Form } from '@/account/components';\nimport '@/account/components/EditCustomerInformation/EditCustomerInformation.css';\n\nexport const EditCustomerInformation: FunctionComponent<\n  EditCustomerInformationProps\n> = ({\n  inLineAlertProps,\n  errorPasswordEmpty,\n  passwordValue,\n  showPasswordOnEmailChange,\n  submitLoading,\n  formFieldsList,\n  handleHideEditForm,\n  handleUpdateCustomerInformation,\n  handleInputChange,\n  handleSetPassword,\n  handleOnBlurPassword,\n}) => {\n  const translations = useText({\n    buttonSecondary:\n      'Account.minifiedView.CustomerInformation.editCustomerInformation.buttonSecondary',\n    buttonPrimary:\n      'Account.minifiedView.CustomerInformation.editCustomerInformation.buttonPrimary',\n    placeholder:\n      'Account.minifiedView.CustomerInformation.editCustomerInformation.passwordField.placeholder',\n    floatingLabel:\n      'Account.minifiedView.CustomerInformation.editCustomerInformation.passwordField.floatingLabel',\n    containerTitle:\n      'Account.minifiedView.CustomerInformation.editCustomerInformation.containerTitle',\n    requiredFieldError: 'Account.FormText.requiredFieldError',\n  });\n\n  return (\n    <Card variant=\"secondary\" className={'account-edit-customer-information'}>\n      <Header\n        title={translations.containerTitle}\n        divider={false}\n        className={'account-edit-customer-information__title'}\n      />\n      {inLineAlertProps.text ? (\n        <InLineAlert\n          className=\"account-edit-customer-information__notification\"\n          type={inLineAlertProps.type}\n          variant=\"secondary\"\n          heading={inLineAlertProps.text}\n          icon={inLineAlertProps.icon}\n          data-testid=\"editCustomerInLineAlert\"\n        />\n      ) : null}\n      <Form\n        loading={submitLoading}\n        fieldsConfig={(formFieldsList as FieldsProps[]) || []}\n        name=\"editCustomerInformation\"\n        className=\"account-edit-customer-information-form\"\n        onSubmit={handleUpdateCustomerInformation}\n        setInputChange={handleInputChange}\n      >\n        {showPasswordOnEmailChange ? (\n          <div className=\"account-edit-customer-information__password\">\n            <InputPassword\n              autoComplete=\"password\"\n              name=\"password\"\n              placeholder={translations.placeholder}\n              floatingLabel={translations.floatingLabel}\n              errorMessage={\n                errorPasswordEmpty ? translations.requiredFieldError : undefined\n              }\n              defaultValue={passwordValue}\n              onValue={handleSetPassword}\n              onBlur={handleOnBlurPassword}\n            />\n          </div>\n        ) : null}\n        <div className=\"account-edit-customer-information__actions\">\n          <Button\n            disabled={submitLoading}\n            // @ts-ignore\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={() => handleHideEditForm()}\n          >\n            {translations.buttonSecondary}\n          </Button>\n          <Button disabled={submitLoading} type=\"submit\" variant=\"primary\">\n            {translations.buttonPrimary}\n          </Button>\n        </div>\n      </Form>\n    </Card>\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport { CustomerInformationCardProps } from '@/account/types';\nimport { Card, Button } from '@adobe-commerce/elsie/components';\nimport { classes, Slot } from '@adobe-commerce/elsie/lib';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport '@/account/components/CustomerInformationCard/CustomerInformationCard.css';\n\nexport const CustomerInformationCard: FunctionComponent<\n  CustomerInformationCardProps\n> = ({\n  createdAt,\n  slots,\n  orderedCustomerData,\n  showEditForm,\n  showChangePassword,\n  handleShowChangePassword,\n  handleShowEditForm,\n}) => {\n  const translations = useText({\n    buttonSecondary:\n      'Account.minifiedView.CustomerInformation.customerInformationCard.buttonSecondary',\n    buttonPrimary:\n      'Account.minifiedView.CustomerInformation.customerInformationCard.buttonPrimary',\n    accountCreation:\n      'Account.minifiedView.CustomerInformation.customerInformationCard.accountCreation',\n  });\n\n  return (\n    <Card\n      variant=\"secondary\"\n      className={classes([\n        'account-customer-information-card',\n        [\n          'account-customer-information-card-short',\n          showChangePassword || showEditForm,\n        ],\n      ])}\n    >\n      <div className=\"account-customer-information-card__wrapper\">\n        <div className=\"account-customer-information-card__actions\">\n          <Button\n            // @ts-ignore\n            type=\"button\"\n            variant=\"tertiary\"\n            onClick={handleShowChangePassword}\n          >\n            {translations.buttonSecondary}\n          </Button>\n\n          <Button\n            // @ts-ignore\n            type=\"button\"\n            variant=\"tertiary\"\n            onClick={handleShowEditForm}\n          >\n            {translations.buttonPrimary}\n          </Button>\n        </div>\n        <div className=\"account-customer-information-card__content\">\n          {slots?.CustomerData ? (\n            <Slot\n              name=\"CustomerData\"\n              slot={slots?.CustomerData}\n              context={{ customerData: orderedCustomerData }}\n            />\n          ) : (\n            <>\n              {orderedCustomerData?.map((el, index) => {\n                const value = !el?.label\n                  ? el?.value\n                  : `${el.label}: ${el?.value}`;\n\n                return (\n                  <p\n                    key={`${el.name}_${index}`}\n                    data-testid={`${el.name}_${index}`}\n                  >\n                    {value}\n                  </p>\n                );\n              })}\n              <p>\n                {translations.accountCreation}: {createdAt}\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import { CustomerDataModelShort } from '@/account/data/models/customer';\n\nexport const transformDobCustomer = (\n  customerData: CustomerDataModelShort\n): CustomerDataModelShort | (CustomerDataModelShort & { dob: string }) => {\n  if (!customerData?.dateOfBirth) return customerData;\n\n  const { dateOfBirth, ...rest } = customerData;\n\n  return { ...rest, dob: dateOfBirth } as CustomerDataModelShort & {\n    dob: string;\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { transformAccount } from '../data/transforms';\n\nconst ACCOUNT_CONTEXT = 'accountContext';\n\nenum EventsList {\n  EDIT_ACCOUNT_EVENT = 'edit-account',\n}\n\nconst events = {\n  // Reference - https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-collector/src/handlers/account/editAccountAEP.ts\n  EDIT_ACCOUNT_EVENT: EventsList.EDIT_ACCOUNT_EVENT,\n};\n\nexport function getAdobeDataLayer() {\n  // @ts-ignore\n  window.adobeDataLayer = window.adobeDataLayer || [];\n  // @ts-ignore\n  return window.adobeDataLayer;\n}\n\n/**\n * Sets a context in the Adobe Client Data Layer (ACDL)\n * Logic based on: https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-sdk/src/Base.ts#L6\n */\nfunction setContext(name: string, data: any) {\n  const adobeDataLayer = getAdobeDataLayer();\n\n  // Clear existing context\n  adobeDataLayer.push({\n    [name]: null,\n  });\n\n  // Set new context\n  adobeDataLayer.push({\n    [name]: data,\n  });\n}\n\n/**\n * Pushes an event to the Adobe Client Data Layer (ACDL)\n * Logic based on: https://github.com/adobe/commerce-events/blob/1973d0ce28471ef190fa06dad6359ffa0ab51db6/packages/storefront-events-sdk/src/Base.ts#L34\n */\nfunction pushEvent(event: string, additionalContext?: any) {\n  const adobeDataLayer = getAdobeDataLayer();\n\n  adobeDataLayer.push((acdl: any) => {\n    const state = acdl.getState ? acdl.getState() : {};\n\n    acdl.push({\n      event,\n      eventInfo: {\n        ...state,\n        ...additionalContext,\n      },\n    });\n  });\n}\n\n/**\n * References:\n * https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-collector/src/handlers/account/editAccountAEP.ts\n * https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-collector/src/utils/aep/account.ts\n */\nfunction editAccountEvent(eventData: any) {\n  const accountData = transformAccount(eventData);\n\n  setContext(ACCOUNT_CONTEXT, accountData);\n\n  pushEvent(events.EDIT_ACCOUNT_EVENT);\n}\n\nconst publishEvents = (eventType: string, eventParams: any) => {\n  const storeConfigRaw = sessionStorage.getItem('accountStoreConfig');\n  const storeConfig = storeConfigRaw ? JSON.parse(storeConfigRaw) : {};\n  const eventData = { ...storeConfig, ...eventParams };\n\n  switch (eventType) {\n    case EventsList.EDIT_ACCOUNT_EVENT:\n      editAccountEvent(eventData);\n      break;\n\n    default:\n      return null;\n  }\n};\n\nexport { EventsList, publishEvents, pushEvent };\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { useCallback, useEffect, useMemo, useState } from 'preact/hooks';\nimport {\n  getAttributesForm,\n  getCustomer,\n  updateCustomerEmail,\n  updateCustomer,\n} from '@/account/api';\nimport {\n  KeysSortOrderProps,\n  UseCustomerInformationProps,\n} from '@/account/types';\nimport { defaultAccountAttributePreset } from '@/account/configs/defaultAttributePreset.config';\nimport { CustomerDataModelShort } from '@/account/data/models/customer';\nimport { AttributesFormModel } from '@/account/data/models';\nimport { getFormValues } from '@/account/lib/getFormValues';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { normalizeAttributes } from '@/account/lib/normalizeAttributes';\nimport { transformDobCustomer } from '@/account/lib/transformDobCustomer';\nimport { EventsList, publishEvents } from '@/account/lib/acdl';\n\nexport const useCustomerInformation = ({\n  handleSetInLineAlert,\n}: UseCustomerInformationProps) => {\n  const translations = useText({\n    accountSuccess:\n      'Account.minifiedView.CustomerInformation.editCustomerInformation.accountSuccess',\n    accountError:\n      'Account.minifiedView.CustomerInformation.editCustomerInformation.accountError',\n    genderMale: 'Account.minifiedView.CustomerInformation.genderMale',\n    genderFemale: 'Account.minifiedView.CustomerInformation.genderFemale',\n  });\n  const [loading, setLoading] = useState<boolean>(true);\n  const [submitLoading, setSubmitLoading] = useState<boolean>(false);\n  const [showChangePassword, setShowChangePassword] = useState<boolean>(false);\n  const [showEditForm, setShowEditForm] = useState<boolean>(false);\n  const [errorPasswordEmpty, setErrorPasswordEmpty] = useState(false);\n  const [showPasswordOnEmailChange, setShowPasswordOnEmailChange] =\n    useState(false);\n  const [keysSortOrder, setKeysSortOrder] = useState<KeysSortOrderProps[] | []>(\n    []\n  );\n  const [customerData, setCustomerData] =\n    useState<CustomerDataModelShort | null>(null);\n  const [formFieldsList, setFormFieldsList] = useState<\n    AttributesFormModel[] | []\n  >([]);\n  const [inputChange, setInputChange] = useState<\n    Record<string, string | number | boolean>\n  >({});\n  const [passwordValue, setPasswordValue] = useState('');\n  const [createdAt, setCreatedAt] = useState('');\n\n  const handleOnBlurPassword = useCallback((event: Event) => {\n    const { value } = event?.target as HTMLInputElement;\n\n    if (value.length) setErrorPasswordEmpty(false);\n    if (!value.length) setErrorPasswordEmpty(true);\n  }, []);\n\n  const handleSetPassword = useCallback((value: string) => {\n    setPasswordValue(value);\n  }, []);\n\n  const handleInputChange = useCallback(\n    (value: Record<string, string | number | boolean>) => {\n      setInputChange(value);\n    },\n    []\n  );\n\n  const handleShowChangePassword = useCallback(() => {\n    setShowChangePassword(true);\n    setShowEditForm(false);\n    handleSetInLineAlert();\n    handleSetPassword('');\n  }, [handleSetInLineAlert, handleSetPassword]);\n\n  const handleHideChangePassword = useCallback((clearStates?: () => void) => {\n    clearStates?.();\n    setShowChangePassword(false);\n  }, []);\n\n  const handleShowEditForm = useCallback(() => {\n    setShowEditForm(true);\n    setShowChangePassword(false);\n    handleSetInLineAlert();\n    handleSetPassword('');\n  }, [handleSetInLineAlert, handleSetPassword]);\n\n  const handleHideEditForm = useCallback((clearStates?: () => void) => {\n    clearStates?.();\n    setShowEditForm(false);\n  }, []);\n\n  const renderAlertMessage = useCallback(\n    (type: 'success' | 'error', message?: string) => {\n      if (type === 'success') {\n        handleSetInLineAlert({\n          type: 'success',\n          text: message ?? translations.accountSuccess,\n        });\n      } else if (type === 'error') {\n        handleSetInLineAlert({\n          type: 'error',\n          text: message ?? translations.accountError,\n        });\n      } else {\n        handleSetInLineAlert();\n      }\n\n      setSubmitLoading(false);\n    },\n    [handleSetInLineAlert, translations]\n  );\n\n  const fetchCustomer = useCallback(() => {\n    getCustomer().then((customer: CustomerDataModelShort) => {\n      const createAccountDate = customer?.createdAt?.split(' ')[0];\n      const modifyCustomerData = transformDobCustomer({\n        ...customer,\n        gender:\n          customer.gender === 1\n            ? translations.genderMale\n            : translations.genderFemale,\n      });\n\n      setCustomerData(modifyCustomerData);\n      setCreatedAt(createAccountDate);\n    });\n  }, [translations.genderFemale, translations.genderMale]);\n\n  useEffect(() => {\n    fetchCustomer();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    getAttributesForm('customer_account_edit').then(\n      (attributesFormResponse) => {\n        setFormFieldsList(attributesFormResponse);\n\n        const result: KeysSortOrderProps[] = attributesFormResponse.map(\n          ({ name, customUpperCode, orderNumber, label }) => ({\n            name: customUpperCode,\n            orderNumber,\n            label: !defaultAccountAttributePreset.includes(name as string)\n              ? label\n              : null,\n          })\n        );\n\n        setKeysSortOrder(result);\n      }\n    );\n  }, []);\n\n  useEffect(() => {\n    if (inputChange['email'] && inputChange['email'] !== customerData?.email) {\n      setShowPasswordOnEmailChange(true);\n    } else if (\n      inputChange['email'] &&\n      inputChange['email'] === customerData?.email\n    ) {\n      setShowPasswordOnEmailChange(false);\n    }\n  }, [customerData?.email, inputChange]);\n\n  const orderedCustomerData = useMemo(() => {\n    if (!keysSortOrder || !customerData) return [];\n\n    const result = keysSortOrder\n      .filter(\n        ({ name }) =>\n          name !== undefined && (customerData as Record<string, any>)[name]\n      )\n      .map((item) => {\n        return {\n          name: item.name,\n          orderNumber: item.orderNumber,\n          value: (customerData as Record<string, any>)[item.name],\n          label: item.label,\n        };\n      });\n\n    return result;\n  }, [customerData, keysSortOrder]);\n\n  useEffect(() => {\n    orderedCustomerData?.length && setLoading(false);\n  }, [orderedCustomerData]);\n\n  const normalizeFieldsConfig = useMemo(() => {\n    return formFieldsList\n      ?.map((el) => ({\n        ...el,\n        defaultValue:\n          el?.customUpperCode && customerData\n            ? (customerData as Record<string, any>)[el.customUpperCode] ?? ''\n            : '',\n      }))\n      .map((item) => {\n        if (item.customUpperCode === 'gender') {\n          return {\n            ...item,\n            defaultValue: item.defaultValue === 'Male' ? 1 : 2,\n          };\n        }\n\n        return item;\n      });\n  }, [formFieldsList, customerData]);\n\n  const handleUpdateCustomerInformation = useCallback(\n    async (event: Event, valid: boolean) => {\n      const formValues = getFormValues(event.target as HTMLFormElement);\n\n      const { email, password, ...props } = formValues;\n\n      const passwordEmpty =\n        email !== customerData?.email! && password.length === 0;\n\n      if (!valid) {\n        if (passwordEmpty) {\n          setErrorPasswordEmpty(true);\n        }\n        return;\n      }\n\n      setErrorPasswordEmpty(false);\n      setSubmitLoading(true);\n\n      if (email === customerData?.email!) {\n        handleSetPassword('');\n\n        updateCustomer(normalizeAttributes(props, 'account'))\n          .then((response) => {\n            if (!response) return;\n\n            fetchCustomer();\n\n            renderAlertMessage('success');\n            publishEvents(EventsList?.EDIT_ACCOUNT_EVENT, {\n              ...formValues,\n            });\n          })\n          .catch((error) => {\n            renderAlertMessage('error', error.message);\n          });\n\n        return;\n      }\n\n      if (passwordEmpty) {\n        setErrorPasswordEmpty(true);\n        setSubmitLoading(false);\n        return;\n      }\n\n      if (email?.length && password?.length) {\n        updateCustomerEmail({ email, password })\n          .then((customerEmail) => {\n            if (!customerEmail) return;\n\n            updateCustomer(normalizeAttributes(props, 'account'))\n              .then((responseCustomer) => {\n                if (!responseCustomer) return;\n\n                fetchCustomer();\n\n                renderAlertMessage('success');\n\n                publishEvents(EventsList?.EDIT_ACCOUNT_EVENT, {\n                  ...formValues,\n                });\n              })\n              .catch((error) => {\n                renderAlertMessage('error', error.message);\n              });\n          })\n          .catch((error) => {\n            renderAlertMessage('error', error.message);\n          });\n      }\n    },\n    [customerData, handleSetPassword, fetchCustomer, renderAlertMessage]\n  );\n\n  return {\n    createdAt,\n    errorPasswordEmpty,\n    passwordValue,\n    showPasswordOnEmailChange,\n    orderedCustomerData,\n    loading,\n    normalizeFieldsConfig,\n    submitLoading,\n    showEditForm,\n    showChangePassword,\n    handleShowChangePassword,\n    handleHideChangePassword,\n    handleShowEditForm,\n    handleHideEditForm,\n    handleUpdateCustomerInformation,\n    handleInputChange,\n    handleSetPassword,\n    handleOnBlurPassword,\n    renderAlertMessage,\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { useState, useCallback } from 'preact/hooks';\nimport { InLineAlertProps } from '../types';\nimport {\n  CheckWithCircle as Success,\n  Warning,\n  WarningWithCircle as Error,\n} from '@adobe-commerce/elsie/icons';\n\nconst iconsList = {\n  success: <Success />,\n  warning: <Warning />,\n  error: <Error />,\n};\n\nexport const useInLineAlert = () => {\n  const [inLineAlertProps, setInLineAlertProps] = useState<InLineAlertProps>(\n    {}\n  );\n\n  const handleSetInLineAlert = useCallback(\n    (notification: InLineAlertProps | undefined) => {\n      if (!notification?.type) {\n        setInLineAlertProps({});\n        return;\n      }\n\n      const icon = iconsList[notification.type];\n\n      setInLineAlertProps({\n        ...notification,\n        icon,\n      });\n    },\n    []\n  );\n\n  return { inLineAlertProps, handleSetInLineAlert };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport {\n  CardLoader,\n  ChangePassword,\n  CustomerInformationCard,\n  EditCustomerInformation,\n} from '@/account/components';\nimport { useCustomerInformation } from '@/account/hooks/containers/useCustomerInformation';\nimport { useInLineAlert } from '@/account/hooks/useInLineAlert';\nimport { CustomerInformationProps } from '@/account/types';\nimport { classes, Container } from '@adobe-commerce/elsie/lib';\nimport { Header } from '@adobe-commerce/elsie/components';\nimport { useText } from '@adobe-commerce/elsie/i18n';\n\nexport const CustomerInformation: Container<CustomerInformationProps> = ({\n  className,\n  withHeader = true,\n  slots,\n}) => {\n  const translations = useText({\n    containerTitle: 'Account.minifiedView.CustomerInformation.containerTitle',\n  });\n  const { inLineAlertProps, handleSetInLineAlert } = useInLineAlert();\n  const {\n    createdAt,\n    errorPasswordEmpty,\n    passwordValue,\n    showPasswordOnEmailChange,\n    orderedCustomerData,\n    loading,\n    normalizeFieldsConfig,\n    submitLoading,\n    showEditForm,\n    showChangePassword,\n    handleShowChangePassword,\n    handleHideChangePassword,\n    handleShowEditForm,\n    handleHideEditForm,\n    handleUpdateCustomerInformation,\n    handleInputChange,\n    handleSetPassword,\n    handleOnBlurPassword,\n  } = useCustomerInformation({ handleSetInLineAlert });\n\n  if (loading)\n    return (\n      <div data-testid=\"customerInformationLoader\">\n        <CardLoader withCard />\n      </div>\n    );\n\n  return (\n    <div className={classes(['account-customer-information', className])}>\n      {withHeader ? (\n        <Header\n          title={translations.containerTitle}\n          divider={false}\n          className={'customer-information__title'}\n        />\n      ) : null}\n      <CustomerInformationCard\n        createdAt={createdAt}\n        slots={slots}\n        orderedCustomerData={orderedCustomerData}\n        showEditForm={showEditForm}\n        showChangePassword={showChangePassword}\n        handleShowChangePassword={handleShowChangePassword}\n        handleShowEditForm={handleShowEditForm}\n      />\n      {showChangePassword ? (\n        <ChangePassword\n          inLineAlertProps={inLineAlertProps}\n          handleSetInLineAlert={handleSetInLineAlert}\n          handleHideChangePassword={handleHideChangePassword}\n        />\n      ) : null}\n      {showEditForm ? (\n        <EditCustomerInformation\n          inLineAlertProps={inLineAlertProps}\n          submitLoading={submitLoading}\n          formFieldsList={normalizeFieldsConfig}\n          errorPasswordEmpty={errorPasswordEmpty}\n          passwordValue={passwordValue}\n          showPasswordOnEmailChange={showPasswordOnEmailChange}\n          handleSetPassword={handleSetPassword}\n          handleOnBlurPassword={handleOnBlurPassword}\n          handleUpdateCustomerInformation={handleUpdateCustomerInformation}\n          handleHideEditForm={handleHideEditForm}\n          handleInputChange={handleInputChange}\n        />\n      ) : null}\n    </div>\n  );\n};\n"],"names":["SvgWarning","props","React","SvgCheckWithCircle","SvgWarningWithCircle","transformAccount","data","useGetStoreConfigs","passwordConfigs","setPasswordConfigs","useState","useEffect","storeConfigString","cachedStoreConfig","minLength","requiredCharacterClasses","getStoreConfig","response","validationChangePassword","currentPassword","newPassword","confirmPassword","translations","errors","DEFAULT_ERRORS_STATE","arePasswordsEmpty","isNewPasswordMismatch","validationUniqueSymbolsPassword","password","uniqueSymbolsCount","numbers","lowerCaseLetter","upperCaseLetter","specialSymbols","useChangePassword","handleSetInLineAlert","handleHideChangePassword","useText","isClickSubmit","setIsClickSubmit","submitLoading","setSubmitLoading","setCurrentPassword","setNewPassword","setConfirmPassword","passwordErrors","setPasswordErrors","hideChangePassword","useCallback","handleCurrentPasswordChange","value","prev","handleNewPasswordChange","handleConfirmPasswordChange","handleOnBlurPassword","event","name","validatePasswords","isValid","mutationChangePassword","requiredPasswordLength","updateCustomerPassword","result","error","usePasswordValidationMessage","isValidUniqueSymbols","setIsValidUniqueSymbols","defaultLengthMessage","useMemo","defaultMessage","_a","getErrorMessage","isSubmit","ChangePassword","inLineAlertProps","jsxs","Card","jsx","Header","InLineAlert","InputPassword","Button","EditCustomerInformation","errorPasswordEmpty","passwordValue","showPasswordOnEmailChange","formFieldsList","handleHideEditForm","handleUpdateCustomerInformation","handleInputChange","handleSetPassword","Form","CustomerInformationCard","createdAt","slots","orderedCustomerData","showEditForm","showChangePassword","handleShowChangePassword","handleShowEditForm","classes","Slot","Fragment","el","index","transformDobCustomer","customerData","dateOfBirth","rest","ACCOUNT_CONTEXT","EventsList","events","getAdobeDataLayer","setContext","adobeDataLayer","pushEvent","additionalContext","acdl","state","editAccountEvent","eventData","accountData","publishEvents","eventType","eventParams","storeConfigRaw","useCustomerInformation","loading","setLoading","setShowChangePassword","setShowEditForm","setErrorPasswordEmpty","setShowPasswordOnEmailChange","keysSortOrder","setKeysSortOrder","setCustomerData","setFormFieldsList","inputChange","setInputChange","setPasswordValue","setCreatedAt","clearStates","renderAlertMessage","type","message","fetchCustomer","getCustomer","customer","createAccountDate","modifyCustomerData","getAttributesForm","attributesFormResponse","customUpperCode","orderNumber","label","defaultAccountAttributePreset","item","normalizeFieldsConfig","valid","formValues","getFormValues","email","passwordEmpty","updateCustomer","normalizeAttributes","updateCustomerEmail","customerEmail","responseCustomer","iconsList","Success","Warning","Error","useInLineAlert","setInLineAlertProps","notification","icon","CustomerInformation","className","withHeader","CardLoader"],"mappings":"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","x_google_ignoreList":[0,1,2]}