{"version":3,"file":"api.js","sources":["/@dropins/storefront-account/src/data/transforms/transform-regions.ts","/@dropins/storefront-account/src/api/getRegions/graphql/getRegions.graphql.ts","/@dropins/storefront-account/src/api/getRegions/getRegions.ts"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { RegionsFormResponse } from '@/account/types';\nimport { Region, RegionTransform } from '../models';\n\nexport const transformRegions = (\n  response: RegionsFormResponse\n): RegionTransform[] | [] => {\n  const availableRegions = response?.data?.country?.available_regions;\n  if (!availableRegions) return [];\n\n  const regions = availableRegions\n    .filter((item) => {\n      if (!item) return false;\n\n      const { id, code, name } = item;\n      return Boolean(id && code && name);\n    })\n    .map((region) => {\n      const { id } = region as Region;\n\n      return { id, text: region.name, value: `${region.code},${region.id}` };\n    });\n\n  return regions;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const GET_REGIONS = /* GraphQL */ `\n  query GET_REGIONS($countryCode: String!) {\n    country(id: $countryCode) {\n      id\n      available_regions {\n        id\n        code\n        name\n      }\n    }\n  }\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { fetchGraphQl } from '@/account/api/fetch-graphql';\nimport { handleNetworkError } from '@/account/lib/network-error';\nimport { handleFetchError } from '@/account/lib/fetch-error';\nimport { GET_REGIONS } from './graphql/getRegions.graphql';\nimport { transformRegions } from '@/account/data/transforms';\nimport { RegionsFormResponse } from '@/account/types';\nimport { RegionTransform } from '@/account/data/models';\n\nexport const getRegions = async (\n  countryCode: string\n): Promise<RegionTransform[] | []> => {\n  const sessionStorageKey = `_account_regions_${countryCode}`;\n\n  const sessionStorageCache = sessionStorage.getItem(sessionStorageKey);\n\n  if (sessionStorageCache) {\n    return JSON.parse(sessionStorageCache);\n  }\n\n  return await fetchGraphQl(GET_REGIONS, {\n    method: 'GET',\n    cache: 'no-cache',\n    variables: { countryCode },\n  })\n    .then((response: RegionsFormResponse) => {\n      if (response.errors?.length) return handleFetchError(response.errors);\n\n      const transformedData = transformRegions(response);\n\n      sessionStorage.setItem(\n        sessionStorageKey,\n        JSON.stringify(transformedData)\n      );\n\n      return transformedData;\n    })\n    .catch(handleNetworkError);\n};\n"],"names":["transformRegions","response","availableRegions","_b","_a","item","id","code","name","region","GET_REGIONS","getRegions","countryCode","sessionStorageKey","sessionStorageCache","fetchGraphQl","handleFetchError","transformedData","handleNetworkError"],"mappings":"sfAoBa,MAAAA,EACXC,GAC2B,SACrB,MAAAC,GAAmBC,GAAAC,EAAAH,GAAA,YAAAA,EAAU,OAAV,YAAAG,EAAgB,UAAhB,YAAAD,EAAyB,kBAC9C,OAACD,EAEWA,EACb,OAAQG,GAAS,CACZ,GAAA,CAACA,EAAa,MAAA,GAElB,KAAM,CAAE,GAAAC,EAAI,KAAAC,EAAM,KAAAC,CAAS,EAAAH,EACpB,MAAA,GAAQC,GAAMC,GAAQC,EAAI,CAClC,EACA,IAAKC,GAAW,CACT,KAAA,CAAE,GAAAH,GAAOG,EAEf,MAAO,CAAE,GAAAH,EAAI,KAAMG,EAAO,KAAM,MAAO,GAAGA,EAAO,IAAI,IAAIA,EAAO,EAAE,EAAG,CAAA,CACtE,EAb2B,CAAC,CAgBjC,ECvBaC,EAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECQ5BC,EAAa,MACxBC,GACoC,CAC9B,MAAAC,EAAoB,oBAAoBD,CAAW,GAEnDE,EAAsB,eAAe,QAAQD,CAAiB,EAEpE,OAAIC,EACK,KAAK,MAAMA,CAAmB,EAGhC,MAAMC,EAAaL,EAAa,CACrC,OAAQ,MACR,MAAO,WACP,UAAW,CAAE,YAAAE,CAAY,CAAA,CAC1B,EACE,KAAMX,GAAkC,OACvC,IAAIG,EAAAH,EAAS,SAAT,MAAAG,EAAiB,OAAe,OAAAY,EAAiBf,EAAS,MAAM,EAE9D,MAAAgB,EAAkBjB,EAAiBC,CAAQ,EAElC,sBAAA,QACbY,EACA,KAAK,UAAUI,CAAe,CAChC,EAEOA,CAAA,CACR,EACA,MAAMC,CAAkB,CAC7B"}