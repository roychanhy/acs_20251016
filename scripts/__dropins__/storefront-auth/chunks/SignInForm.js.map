{"version":3,"file":"SignInForm.js","sources":["/@dropins/storefront-auth/src/hooks/components/useSignInForm.tsx","/@dropins/storefront-auth/src/lib/clearUrlAndReplace.ts","/@dropins/storefront-auth/src/hooks/useEmailConfirmation.tsx","/@dropins/storefront-auth/src/components/SignInForm/SignInForm.tsx"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { getFormValues } from '@/auth/lib/getFormValues';\nimport { useCallback, useState, useMemo, useEffect } from 'preact/hooks';\nimport { getCustomerToken, resendConfirmationEmail } from '@/auth/api';\nimport { AdditionalActionsAlertProps, useSignInFormProps } from '@/auth/types';\nimport { DEFAULT__SIGN_IN_EMAIL_FIELD } from '@/auth/configs/defaultCreateUserConfigs';\nimport { simplifyTransformAttributesForm } from '@/auth/lib/simplifyTransformAttributesForm';\nimport { checkIsFunction } from '@/auth/lib/checkIsFunction';\nimport { focusOnEmptyPasswordField } from '@/auth/lib/focusOnEmptyPasswordField';\n\nexport const useSignInForm = ({\n  emailConfirmationStatusMessage,\n  translations,\n  initialEmailValue,\n  routeSignUp,\n  routeForgotPassword,\n  routeRedirectOnSignIn,\n  onErrorCallback,\n  setActiveComponent,\n  onSuccessCallback,\n  onSignUpLinkClick,\n  handleSetInLineAlertProps,\n  routeRedirectOnEmailConfirmationClose,\n}: useSignInFormProps) => {\n  const [userEmail, setUserEmail] = useState('');\n  const [showEmailConfirmationForm, setShowEmailConfirmationForm] =\n    useState(false);\n  const [signInPasswordValue, setSignInPasswordValue] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [isSuccessful, setIsSuccessful] = useState({\n    userName: '',\n    status: false,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [additionalActionsAlert, setAdditionalActionsAlert] =\n    useState<AdditionalActionsAlertProps>([]);\n\n  const actionsShowNotificationForm = useCallback(\n    async (email: string) => {\n      handleSetInLineAlertProps();\n      setShowEmailConfirmationForm(true);\n      setPasswordError(false);\n      setAdditionalActionsAlert([]);\n\n      await resendConfirmationEmail(email);\n    },\n    [handleSetInLineAlertProps]\n  );\n\n  const handleSetPassword = useCallback((value: string) => {\n    if (value.length) {\n      setPasswordError(false);\n    } else {\n      setPasswordError(true);\n    }\n    setSignInPasswordValue(value);\n  }, []);\n\n  useEffect(() => {\n    if (emailConfirmationStatusMessage?.text) {\n      handleSetInLineAlertProps({\n        text: emailConfirmationStatusMessage.text,\n        type: emailConfirmationStatusMessage.status\n          ? emailConfirmationStatusMessage.status\n          : undefined,\n      });\n    }\n  }, [emailConfirmationStatusMessage, handleSetInLineAlertProps]);\n\n  const onBlurPassword = useCallback(() => {\n    if (!signInPasswordValue.length) {\n      setPasswordError(true);\n    }\n  }, [signInPasswordValue]);\n\n  const checkPasswordAndFocus = useCallback(\n    (event: SubmitEvent, isValid: boolean): boolean => {\n      if (!signInPasswordValue.length) {\n        setPasswordError(true);\n\n        if (!isValid) return true;\n\n        focusOnEmptyPasswordField(event, signInPasswordValue, '');\n        return true;\n      }\n\n      return false;\n    },\n    [signInPasswordValue]\n  );\n\n  const onAuthenticationSuccess = useCallback(\n    (event: SubmitEvent, loginResponse: Record<string, string>) => {\n      if (loginResponse?.userName) {\n        (event.target as HTMLFormElement).reset();\n\n        if (checkIsFunction(routeRedirectOnSignIn)) {\n          window.location.href = routeRedirectOnSignIn();\n        } else {\n          onSuccessCallback?.({\n            userName: loginResponse?.userName,\n            status: true,\n          });\n\n          setIsSuccessful({\n            userName: loginResponse?.userName,\n            status: true,\n          });\n        }\n      }\n    },\n    [onSuccessCallback, routeRedirectOnSignIn]\n  );\n\n  const onAuthenticationFailed = useCallback(\n    (loginResponse: { errorMessage: string }, email: string) => {\n      if (loginResponse?.errorMessage?.length) {\n        setUserEmail(email);\n\n        /**\n         * TODO: Use error code when available, instead of comparing to response text\n         *\n         * This implementation is a temporary solution.\n         * The backend functionality is planned to be improved to obtain accurate data that will help correctly identify error types and handle them.\n         */\n        const isIncludesMessage = loginResponse.errorMessage.includes(\n          \"This account isn't confirmed. Verify and try again.\"\n        );\n\n        const errorMessage: string = isIncludesMessage\n          ? translations.resendEmailInformationText\n          : loginResponse.errorMessage;\n\n        if (isIncludesMessage) {\n          setAdditionalActionsAlert([\n            {\n              label: translations.resendEmailButtonText,\n              onClick: () => {\n                actionsShowNotificationForm(email);\n              },\n            },\n          ]);\n        } else {\n          setAdditionalActionsAlert([]);\n        }\n\n        handleSetInLineAlertProps({\n          text: errorMessage,\n          type: 'error',\n        });\n\n        setSignInPasswordValue('');\n      }\n    },\n    [\n      actionsShowNotificationForm,\n      handleSetInLineAlertProps,\n      translations.resendEmailButtonText,\n      translations.resendEmailInformationText,\n    ]\n  );\n\n  const submitLogInUser = useCallback(\n    async (event: SubmitEvent, isValid: boolean): Promise<void> => {\n      handleSetInLineAlertProps();\n\n      if (checkPasswordAndFocus(event, isValid)) return;\n\n      setIsLoading(true);\n\n      const formValues = getFormValues(event.target);\n      const isFormComplete = Object.values(formValues).every((value) => value);\n\n      if (isFormComplete) {\n        const { email, password } = formValues;\n\n        const loginResponse = await getCustomerToken({\n          email,\n          password,\n          handleSetInLineAlertProps,\n          onErrorCallback,\n          translations,\n        });\n\n        onAuthenticationFailed(loginResponse, email);\n        onAuthenticationSuccess(event, loginResponse);\n\n        setPasswordError(false);\n      }\n\n      setIsLoading(false);\n    },\n    [\n      translations,\n      onErrorCallback,\n      checkPasswordAndFocus,\n      onAuthenticationFailed,\n      onAuthenticationSuccess,\n      handleSetInLineAlertProps,\n    ]\n  );\n\n  const forgotPasswordCallback = useCallback(() => {\n    if (checkIsFunction(setActiveComponent)) {\n      setActiveComponent('resetPasswordForm');\n\n      return;\n    }\n\n    if (checkIsFunction(routeForgotPassword)) {\n      window.location.href = routeForgotPassword();\n    }\n  }, [routeForgotPassword, setActiveComponent]);\n\n  const onSignUpLinkClickCallback = useCallback(() => {\n    if (checkIsFunction(onSignUpLinkClick)) {\n      onSignUpLinkClick();\n    }\n\n    if (checkIsFunction(setActiveComponent)) {\n      setActiveComponent('signUpForm');\n\n      return;\n    }\n\n    if (checkIsFunction(routeSignUp)) {\n      window.location.href = routeSignUp();\n    }\n  }, [onSignUpLinkClick, routeSignUp, setActiveComponent]);\n\n  const defaultEnhancedEmailFields: any = useMemo(() => {\n    const fieldsList = simplifyTransformAttributesForm(\n      DEFAULT__SIGN_IN_EMAIL_FIELD\n    );\n\n    if (!initialEmailValue?.length) return fieldsList;\n\n    return fieldsList?.map((el: any) => ({\n      ...el,\n      defaultValue: initialEmailValue,\n    }));\n  }, [initialEmailValue]);\n\n  const handledOnPrimaryButtonClick = useCallback(() => {\n    handleSetInLineAlertProps();\n\n    if (checkIsFunction(routeRedirectOnEmailConfirmationClose)) {\n      window.location.href = routeRedirectOnEmailConfirmationClose();\n    } else {\n      setShowEmailConfirmationForm(false);\n    }\n  }, [handleSetInLineAlertProps, routeRedirectOnEmailConfirmationClose]);\n\n  return {\n    additionalActionsAlert,\n    userEmail,\n    defaultEnhancedEmailFields,\n    passwordError,\n    isSuccessful,\n    isLoading,\n    signInPasswordValue,\n    showEmailConfirmationForm,\n    setShowEmailConfirmationForm,\n    setSignInPasswordValue,\n    submitLogInUser,\n    forgotPasswordCallback,\n    onSignUpLinkClickCallback,\n    handledOnPrimaryButtonClick,\n    handleSetPassword,\n    onBlurPassword,\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const clearUrlAndReplace = () => {\n  let url = new URL(window.location.href);\n\n  let email = url.searchParams.get('email');\n  let token = url.searchParams.get('key');\n\n  if (email && token) {\n    url.searchParams.delete('email');\n    url.searchParams.delete('key');\n\n    window.history.replaceState({}, document.title, url.toString());\n  }\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { useEffect, useState } from 'preact/hooks';\nimport { clearUrlAndReplace } from '../lib/clearUrlAndReplace';\nimport { confirmEmail } from '../api';\nimport { useText } from '@adobe-commerce/elsie/i18n';\n\ninterface useEmailConfirmationProps {\n  enableEmailConfirmation: boolean;\n}\n\n// The client receives a confirmation of the validation via email. When the client follows the provided link, they are directed to the login page with three query parameters. If these parameters are present, we make a request to validate the status. This request returns a response that we display to the user.\nexport const useEmailConfirmation = ({\n  enableEmailConfirmation,\n}: useEmailConfirmationProps) => {\n  const translations = useText({\n    accountConfirmMessage: 'Auth.EmailConfirmationForm.accountConfirmMessage',\n    accountConfirmationEmailSuccessMessage:\n      'Auth.EmailConfirmationForm.accountConfirmationEmailSuccessMessage',\n  });\n  const [emailConfirmationStatusMessage, setEmailConfirmationStatusMessage] =\n    useState<{\n      text: string;\n      status: '' | 'success' | 'error';\n    }>({\n      text: '',\n      status: '',\n    });\n\n  useEffect(() => {\n    if (enableEmailConfirmation) {\n      const { search } = window.location;\n\n      if (search.includes('email=') && search.includes('key=')) {\n        const validateEmailStatus = async () => {\n          const params = new URLSearchParams(search);\n\n          const response = await confirmEmail({\n            customerEmail: params.get('email') as string,\n            customerConfirmationKey: params.get('key') as string,\n          });\n\n          if (!response) return null;\n\n          if (response?.errors?.length) {\n            setEmailConfirmationStatusMessage({\n              text: response?.errors[0].message,\n              status: 'error',\n            });\n          } else {\n            setEmailConfirmationStatusMessage({\n              text: response.data.confirmEmail.customer.email\n                ? translations.accountConfirmationEmailSuccessMessage.replace(\n                    '{email}',\n                    response?.data?.confirmEmail.customer?.email\n                  )\n                : translations.accountConfirmMessage,\n              status: 'success',\n            });\n\n            clearUrlAndReplace();\n          }\n        };\n\n        validateEmailStatus();\n      }\n    }\n  }, [enableEmailConfirmation, translations]);\n\n  return { emailConfirmationStatusMessage };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport { classes, Slot } from '@adobe-commerce/elsie/lib';\nimport { useSignInForm } from '@/auth/hooks/components/useSignInForm';\nimport { SignInFormProps } from '@/auth/types';\nimport { useEmailConfirmation } from '@/auth/hooks/useEmailConfirmation';\nimport { Form, Button, EmailConfirmationForm } from '@/auth/components';\nimport { useInLineAlert } from '@/auth/hooks/useInLineAlert';\nimport { Header, InLineAlert, InputPassword } from '@adobe-commerce/elsie/components';\nimport '@/auth/components/SignInForm/SignInForm.css';\nimport { useCustomTranslations } from '@/auth/hooks/useCustomTranslations';\n\nexport const SignInForm: FunctionComponent<SignInFormProps> = ({\n  slots,\n  labels,\n  formSize = 'default',\n  initialEmailValue = '',\n  renderSignUpLink = false,\n  enableEmailConfirmation = false,\n  hideCloseBtnOnEmailConfirmation = false,\n  routeRedirectOnEmailConfirmationClose,\n  routeRedirectOnSignIn,\n  routeForgotPassword,\n  routeSignUp,\n  onSuccessCallback,\n  setActiveComponent,\n  onErrorCallback,\n  onSignUpLinkClick,\n}) => {\n  /**\n   * useCustomTranslations is required to support extensibility of error messages.\n   * Ensure all error-related translation paths include \".default\"\n   * to allow future handling of dynamic or nested error messages.\n   */\n  const translations = useCustomTranslations({\n    title: 'Auth.SignInForm.title',\n    buttonPrimary: 'Auth.SignInForm.buttonPrimary',\n    buttonSecondary: 'Auth.SignInForm.buttonSecondary',\n    buttonTertiary: 'Auth.SignInForm.buttonTertiary',\n    resendEmailInformationText:\n      'Auth.Notification.resendEmailNotification.informationText',\n    resendEmailButtonText:\n      'Auth.Notification.resendEmailNotification.buttonText',\n    customerTokenErrorMessage: 'Auth.Api.customerTokenErrorMessage',\n    placeholder: 'Auth.InputPassword.placeholder',\n    floatingLabel: 'Auth.InputPassword.floatingLabel',\n    requiredFieldError: 'Auth.FormText.requiredFieldError.default',\n  });\n\n  const { emailConfirmationStatusMessage } = useEmailConfirmation({\n    enableEmailConfirmation,\n  });\n\n  const { inLineAlertProps, handleSetInLineAlertProps } = useInLineAlert();\n\n  const {\n    userEmail,\n    additionalActionsAlert,\n    defaultEnhancedEmailFields,\n    passwordError,\n    isSuccessful,\n    isLoading,\n    signInPasswordValue,\n    showEmailConfirmationForm,\n    submitLogInUser,\n    forgotPasswordCallback,\n    onSignUpLinkClickCallback,\n    handledOnPrimaryButtonClick,\n    handleSetPassword,\n    onBlurPassword,\n  } = useSignInForm({\n    translations,\n    emailConfirmationStatusMessage,\n    initialEmailValue,\n    routeSignUp,\n    routeForgotPassword,\n    routeRedirectOnSignIn,\n    setActiveComponent,\n    onErrorCallback,\n    onSuccessCallback,\n    onSignUpLinkClick,\n    handleSetInLineAlertProps,\n    routeRedirectOnEmailConfirmationClose,\n  });\n\n  if (isSuccessful.status && slots?.SuccessNotification) {\n    return (\n      <Slot\n        data-testid=\"successNotificationTestId\"\n        name=\"SuccessNotification\"\n        slot={slots?.SuccessNotification}\n        context={{ isSuccessful }}\n      />\n    );\n  }\n\n  if (showEmailConfirmationForm) {\n    return (\n      <EmailConfirmationForm\n        formSize={formSize}\n        userEmail={userEmail}\n        inLineAlertProps={inLineAlertProps}\n        hideCloseBtnOnEmailConfirmation={hideCloseBtnOnEmailConfirmation}\n        handleSetInLineAlertProps={handleSetInLineAlertProps}\n        onPrimaryButtonClick={handledOnPrimaryButtonClick}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={classes([\n        'auth-sign-in-form',\n        `auth-sign-in-form--${formSize}`,\n      ])}\n      data-testid=\"signInForm\"\n    >\n      <Header\n        title={labels?.formTitleText ?? translations.title}\n        divider={false}\n        className=\"auth-sign-in-form__title\"\n      />\n      {inLineAlertProps.text ? (\n        <InLineAlert\n          data-testid=\"authInLineAlert\"\n          className=\"auth-sign-in-form__notification\"\n          type={inLineAlertProps.type}\n          variant=\"secondary\"\n          heading={inLineAlertProps.text}\n          icon={inLineAlertProps.icon}\n          additionalActions={additionalActionsAlert}\n        />\n      ) : null}\n      <Form\n        name=\"signIn_form\"\n        className=\"auth-sign-in-form__form\"\n        onSubmit={submitLogInUser}\n        loading={isLoading}\n        fieldsConfig={defaultEnhancedEmailFields}\n      >\n        <InputPassword\n          hideStatusIndicator\n          className=\"auth-sign-in-form__form__password\"\n          autoComplete={'current-password'}\n          errorMessage={\n            passwordError ? translations.requiredFieldError : undefined\n          }\n          defaultValue={signInPasswordValue}\n          onValue={handleSetPassword}\n          onBlur={onBlurPassword}\n          placeholder={translations.placeholder}\n          floatingLabel={translations.floatingLabel}\n        />\n        <div className=\"auth-sign-in-form__form__buttons\">\n          <div className=\"auth-sign-in-form__form__buttons__combine\">\n            <Button\n              type=\"button\"\n              variant=\"tertiary\"\n              style={{ padding: 0 }}\n              buttonText={translations.buttonTertiary}\n              className=\"auth-sign-in-form__button auth-sign-in-form__button--forgot\"\n              enableLoader={false}\n              onClick={forgotPasswordCallback}\n              data-testid=\"switchToSignUp\"\n            />\n            {renderSignUpLink ? <span /> : null}\n            {renderSignUpLink ? (\n              <Button\n                type=\"button\"\n                variant=\"tertiary\"\n                style={{ padding: 0 }}\n                buttonText={translations.buttonSecondary}\n                className=\"auth-sign-in-form__button auth-sign-in-form__button--signup\"\n                enableLoader={false}\n                onClick={onSignUpLinkClickCallback}\n              />\n            ) : null}\n          </div>\n          <Button\n            type=\"submit\"\n            buttonText={labels?.primaryButtonText ?? translations.buttonPrimary}\n            variant=\"primary\"\n            className=\"auth-sign-in-form__button auth-sign-in-form__button--submit\"\n            enableLoader={isLoading}\n          />\n        </div>\n      </Form>\n      <div id=\"generateCustomerToken\" />\n    </div>\n  );\n};\n"],"names":["useSignInForm","emailConfirmationStatusMessage","translations","initialEmailValue","routeSignUp","routeForgotPassword","routeRedirectOnSignIn","onErrorCallback","setActiveComponent","onSuccessCallback","onSignUpLinkClick","handleSetInLineAlertProps","routeRedirectOnEmailConfirmationClose","userEmail","setUserEmail","useState","showEmailConfirmationForm","setShowEmailConfirmationForm","signInPasswordValue","setSignInPasswordValue","passwordError","setPasswordError","isSuccessful","setIsSuccessful","isLoading","setIsLoading","additionalActionsAlert","setAdditionalActionsAlert","actionsShowNotificationForm","useCallback","email","resendConfirmationEmail","handleSetPassword","value","useEffect","onBlurPassword","checkPasswordAndFocus","event","isValid","focusOnEmptyPasswordField","onAuthenticationSuccess","loginResponse","checkIsFunction","onAuthenticationFailed","_a","isIncludesMessage","errorMessage","submitLogInUser","formValues","getFormValues","password","getCustomerToken","forgotPasswordCallback","onSignUpLinkClickCallback","defaultEnhancedEmailFields","useMemo","fieldsList","simplifyTransformAttributesForm","DEFAULT__SIGN_IN_EMAIL_FIELD","el","handledOnPrimaryButtonClick","clearUrlAndReplace","url","token","useEmailConfirmation","enableEmailConfirmation","useText","setEmailConfirmationStatusMessage","search","params","response","confirmEmail","_c","_b","SignInForm","slots","labels","formSize","renderSignUpLink","hideCloseBtnOnEmailConfirmation","useCustomTranslations","inLineAlertProps","useInLineAlert","jsx","Slot","EmailConfirmationForm","jsxs","classes","Header","InLineAlert","Form","InputPassword","Button"],"mappings":"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"}