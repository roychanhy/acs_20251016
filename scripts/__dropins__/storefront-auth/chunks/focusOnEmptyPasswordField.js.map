{"version":3,"file":"focusOnEmptyPasswordField.js","sources":["/@dropins/storefront-auth/src/hooks/components/useEmailConfirmationForm.tsx","/@dropins/storefront-auth/src/components/EmailConfirmationForm/EmailConfirmationForm.tsx","/@dropins/storefront-auth/src/lib/focusOnEmptyPasswordField.ts"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { resendConfirmationEmail } from '@/auth/api';\nimport { useEmailConfirmationFormProps } from '@/auth/types';\nimport { useCallback, useState } from 'preact/hooks';\nimport { useText } from '@adobe-commerce/elsie/i18n';\n\nexport const useEmailConfirmationForm = ({\n  userEmail,\n  handleSetInLineAlertProps,\n}: useEmailConfirmationFormProps) => {\n  const translations = useText({\n    emailConfirmationMessage: 'Auth.Notification.emailConfirmationMessage',\n    technicalErrorSendEmail:\n      'Auth.Notification.technicalErrors.technicalErrorSendEmail',\n  });\n\n  const [disabledButton, setDisabledButton] = useState(false);\n\n  const handleEmailConfirmation = useCallback(async () => {\n    setDisabledButton(true);\n\n    if (userEmail) {\n      const response = await resendConfirmationEmail(userEmail);\n\n      if (response) {\n        const errors = response?.errors?.length;\n        const isEmailResend = response?.data?.resendConfirmationEmail;\n\n        if (errors) {\n          handleSetInLineAlertProps({\n            type: 'error',\n            text: translations.technicalErrorSendEmail,\n          });\n        } else {\n          handleSetInLineAlertProps({\n            type: isEmailResend ? 'success' : 'error',\n            text: translations.emailConfirmationMessage,\n          });\n        }\n      }\n    }\n\n    setDisabledButton(false);\n  }, [handleSetInLineAlertProps, translations, userEmail]);\n\n  return { handleEmailConfirmation, disabledButton };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { Button } from '@/auth/components';\nimport { classes } from '@adobe-commerce/elsie/lib';\nimport { FunctionComponent } from 'preact';\nimport { Header, InLineAlert } from '@adobe-commerce/elsie/components';\nimport { useEmailConfirmationForm } from '@/auth/hooks/components/useEmailConfirmationForm';\nimport { EmailConfirmationFormProps } from '@/auth/types';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport '@/auth/components/EmailConfirmationForm/EmailConfirmationForm.css';\n\nexport const EmailConfirmationForm: FunctionComponent<\n  EmailConfirmationFormProps\n> = ({\n  formSize,\n  userEmail,\n  inLineAlertProps,\n  hideCloseBtnOnEmailConfirmation,\n  handleSetInLineAlertProps,\n  onPrimaryButtonClick,\n}) => {\n  const translations = useText({\n    title: 'Auth.EmailConfirmationForm.title',\n    subtitle: 'Auth.EmailConfirmationForm.subtitle',\n    mainText: 'Auth.EmailConfirmationForm.mainText',\n    buttonPrimary: 'Auth.EmailConfirmationForm.buttonPrimary',\n    buttonSecondary: 'Auth.EmailConfirmationForm.buttonSecondary',\n  });\n\n  const { handleEmailConfirmation, disabledButton } = useEmailConfirmationForm({\n    userEmail,\n    handleSetInLineAlertProps,\n  });\n\n  return (\n    <div\n      className={classes([\n        'auth-email-confirmation-form',\n        `auth-email-confirmation-form--${formSize}`,\n      ])}\n    >\n      {inLineAlertProps.text ? (\n        <InLineAlert\n          className=\"auth-signInForm__notification\"\n          type={inLineAlertProps.type}\n          variant=\"secondary\"\n          heading={inLineAlertProps.text}\n          icon={inLineAlertProps.icon}\n          data-testid=\"authInLineAlert\"\n        />\n      ) : null}\n      <Header\n        title={translations.title}\n        divider={false}\n        className=\"auth-email-confirmation-form__title\"\n      />\n      {userEmail?.length ? (\n        <span className=\"auth-email-confirmation-form__subtitle\">{`${translations.subtitle} ${userEmail}`}</span>\n      ) : null}\n      <span className=\"auth-email-confirmation-form__text\">\n        {translations.mainText}\n      </span>\n      <div className=\"auth-email-confirmation-form__buttons\">\n        <Button\n          type=\"button\"\n          variant=\"tertiary\"\n          style={{ padding: 0 }}\n          buttonText={translations.buttonSecondary}\n          enableLoader={false}\n          onClick={handleEmailConfirmation}\n          disabled={disabledButton}\n        />\n        {hideCloseBtnOnEmailConfirmation ? null : (\n          <Button\n            type=\"submit\"\n            buttonText={translations.buttonPrimary}\n            variant=\"primary\"\n            enableLoader={false}\n            disabled={disabledButton}\n            onClick={onPrimaryButtonClick}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const focusOnEmptyPasswordField = (\n  event: Event,\n  signUpPasswordValue: string,\n  confirmPassword: string\n) => {\n  const emptyInputPassword = (event.target as HTMLFormElement).querySelector(\n    'input[name=\"password\"]'\n  );\n  const emptyInputConfirmPassword = (\n    event.target as HTMLFormElement\n  ).querySelector('input[name=\"confirmPasswordField\"]');\n\n  if (emptyInputPassword && !signUpPasswordValue.length) {\n    (emptyInputPassword as HTMLInputElement).focus();\n  } else if (emptyInputConfirmPassword && !confirmPassword.length) {\n    (emptyInputConfirmPassword as HTMLInputElement).focus();\n  }\n};\n"],"names":["useEmailConfirmationForm","userEmail","handleSetInLineAlertProps","translations","useText","disabledButton","setDisabledButton","useState","useCallback","response","resendConfirmationEmail","errors","_a","isEmailResend","_b","EmailConfirmationForm","formSize","inLineAlertProps","hideCloseBtnOnEmailConfirmation","onPrimaryButtonClick","handleEmailConfirmation","jsxs","classes","jsx","InLineAlert","Header","Button","focusOnEmptyPasswordField","event","signUpPasswordValue","confirmPassword","emptyInputPassword","emptyInputConfirmPassword"],"mappings":"seAsBO,MAAMA,EAA2B,CAAC,CACvC,UAAAC,EACA,0BAAAC,CACF,IAAqC,CACnC,MAAMC,EAAeC,EAAQ,CAC3B,yBAA0B,6CAC1B,wBACE,2DAAA,CACH,EAEK,CAACC,EAAgBC,CAAiB,EAAIC,EAAS,EAAK,EA6BnD,MAAA,CAAE,wBA3BuBC,EAAY,SAAY,SAGtD,GAFAF,EAAkB,EAAI,EAElBL,EAAW,CACP,MAAAQ,EAAW,MAAMC,EAAwBT,CAAS,EAExD,GAAIQ,EAAU,CACN,MAAAE,GAASC,EAAAH,GAAA,YAAAA,EAAU,SAAV,YAAAG,EAAkB,OAC3BC,GAAgBC,EAAAL,GAAA,YAAAA,EAAU,OAAV,YAAAK,EAAgB,wBAGVZ,EADxBS,EACwB,CACxB,KAAM,QACN,KAAMR,EAAa,uBAAA,EAGK,CACxB,KAAMU,EAAgB,UAAY,QAClC,KAAMV,EAAa,wBAAA,CAJpB,CAMH,CACF,CAGFG,EAAkB,EAAK,CACtB,EAAA,CAACJ,EAA2BC,EAAcF,CAAS,CAAC,EAErB,eAAAI,CAAe,CACnD,ECpCaU,EAET,CAAC,CACH,SAAAC,EACA,UAAAf,EACA,iBAAAgB,EACA,gCAAAC,EACA,0BAAAhB,EACA,qBAAAiB,CACF,IAAM,CACJ,MAAMhB,EAAeC,EAAQ,CAC3B,MAAO,mCACP,SAAU,sCACV,SAAU,sCACV,cAAe,2CACf,gBAAiB,4CAAA,CAClB,EAEK,CAAE,wBAAAgB,EAAyB,eAAAf,CAAe,EAAIL,EAAyB,CAC3E,UAAAC,EACA,0BAAAC,CAAA,CACD,EAGC,OAAAmB,EAAC,MAAA,CACC,UAAWC,EAAQ,CACjB,+BACA,iCAAiCN,CAAQ,EAAA,CAC1C,EAEA,SAAA,CAAAC,EAAiB,KAChBM,EAACC,EAAA,CACC,UAAU,gCACV,KAAMP,EAAiB,KACvB,QAAQ,YACR,QAASA,EAAiB,KAC1B,KAAMA,EAAiB,KACvB,cAAY,iBAAA,CAAA,EAEZ,KACJM,EAACE,EAAA,CACC,MAAOtB,EAAa,MACpB,QAAS,GACT,UAAU,qCAAA,CACZ,EACCF,GAAA,MAAAA,EAAW,OACTsB,EAAA,OAAA,CAAK,UAAU,yCAA0C,SAAG,GAAApB,EAAa,QAAQ,IAAIF,CAAS,EAAG,CAAA,EAChG,KACHsB,EAAA,OAAA,CAAK,UAAU,qCACb,WAAa,SAChB,EACAF,EAAC,MAAI,CAAA,UAAU,wCACb,SAAA,CAAAE,EAACG,EAAA,CACC,KAAK,SACL,QAAQ,WACR,MAAO,CAAE,QAAS,CAAE,EACpB,WAAYvB,EAAa,gBACzB,aAAc,GACd,QAASiB,EACT,SAAUf,CAAA,CACZ,EACCa,EAAkC,KACjCK,EAACG,EAAA,CACC,KAAK,SACL,WAAYvB,EAAa,cACzB,QAAQ,UACR,aAAc,GACd,SAAUE,EACV,QAASc,CAAA,CAAA,CACX,CAEJ,CAAA,CAAA,CAAA,CACF,CAEJ,ECnFaQ,EAA4B,CACvCC,EACAC,EACAC,IACG,CACG,MAAAC,EAAsBH,EAAM,OAA2B,cAC3D,wBACF,EACMI,EACJJ,EAAM,OACN,cAAc,oCAAoC,EAEhDG,GAAsB,CAACF,EAAoB,OAC5CE,EAAwC,MAAM,EACtCC,GAA6B,CAACF,EAAgB,QACtDE,EAA+C,MAAM,CAE1D"}