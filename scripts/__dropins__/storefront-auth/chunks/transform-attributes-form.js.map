{"version":3,"file":"transform-attributes-form.js","sources":["/@dropins/storefront-auth/src/lib/convertCase.ts","/@dropins/storefront-auth/src/data/transforms/transform-attributes-form.ts"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const convertToCamelCase = (key: string): string => {\n  return key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n};\n\nexport const convertToSnakeCase = (key: string): string => {\n  return key.replace(/([A-Z])/g, (letter) => `_${letter.toLowerCase()}`);\n};\n\nexport const convertKeysCase = (\n  data: any,\n  type: 'snakeCase' | 'camelCase',\n  dictionary?: Record<string, string>\n): any => {\n  const typeList = ['string', 'boolean', 'number'];\n  const callback =\n    type === 'camelCase' ? convertToCamelCase : convertToSnakeCase;\n\n  if (Array.isArray(data)) {\n    return data.map((element) => {\n      if (typeList.includes(typeof element) || element === null) return element;\n\n      if (typeof element === 'object') {\n        return convertKeysCase(element, type, dictionary);\n      }\n      return element;\n    });\n  }\n\n  if (data !== null && typeof data === 'object') {\n    return Object.entries(data).reduce((acc, [key, value]) => {\n      const newKey =\n        dictionary && dictionary[key] ? dictionary[key] : callback(key);\n      acc[newKey] =\n        typeList.includes(typeof value) || value === null\n          ? value\n          : convertKeysCase(value, type, dictionary);\n      return acc;\n    }, {} as Record<string, unknown>);\n  }\n\n  return data;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport {\n  GetAttributesFormResponse,\n  ResponseAttributesFormItemsProps,\n} from '@/auth/types';\nimport { AttributesFormModel } from '../models';\nimport { convertKeysCase, convertToCamelCase } from '@/auth/lib/convertCase';\n\nexport const cloneArrayIfExists = (\n  fields: ResponseAttributesFormItemsProps[]\n) => {\n  let multilineItems: any = [];\n\n  for (const element of fields) {\n    if (element.frontend_input !== 'MULTILINE' || element.multiline_count < 2) {\n      continue;\n    }\n\n    for (let i = 2; i <= element.multiline_count; i++) {\n      const newItem = {\n        ...element,\n        is_required: false,\n        name: `${element.code}_multiline_${i}`,\n        code: `${element.code}_multiline_${i}`,\n        id: `${element.code}_multiline_${i}`,\n      };\n\n      multilineItems.push(newItem);\n    }\n  }\n\n  return multilineItems;\n};\n\nexport const transformAttributesForm = (\n  response: GetAttributesFormResponse\n): AttributesFormModel[] => {\n  const items = response?.data?.attributesForm?.items || [];\n\n  if (!items.length) return [];\n\n  const fields = items\n    .filter((el) => !el.frontend_input?.includes('HIDDEN'))\n    ?.map(({ code, ...other }) => {\n      const isDefaultCode = code !== 'country_id' ? code : 'country_code';\n\n      return {\n        ...other,\n        name: isDefaultCode,\n        id: isDefaultCode,\n        code: isDefaultCode,\n      };\n    });\n\n  const multilineItems = cloneArrayIfExists(fields as any);\n\n  const attributesConfig = fields\n    .concat(multilineItems)\n    .map((item) => {\n      const customUpperCode =\n        item.code === 'firstname'\n          ? 'firstName'\n          : item.code === 'lastname'\n          ? 'lastName'\n          : convertToCamelCase(item.code);\n\n      const options = item.options?.map((el) => {\n        return {\n          isDefault: el.is_default,\n          text: el.label,\n          value: el.value,\n        };\n      });\n\n      return convertKeysCase(\n        { ...item, options, customUpperCode },\n        'camelCase',\n        {\n          frontend_input: 'fieldType',\n          frontend_class: 'className',\n          is_required: 'required',\n          sort_order: 'orderNumber',\n        }\n      );\n    })\n    .sort(\n      (a: AttributesFormModel, b: AttributesFormModel) =>\n        a.orderNumber - b.orderNumber\n    );\n\n  return attributesConfig;\n};\n"],"names":["convertToCamelCase","key","_","letter","convertToSnakeCase","convertKeysCase","data","type","dictionary","typeList","callback","element","acc","value","newKey","cloneArrayIfExists","fields","multilineItems","i","newItem","transformAttributesForm","response","_a","_b","_c","items","el","code","other","isDefaultCode","item","customUpperCode","options","a","b"],"mappings":"AAiBa,MAAAA,EAAsBC,GAC1BA,EAAI,QAAQ,YAAa,CAACC,EAAGC,IAAWA,EAAO,aAAa,EAGxDC,EAAsBH,GAC1BA,EAAI,QAAQ,WAAaE,GAAW,IAAIA,EAAO,YAAa,CAAA,EAAE,EAG1DE,EAAkB,CAC7BC,EACAC,EACAC,IACQ,CACR,MAAMC,EAAW,CAAC,SAAU,UAAW,QAAQ,EACzCC,EACJH,IAAS,YAAcP,EAAqBI,EAE1C,OAAA,MAAM,QAAQE,CAAI,EACbA,EAAK,IAAKK,GACXF,EAAS,SAAS,OAAOE,CAAO,GAAKA,IAAY,KAAaA,EAE9D,OAAOA,GAAY,SACdN,EAAgBM,EAASJ,EAAMC,CAAU,EAE3CG,CACR,EAGCL,IAAS,MAAQ,OAAOA,GAAS,SAC5B,OAAO,QAAQA,CAAI,EAAE,OAAO,CAACM,EAAK,CAACX,EAAKY,CAAK,IAAM,CAClD,MAAAC,EACJN,GAAcA,EAAWP,CAAG,EAAIO,EAAWP,CAAG,EAAIS,EAAST,CAAG,EAChE,OAAAW,EAAIE,CAAM,EACRL,EAAS,SAAS,OAAOI,CAAK,GAAKA,IAAU,KACzCA,EACAR,EAAgBQ,EAAON,EAAMC,CAAU,EACtCI,CACT,EAAG,EAA6B,EAG3BN,CACT,EClCaS,EACXC,GACG,CACH,IAAIC,EAAsB,CAAC,EAE3B,UAAWN,KAAWK,EACpB,GAAI,EAAAL,EAAQ,iBAAmB,aAAeA,EAAQ,gBAAkB,GAIxE,QAASO,EAAI,EAAGA,GAAKP,EAAQ,gBAAiBO,IAAK,CACjD,MAAMC,EAAU,CACd,GAAGR,EACH,YAAa,GACb,KAAM,GAAGA,EAAQ,IAAI,cAAcO,CAAC,GACpC,KAAM,GAAGP,EAAQ,IAAI,cAAcO,CAAC,GACpC,GAAI,GAAGP,EAAQ,IAAI,cAAcO,CAAC,EACpC,EAEAD,EAAe,KAAKE,CAAO,CAAA,CAIxB,OAAAF,CACT,EAEaG,EACXC,GAC0B,CDnCf,IAAAC,EAAAC,EAAAC,ECoCX,MAAMC,IAAQF,GAAAD,EAAAD,GAAA,YAAAA,EAAU,OAAV,YAAAC,EAAgB,iBAAhB,YAAAC,EAAgC,QAAS,CAAC,EAExD,GAAI,CAACE,EAAM,OAAQ,MAAO,CAAC,EAE3B,MAAMT,GAASQ,EAAAC,EACZ,OAAQC,GAAO,CDzCP,IAAAJ,ECyCO,SAACA,EAAAI,EAAG,iBAAH,MAAAJ,EAAmB,SAAS,WAAS,IADzC,YAAAE,EAEX,IAAI,CAAC,CAAE,KAAAG,EAAM,GAAGC,KAAY,CACtB,MAAAC,EAAgBF,IAAS,aAAeA,EAAO,eAE9C,MAAA,CACL,GAAGC,EACH,KAAMC,EACN,GAAIA,EACJ,KAAMA,CACR,CAAA,GAGEZ,EAAiBF,EAAmBC,CAAa,EAoChD,OAlCkBA,EACtB,OAAOC,CAAc,EACrB,IAAKa,GAAS,CDzDN,IAAAR,EC0DD,MAAAS,EACJD,EAAK,OAAS,YACV,YACAA,EAAK,OAAS,WACd,WACA9B,EAAmB8B,EAAK,IAAI,EAE5BE,GAAUV,EAAAQ,EAAK,UAAL,YAAAR,EAAc,IAAKI,IAC1B,CACL,UAAWA,EAAG,WACd,KAAMA,EAAG,MACT,MAAOA,EAAG,KACZ,IAGK,OAAArB,EACL,CAAE,GAAGyB,EAAM,QAAAE,EAAS,gBAAAD,CAAgB,EACpC,YACA,CACE,eAAgB,YAChB,eAAgB,YAChB,YAAa,WACb,WAAY,aAAA,CAEhB,CACD,CAAA,EACA,KACC,CAACE,EAAwBC,IACvBD,EAAE,YAAcC,EAAE,WACtB,CAGJ"}