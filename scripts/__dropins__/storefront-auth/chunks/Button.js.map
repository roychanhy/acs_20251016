{"version":3,"file":"Button.js","sources":["/@dropins/storefront-auth/src/types/validationErrors.types.ts","/@dropins/storefront-auth/src/hooks/useCustomTranslations.tsx","/@dropins/storefront-auth/src/lib/validationFields.ts","/@dropins/storefront-auth/src/lib/initializeFormDataAndErrors.ts","/@dropins/storefront-auth/src/configs/excludedFocusClasses.ts","/@dropins/storefront-auth/src/hooks/components/useForm.tsx","/@dropins/storefront-auth/src/data/models/attributes-form.ts","/@dropins/storefront-auth/src/lib/extractErrorKeyAndMessage.tsx","/@dropins/storefront-auth/src/components/Form/Elements/FieldElement.tsx","/@dropins/storefront-auth/src/components/Form/Elements/InputElement.tsx","/@dropins/storefront-auth/src/components/Form/Elements/SelectElement.tsx","/@dropins/storefront-auth/src/components/Form/Elements/InputDateElement.tsx","/@dropins/storefront-auth/src/components/Form/Elements/InputCheckBoxElement.tsx","/@dropins/storefront-auth/src/components/Form/Elements/TextAreaElement.tsx","/@dropins/storefront-auth/src/components/Form/Elements/FormSlot.tsx","/@dropins/storefront-auth/src/components/Form/Form.tsx"],"sourcesContent":["/**\n * Error types in this enum are used to provide custom i18n translations for specific validation errors.\n * Each key corresponds to an error type that maps to the `Auth.FormText` i18n values in `src/i18n/en_US.json`.\n */\nexport enum ValidationErrorTypes {\n  REQUIRED_FIELD_ERROR = 'requiredFieldError',\n  NUMERIC_ERROR = 'numericError',\n  ALPHA_NUM_WITH_SPACES_ERROR = 'alphaNumWithSpacesError',\n  ALPHA_NUMERIC_ERROR = 'alphaNumericError',\n  ALPHA_ERROR = 'alphaError',\n  EMAIL_ERROR = 'emailError',\n  DATE_ERROR = 'dateError',\n  DATE_RANGE_ERROR = 'dateRangeError',\n  DATE_MAX_ERROR = 'dateMaxError',\n  DATE_MIN_ERROR = 'dateMinError',\n  URL_ERROR = 'urlError',\n  LENGTH_TEXT_ERROR = 'lengthTextError',\n}\n\n/**\n * `ERROR_CONFIG_SEPARATOR` uses the ASCII 31 (Unit Separator) character,\n * a rarely used control character, to avoid conflicts with custom i18n error messages.\n *\n * Learn more: https://theasciicode.com.ar/ascii-control-characters/unit-separator-ascii-code-31.html\n */\nexport const ERROR_CONFIG_SEPARATOR = `${String.fromCharCode(\n  31\n)}/${String.fromCharCode(31)}`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { useText } from 'preact-i18n';\nimport { ValidationErrorTypes } from '@/auth/types';\n\n/**\n * A custom hook for handling translations with support for extensible error messages.\n *\n * @param defaultKeys - A mapping of keys to their translation paths.\n * @returns A complete set of translations, including dynamically updated values for null error keys.\n */\nexport const useCustomTranslations = (\n  defaultKeys: Record<string, string>\n): Record<string, string> => {\n  /**\n   * Step 1: Fetch initial translations using the provided keys\n   * Translations are fetched from the i18n system based on the provided defaultKeys.\n   */\n  const translations = useText(defaultKeys);\n\n  /**\n   * Step 2: Identify keys that require updates\n   * - These keys correspond to validation errors (defined in ValidationErrorTypes).\n   * - A key needs an update if:\n   *   1. Its value in the initial translations is `null`.\n   *   2. The key exists in ValidationErrorTypes (indicating itâ€™s a known error type).\n   *\n   * Null values typically occur when translations for the given error key are not overridden\n   * and instead rely on a plain structure, e.g., \"requiredFieldError\": \"This is a required field.\"\n   */\n  const keysToUpdate = Object.entries(translations)\n    .filter(\n      ([key, value]) =>\n        value === null &&\n        (Object.values(ValidationErrorTypes) as string[]).includes(key)\n    )\n    .map(([key]) => key);\n\n  /**\n   * Step 3: Prepare paths for fetching updated translations\n   * - For each key needing an update, create a path to its extended translation.\n   * - Example: For the key \"requiredFieldError\", the updated path would be \"Auth.FormText.requiredFieldError\".\n   */\n  const translationKeys = keysToUpdate.reduce((acc, key) => {\n    acc[key] = `Auth.FormText.${key}`; // Build the updated translation path\n    return acc;\n  }, {} as Record<string, string>);\n\n  // Step 4: Fetch updated translations for the keys identified in Step 2\n  const updatedTranslations = useText(translationKeys);\n\n  /**\n   * Step 5: Merge updated translations back into the initial translations\n   * - Replace `null` values with the fetched updated translations.\n   * - Preserve all other original translations.\n   */\n  return {\n    ...translations, // Include original translations\n    ...keysToUpdate.reduce<Record<string, string>>((acc, key) => {\n      acc[key] = updatedTranslations[key]; // Overwrite `null` values with updated translations\n      return acc;\n    }, {}),\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { ValidationErrorTypes, ERROR_CONFIG_SEPARATOR } from '@/auth/types';\n\n/* eslint-disable no-useless-escape */\ntype ValidationConfig = Record<string, string>;\ntype TranslationList = Record<string, string>;\ntype ErrorsList = Record<string, string>;\nexport type ValidationFieldsConfig = {\n  validateRules: Record<string, string>[];\n  code?: string;\n  customUpperCode: string;\n  required: boolean;\n};\n\nenum ConfigEnumLength {\n  MIN_TEXT_LENGTH = 'MIN_TEXT_LENGTH',\n  MAX_TEXT_LENGTH = 'MAX_TEXT_LENGTH',\n  DATE_RANGE_MIN = 'DATE_RANGE_MIN',\n  DATE_RANGE_MAX = 'DATE_RANGE_MAX',\n}\n\nexport enum InputValidation {\n  Numeric = 'numeric',\n  AlphanumWithSpaces = 'alphanum-with-spaces',\n  Alphanumeric = 'alphanumeric',\n  Alpha = 'alpha',\n  Email = 'email',\n  Length = 'length',\n  Date = 'date',\n  Url = 'url',\n}\n\nconst flattenObjectsArray = (arr: ValidationConfig[]): ValidationConfig => {\n  return arr.reduce((acc, obj) => {\n    return { ...acc, [obj.name]: obj.value };\n  }, {});\n};\n\n//The basic material for the functions responsible for validation was taken from https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/lib/validation/rules.js\nexport const validateNumeric = (value: string): boolean => /^\\d+$/.test(value);\n\nexport const validateAlphanumWithSpaces = (value: string): boolean =>\n  /^[a-zA-Z0-9\\s]+$/.test(value);\n\nexport const validateAlphanumeric = (value: string): boolean =>\n  /^[a-zA-Z0-9]+$/.test(value);\n\nexport const validateAlpha = (value: string): boolean =>\n  /^[a-zA-Z]+$/.test(value);\n\nexport const validateEmail = (value: string): boolean =>\n  /^[a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]+(\\.[a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]+)*@([a-z0-9-]+\\.)+[a-z]{2,}$/i.test(\n    value\n  );\n\nexport const validateDate = (value: string): boolean =>\n  /^\\d{4}-\\d{2}-\\d{2}$/.test(value) && !isNaN(Date.parse(value));\n\nexport const isDateWithinRange = (\n  date: string,\n  minTimestamp?: number,\n  maxTimestamp?: number\n): boolean => {\n  const dateTimestamp = new Date(date).getTime() / 1000;\n\n  if (isNaN(dateTimestamp) || dateTimestamp < 0) {\n    return false;\n  }\n\n  if (typeof minTimestamp !== 'undefined' && dateTimestamp < minTimestamp) {\n    return false;\n  }\n\n  if (typeof maxTimestamp !== 'undefined' && dateTimestamp > maxTimestamp) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const convertTimestampToDate = (\n  timestamp: string | undefined | null\n): string => {\n  if (!timestamp || timestamp.trim() === '') return '';\n\n  const parsedTimestamp = parseInt(timestamp, 10);\n\n  if (!isNaN(parsedTimestamp)) {\n    const date = new Date(parsedTimestamp * 1000);\n\n    if (isNaN(date.getTime())) return '';\n\n    return date.toISOString().split('T')[0];\n  }\n\n  const isoDate = new Date(timestamp);\n\n  if (isNaN(isoDate.getTime())) return '';\n\n  const month = parseInt(timestamp.split('-')[1], 10);\n\n  if (month > 12 || month < 1) return '';\n\n  return isoDate.toISOString().split('T')[0];\n};\n\nexport const validateUrl = (url: string) => {\n  const urlPattern =\n    /^(https?|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i;\n  return urlPattern.test(url);\n};\n\nexport const validateLength = (\n  value: string,\n  minLength: number,\n  maxLength: number\n): boolean => {\n  const length = value.length;\n  return length >= minLength && length <= maxLength;\n};\n\nexport const validationFields = (\n  value: string,\n  configs: ValidationFieldsConfig,\n  translations: TranslationList,\n  errorsList: ErrorsList\n) => {\n  const {\n    requiredFieldError,\n    lengthTextError,\n    numericError,\n    alphaNumWithSpacesError,\n    alphaNumericError,\n    alphaError,\n    emailError,\n    dateError,\n    urlError,\n    dateRangeError,\n    dateMaxError,\n    dateMinError,\n  } = translations;\n\n  const fieldName = configs?.customUpperCode as string;\n\n  const defaultFields = { [fieldName]: '' };\n\n  if (errorsList[fieldName]) {\n    delete errorsList[fieldName];\n  }\n\n  if (configs?.required && (!value || value === 'false')) {\n    return {\n      [fieldName]: `${ValidationErrorTypes.REQUIRED_FIELD_ERROR}${ERROR_CONFIG_SEPARATOR}${requiredFieldError}`,\n    };\n  }\n\n  if (!configs?.required && !value) {\n    return defaultFields;\n  }\n\n  if (!configs?.validateRules?.length) return defaultFields;\n\n  const validateRulesConfig = flattenObjectsArray(configs?.validateRules);\n\n  const min = validateRulesConfig[ConfigEnumLength.MIN_TEXT_LENGTH] ?? 1;\n  const max = validateRulesConfig[ConfigEnumLength.MAX_TEXT_LENGTH] ?? 255;\n  const dateMin = validateRulesConfig[ConfigEnumLength.DATE_RANGE_MIN];\n  const dateMax = validateRulesConfig[ConfigEnumLength.DATE_RANGE_MAX];\n\n  if (!validateLength(value, +min, +max) && !(dateMin || dateMax)) {\n    const parsedErrorMessage = lengthTextError\n      .replace('{min}', min)\n      .replace('{max}', max);\n\n    return {\n      [fieldName]: `${ValidationErrorTypes.LENGTH_TEXT_ERROR}${ERROR_CONFIG_SEPARATOR}${parsedErrorMessage}`,\n    };\n  }\n\n  if (!isDateWithinRange(value, +dateMin, +dateMax) && (dateMin || dateMax)) {\n    if (dateMin && dateMin) {\n      const parsedErrorMessage = dateRangeError\n        .replace('{min}', convertTimestampToDate(dateMin))\n        .replace('{max}', convertTimestampToDate(dateMax));\n\n      return {\n        [fieldName]: `${ValidationErrorTypes.DATE_RANGE_ERROR}${ERROR_CONFIG_SEPARATOR}${parsedErrorMessage}`,\n      };\n    }\n\n    if (typeof dateMin === 'undefined' && typeof dateMax !== 'undefined') {\n      const parsedErrorMessage = dateMaxError.replace(\n        '{max}',\n        convertTimestampToDate(dateMax)\n      );\n\n      return {\n        [fieldName]: `${ValidationErrorTypes.DATE_MAX_ERROR}${ERROR_CONFIG_SEPARATOR}${parsedErrorMessage}`,\n      };\n    }\n\n    if (typeof dateMax === 'undefined' && typeof dateMin !== 'undefined') {\n      const parsedErrorMessage = dateMinError.replace(\n        '{min}',\n        convertTimestampToDate(dateMin)\n      );\n\n      return {\n        [fieldName]: `${ValidationErrorTypes.DATE_MIN_ERROR}${ERROR_CONFIG_SEPARATOR}${parsedErrorMessage}`,\n      };\n    }\n  }\n\n  const validationMap = {\n    [InputValidation.Numeric]: {\n      validate: validateNumeric,\n      error: `${ValidationErrorTypes.NUMERIC_ERROR}${ERROR_CONFIG_SEPARATOR}${numericError}`,\n    },\n    [InputValidation.AlphanumWithSpaces]: {\n      validate: validateAlphanumWithSpaces,\n      error: `${ValidationErrorTypes.ALPHA_NUM_WITH_SPACES_ERROR}${ERROR_CONFIG_SEPARATOR}${alphaNumWithSpacesError}`,\n    },\n    [InputValidation.Alphanumeric]: {\n      validate: validateAlphanumeric,\n      error: `${ValidationErrorTypes.ALPHA_NUMERIC_ERROR}${ERROR_CONFIG_SEPARATOR}${alphaNumericError}`,\n    },\n    [InputValidation.Alpha]: {\n      validate: validateAlpha,\n      error: `${ValidationErrorTypes.ALPHA_ERROR}${ERROR_CONFIG_SEPARATOR}${alphaError}`,\n    },\n    [InputValidation.Email]: {\n      validate: validateEmail,\n      error: `${ValidationErrorTypes.EMAIL_ERROR}${ERROR_CONFIG_SEPARATOR}${emailError}`,\n    },\n    [InputValidation.Date]: {\n      validate: validateDate,\n      error: `${ValidationErrorTypes.DATE_ERROR}${ERROR_CONFIG_SEPARATOR}${dateError}`,\n    },\n    [InputValidation.Url]: {\n      validate: validateUrl,\n      error: `${ValidationErrorTypes.URL_ERROR}${ERROR_CONFIG_SEPARATOR}${urlError}`,\n    },\n  };\n\n  const validation =\n    validationMap[\n      validateRulesConfig['INPUT_VALIDATION'] as keyof typeof validationMap\n    ];\n\n  if (\n    validation &&\n    !validation.validate(value) &&\n    !errorsList[fieldName]?.length\n  ) {\n    return { [fieldName]: validation.error };\n  }\n\n  return defaultFields;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport default (\n  fieldsConfig: Array<{\n    customUpperCode?: string;\n    required?: boolean;\n    defaultValue?: unknown;\n  }>\n): {\n  initialData: Record<string, unknown>;\n  errorList: Record<string, string>;\n} => {\n  return fieldsConfig.reduce(\n    (\n      acc: {\n        initialData: Record<string, unknown>;\n        errorList: Record<string, string>;\n      },\n      { customUpperCode, required, defaultValue }\n    ) => {\n      if (required && customUpperCode) {\n        acc.initialData[customUpperCode] = defaultValue || '';\n        acc.errorList[customUpperCode] = '';\n      }\n\n      return acc;\n    },\n    {\n      initialData: {},\n      errorList: {},\n    }\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\n/**\n * This file defines an array of class names that should be excluded\n * from specific init Recaptcha logic.\n *\n * The array contains class names representing elements that should be\n * ignored when certain operations, such as focusing or applying event\n * handlers, are executed.\n *\n * By checking if an element's class matches any class in this array,\n * you can easily bypass unwanted logic for those elements, ensuring\n * precise and predictable behavior in your application.\n *\n */\n\nexport const excludedFocusClasses = [\n  'auth-reset-password-form__buttons--signin',\n  'auth-sign-up-form-buttons--signin',\n  'auth-sign-in-form__button--forgot',\n  'auth-sign-in-form__button--signup',\n];\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { useCallback, useRef, useState, useEffect } from 'preact/hooks';\nimport { FieldsProps, useFormProps } from '@/auth/types';\nimport { initReCaptcha } from '@adobe-commerce/recaptcha';\nimport initializeFormDataAndErrors from '@/auth/lib/initializeFormDataAndErrors';\nimport {\n  validationFields,\n  ValidationFieldsConfig,\n} from '@/auth/lib/validationFields';\nimport { excludedFocusClasses } from '@/auth/configs/excludedFocusClasses';\nimport { useCustomTranslations } from '@/auth/hooks/useCustomTranslations';\n\nexport const useForm = ({ fieldsConfig, onSubmit }: useFormProps) => {\n  /**\n   * useCustomTranslations is required to support extensibility of error messages.\n   * Ensure all error-related translation paths include \".default\"\n   * to allow future handling of dynamic or nested error messages.\n   */\n  const translations = useCustomTranslations({\n    requiredFieldError: 'Auth.FormText.requiredFieldError.default',\n    lengthTextError: 'Auth.FormText.lengthTextError.default',\n    numericError: 'Auth.FormText.numericError.default',\n    alphaNumWithSpacesError: 'Account.FormText.alphaNumWithSpacesError.default',\n    alphaNumericError: 'Auth.FormText.alphaNumericError.default',\n    alphaError: 'Auth.FormText.alphaError.default',\n    emailError: 'Auth.FormText.emailError.default',\n    dateError: 'Auth.FormText.dateError.default',\n    dateRangeError: 'Auth.FormText.dateRangeError.default',\n    dateMaxError: 'Auth.FormText.dateMaxError.default',\n    dateMinError: 'Auth.FormText.dateMinError.default',\n    urlError: 'Auth.FormText.urlError.default',\n  });\n\n  const formRef = useRef<HTMLFormElement>(null);\n  const focusExecutedRef = useRef<boolean>(false);\n  const [formData, setFormData] = useState<\n    Record<string, string | boolean | number>\n  >({});\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const handleValidationSubmit = useCallback(() => {\n    let formValid = true;\n    const errorsList = { ...errors };\n    let firstErrorField: string | null = null;\n\n    for (const [name, value] of Object.entries(formData)) {\n      const fieldConfig = fieldsConfig?.find((config: FieldsProps) =>\n        config?.customUpperCode?.includes(name)\n      );\n\n      const validationResult = validationFields(\n        value.toString(),\n        fieldConfig as ValidationFieldsConfig,\n        translations,\n        errorsList\n      );\n\n      if (validationResult[name]) {\n        Object.assign(errorsList, validationResult);\n        formValid = false;\n      }\n\n      if (!firstErrorField) {\n        firstErrorField =\n          Object.keys(errorsList).find((key) => errorsList[key]) ?? null;\n      }\n    }\n\n    setErrors(errorsList);\n\n    if (firstErrorField && formRef.current) {\n      const input = formRef.current.elements.namedItem(\n        firstErrorField\n      ) as HTMLElement;\n      input?.focus();\n    }\n\n    return formValid;\n  }, [errors, fieldsConfig, formData, translations]);\n\n  useEffect(() => {\n    if (fieldsConfig?.length) {\n      const { initialData, errorList } =\n        initializeFormDataAndErrors(fieldsConfig);\n\n      setFormData((prev) => ({\n        ...(initialData as Record<string, string | number>),\n        ...prev,\n      }));\n\n      setErrors(errorList);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(fieldsConfig)]);\n\n  const handleFocus = useCallback(async (event: FocusEvent) => {\n    const target = event.target as HTMLInputElement;\n    const isFocusable = !excludedFocusClasses.some((className) =>\n      target.classList.contains(className)\n    );\n\n    if (!focusExecutedRef.current && isFocusable) {\n      await initReCaptcha(0);\n      focusExecutedRef.current = true;\n    }\n  }, []);\n\n  const handleChange = useCallback(\n    (event: Event) => {\n      const { name, value, type, checked } = event?.target as HTMLInputElement;\n      const fieldValue = type === 'checkbox' ? checked : value;\n\n      setFormData((prev) => {\n        const updatedFormData = {\n          ...prev,\n          [name]: fieldValue,\n        };\n\n        return updatedFormData as Record<string, string | number>;\n      });\n\n      const fieldConfig = fieldsConfig?.find((config: FieldsProps) =>\n        config?.customUpperCode?.includes(name)\n      );\n\n      let errorsList = { ...errors };\n\n      if (fieldConfig) {\n        const validationResult = validationFields(\n          fieldValue.toString(),\n          fieldConfig as ValidationFieldsConfig,\n          translations,\n          errorsList\n        );\n\n        if (validationResult) {\n          Object.assign(errorsList, validationResult);\n        }\n\n        setErrors(errorsList);\n      }\n    },\n    [fieldsConfig, errors, translations]\n  );\n\n  const handleBlur = useCallback(\n    (event: Event) => {\n      const { name, value, type, checked } = event?.target as HTMLInputElement;\n      const fieldValue = type === 'checkbox' ? checked : value;\n\n      const fieldConfig = fieldsConfig?.find(\n        (config: FieldsProps) => config.customUpperCode === name\n      );\n\n      if (fieldConfig) {\n        const errorsList = { ...errors };\n\n        const validationResult = validationFields(\n          fieldValue.toString(),\n          fieldConfig as ValidationFieldsConfig,\n          translations,\n          errorsList\n        );\n\n        if (validationResult) {\n          Object.assign(errorsList, validationResult);\n        }\n\n        setErrors(errorsList);\n      }\n    },\n    [errors, fieldsConfig, translations]\n  );\n\n  const handleSubmit = useCallback(\n    (event: SubmitEvent) => {\n      event.preventDefault();\n\n      const formValid = handleValidationSubmit();\n\n      onSubmit?.(event, formValid);\n    },\n    [handleValidationSubmit, onSubmit]\n  );\n\n  return {\n    formData,\n    errors,\n    formRef,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleFocus,\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport enum FieldEnumList {\n  BOOLEAN = 'BOOLEAN',\n  DATE = 'DATE',\n  DATETIME = 'DATETIME',\n  DROPDOWN = 'DROPDOWN',\n  FILE = 'FILE',\n  GALLERY = 'GALLERY',\n  HIDDEN = 'HIDDEN',\n  IMAGE = 'IMAGE',\n  MEDIA_IMAGE = 'MEDIA_IMAGE',\n  MULTILINE = 'MULTILINE',\n  MULTISELECT = 'MULTISELECT',\n  PRICE = 'PRICE',\n  SELECT = 'SELECT',\n  TEXT = 'TEXT',\n  TEXTAREA = 'TEXTAREA',\n  UNDEFINED = 'UNDEFINED',\n  VISUAL = 'VISUAL',\n  WEIGHT = 'WEIGHT',\n  EMPTY = '',\n}\n\nexport interface AttributesFormItemsProps {\n  code?: string;\n  name?: string;\n  id?: string;\n  defaultValue?: string | boolean | number;\n  entityType?: string;\n  className?: string;\n  fieldType?: FieldEnumList;\n  multilineCount: number;\n  required?: boolean;\n  unique?: boolean;\n  label?: string;\n  orderNumber: number;\n  options?: { is_default: boolean; label: string; value: string }[];\n  hidden?: boolean;\n  customUpperCode: string;\n}\n\nexport interface AttributesFormModel extends AttributesFormItemsProps {}\n","import { ERROR_CONFIG_SEPARATOR } from '@/auth/types';\n\ntype ExtractErrorKeyAndMessage = {\n  errorKey: string;\n  defaultErrorMessage: string;\n};\n\nexport const extractErrorKeyAndMessage = (\n  errorConfig: string\n): ExtractErrorKeyAndMessage => {\n  const fallbackData = { errorKey: '', defaultErrorMessage: '' };\n\n  if (!errorConfig) return fallbackData;\n\n  const index = errorConfig.indexOf(ERROR_CONFIG_SEPARATOR);\n\n  if (index === -1) return fallbackData;\n\n  return {\n    errorKey: errorConfig.substring(0, index).trim(),\n    defaultErrorMessage: errorConfig\n      .substring(index + ERROR_CONFIG_SEPARATOR.length)\n      .trim(),\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FieldElementProps } from '@/auth/types';\nimport { Field } from '@adobe-commerce/elsie/components';\nimport { useText } from '@adobe-commerce/elsie/i18n';\nimport { classes } from '@adobe-commerce/elsie/lib';\nimport { memo } from 'preact/compat';\nimport { extractErrorKeyAndMessage } from '@/auth/lib/extractErrorKeyAndMessage';\nimport { VNode } from 'preact';\n\nexport const FieldElement = memo(\n  ({\n    item,\n    errorConfig,\n    className,\n    itemClassName,\n    loading,\n    children,\n  }: FieldElementProps) => {\n    const { errorKey, defaultErrorMessage } =\n      extractErrorKeyAndMessage(errorConfig);\n    const customErrorMessage = useText(\n      `Auth.FormText.${errorKey}.${item.code}`\n    )[item.code];\n\n    let errorMessage = '';\n\n    // This check indicates that validation identified an error\n    if (defaultErrorMessage.length) {\n      errorMessage = customErrorMessage || defaultErrorMessage;\n    }\n\n    return (\n      <Field\n        key={item.id}\n        error={errorMessage}\n        className={classes([\n          itemClassName,\n          `${itemClassName}--${item.id}`,\n          [`${itemClassName}--${item.id}-hidden`, item.isHidden],\n          item.className,\n        ])}\n        data-testid={`${className}--${item.id}`}\n        disabled={loading || item.disabled}\n      >\n        {children as VNode<{}>}\n      </Field>\n    );\n  }\n);\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FormElementProps } from '@/auth/types';\nimport { Input } from '@adobe-commerce/elsie/components';\nimport { memo } from 'preact/compat';\nimport { FieldElement } from './FieldElement';\n\nexport const InputElement = memo(\n  ({\n    item,\n    valueMessage,\n    errorConfig,\n    onBlur,\n    onChange,\n    onFocus,\n    className,\n    itemClassName,\n    loading,\n  }: FormElementProps) => {\n    return (\n      <FieldElement\n        item={item}\n        errorConfig={errorConfig}\n        className={className}\n        itemClassName={itemClassName}\n        loading={loading}\n      >\n        <Input\n          type=\"text\"\n          name={item.customUpperCode}\n          value={valueMessage ?? item.defaultValue}\n          placeholder={item.label}\n          floatingLabel={`${item.label} ${item.required ? '*' : ''}`}\n          autocomplete={item.autocomplete}\n          onBlur={onBlur}\n          onChange={onChange}\n          onFocus={onFocus}\n        />\n      </FieldElement>\n    );\n  }\n);\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FormElementProps } from '@/auth/types';\nimport { Picker } from '@adobe-commerce/elsie/components';\nimport { memo } from 'preact/compat';\nimport { FieldElement } from './FieldElement';\n\nexport const SelectElement = memo(\n  ({\n    item,\n    valueMessage,\n    errorConfig,\n    onBlur,\n    onChange,\n    className,\n    itemClassName,\n    loading,\n  }: FormElementProps) => {\n    const defaultSelectValue = item.options.find(\n      (option: { isDefault: boolean; value: string; text: string }) =>\n        option.isDefault\n    )?.value;\n\n    return (\n      <FieldElement\n        item={item}\n        errorConfig={errorConfig}\n        className={className}\n        itemClassName={itemClassName}\n        loading={loading}\n      >\n        <Picker\n          name={item.customUpperCode}\n          floatingLabel={`${item.label} ${item.required ? '*' : ''}`}\n          placeholder={item.label}\n          aria-label={item.label}\n          options={item.options}\n          onBlur={onBlur}\n          handleSelect={onChange}\n          defaultValue={defaultSelectValue ?? valueMessage ?? item.defaultValue}\n          value={defaultSelectValue ?? valueMessage ?? item.defaultValue}\n        />\n      </FieldElement>\n    );\n  }\n);\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FormElementProps } from '@/auth/types';\nimport { InputDate } from '@adobe-commerce/elsie/components';\nimport { memo } from 'preact/compat';\nimport { FieldElement } from './FieldElement';\n\nexport const InputDateElement = memo(\n  ({\n    item,\n    valueMessage,\n    errorConfig,\n    onBlur,\n    onChange,\n    className,\n    itemClassName,\n    loading,\n  }: FormElementProps) => {\n    return (\n      <FieldElement\n        item={item}\n        errorConfig={errorConfig}\n        className={className}\n        itemClassName={itemClassName}\n        loading={loading}\n      >\n        <InputDate\n          // @ts-ignore\n          type=\"text\"\n          name={item.customUpperCode}\n          value={valueMessage || item.defaultValue}\n          placeholder={item.label}\n          floatingLabel={`${item.label} ${item.required ? '*' : ''}`}\n          onBlur={onBlur}\n          onChange={onChange}\n          disabled={loading || item.disabled}\n        />\n      </FieldElement>\n    );\n  }\n);\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FormElementProps } from '@/auth/types';\nimport { Checkbox } from '@adobe-commerce/elsie/components';\nimport { memo } from 'preact/compat';\nimport { FieldElement } from './FieldElement';\n\nexport const InputCheckBoxElement = memo(\n  ({\n    item,\n    valueMessage,\n    errorConfig,\n    onBlur,\n    onChange,\n    className,\n    itemClassName,\n    loading,\n  }: FormElementProps) => {\n    return (\n      <FieldElement\n        item={item}\n        errorConfig={errorConfig}\n        className={className}\n        itemClassName={itemClassName}\n        loading={loading}\n      >\n        <Checkbox\n          name={item.customUpperCode}\n          checked={valueMessage || item.defaultValue}\n          placeholder={item.label}\n          label={`${item.label} ${item.required ? '*' : ''}`}\n          onBlur={onBlur}\n          onChange={onChange}\n        />\n      </FieldElement>\n    );\n  }\n);\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FormElementProps } from '@/auth/types';\nimport { TextArea } from '@adobe-commerce/elsie/components';\nimport { memo } from 'preact/compat';\nimport { FieldElement } from './FieldElement';\n\nexport const TextAreaElement = memo(\n  ({\n    item,\n    valueMessage,\n    errorConfig,\n    onBlur,\n    onChange,\n    className,\n    itemClassName,\n    loading,\n  }: FormElementProps) => {\n    return (\n      <FieldElement\n        item={item}\n        errorConfig={errorConfig}\n        className={className}\n        itemClassName={itemClassName}\n        loading={loading}\n      >\n        <TextArea\n          name={item.customUpperCode}\n          value={valueMessage ?? item.defaultValue}\n          label={`${item.label} ${item.required ? '*' : ''}`}\n          onBlur={onBlur}\n          onChange={onChange}\n        />\n      </FieldElement>\n    );\n  }\n);\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { extractErrorKeyAndMessage } from '@/auth/lib/extractErrorKeyAndMessage';\nimport { FormSlotProps } from '@/auth/types';\nimport { useText } from 'preact-i18n';\nimport { Slot } from '@adobe-commerce/elsie/lib';\n\nexport const FormSlot = ({\n  slots,\n  item,\n  handleOnChange,\n  handleOnBlur,\n  handleOnFocus,\n  errorConfig,\n  errors,\n}: FormSlotProps) => {\n  const { errorKey, defaultErrorMessage } =\n    extractErrorKeyAndMessage(errorConfig);\n  const customErrorMessage = useText(`Auth.FormText.${errorKey}.${item.code}`)[\n    item.code\n  ];\n\n  let errorMessage = '';\n\n  // This check indicates that validation identified an error\n  if (defaultErrorMessage.length) {\n    errorMessage = customErrorMessage || defaultErrorMessage;\n  }\n\n  const contextValue = {\n    inputName: item.customUpperCode,\n    handleOnChange,\n    handleOnBlur,\n    handleOnFocus,\n    errorMessage,\n    errors,\n    config: item,\n  };\n\n  return (\n    <Slot\n      data-testid={`signUpFormInput_${item.code}`}\n      name={`SignUpFormInput_${item.code}`}\n      slot={slots?.[`SignUpFormInput_${item.code}`]}\n      context={contextValue}\n      key={item.id}\n    />\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FieldsProps, FormProps } from '@/auth/types';\nimport { useForm } from '@/auth/hooks/components/useForm';\nimport { FieldEnumList } from '@/auth/data/models';\nimport {\n  SelectElement,\n  InputElement,\n  InputDateElement,\n  InputCheckBoxElement,\n  TextAreaElement,\n  FormSlot,\n} from './Elements';\nimport { memo } from 'preact/compat';\n\nexport const Form = memo(\n  ({\n    slots,\n    name,\n    loading,\n    children,\n    className = 'defaultForm',\n    fieldsConfig = [],\n    onSubmit,\n    ...props\n  }: FormProps) => {\n    const {\n      formData,\n      errors,\n      formRef,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      handleFocus,\n    } = useForm({\n      onSubmit,\n      fieldsConfig,\n    });\n\n    const itemClassName = `${className}__field`;\n\n    return (\n      <form\n        className={className}\n        onSubmit={handleSubmit}\n        name={name}\n        ref={formRef}\n        onFocus={handleFocus}\n        {...props}\n      >\n        {fieldsConfig.map((item: FieldsProps) => {\n          const errorConfig = errors?.[item.customUpperCode];\n          const valueMessage = formData?.[item.customUpperCode] as string;\n          const isSlot = !!slots?.[`SignUpFormInput_${item.code}`];\n\n          const renderSlot = (\n            <FormSlot\n              slots={slots}\n              item={item}\n              handleOnChange={handleChange}\n              handleOnBlur={handleBlur}\n              handleOnFocus={handleFocus}\n              errorConfig={errorConfig}\n              errors={errors}\n            />\n          );\n\n          switch (item.fieldType) {\n            case FieldEnumList.TEXT: {\n              if (isSlot) return renderSlot;\n\n              if (item.options.length) {\n                return (\n                  <SelectElement\n                    item={item}\n                    valueMessage={valueMessage}\n                    errorConfig={errorConfig}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    onFocus={handleFocus}\n                    itemClassName={itemClassName}\n                    className={className}\n                    loading={loading}\n                  />\n                );\n              }\n\n              return (\n                <InputElement\n                  item={item}\n                  valueMessage={valueMessage}\n                  errorConfig={errorConfig}\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  onFocus={handleFocus}\n                  itemClassName={itemClassName}\n                  className={className}\n                  loading={loading}\n                />\n              );\n            }\n\n            case FieldEnumList.MULTILINE: {\n              if (isSlot) return renderSlot;\n\n              return (\n                <InputElement\n                  item={item}\n                  valueMessage={valueMessage}\n                  errorConfig={errorConfig}\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  onFocus={handleFocus}\n                  itemClassName={itemClassName}\n                  className={className}\n                  loading={loading}\n                />\n              );\n            }\n\n            case FieldEnumList.SELECT: {\n              if (isSlot) return renderSlot;\n\n              return (\n                <SelectElement\n                  item={item}\n                  valueMessage={valueMessage}\n                  errorConfig={errorConfig}\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  itemClassName={itemClassName}\n                  className={className}\n                  loading={loading}\n                />\n              );\n            }\n\n            case FieldEnumList.DATE: {\n              if (isSlot) return renderSlot;\n\n              return (\n                <InputDateElement\n                  item={item}\n                  valueMessage={valueMessage}\n                  errorConfig={errorConfig}\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  itemClassName={itemClassName}\n                  className={className}\n                  loading={loading}\n                />\n              );\n            }\n\n            case FieldEnumList.BOOLEAN: {\n              if (isSlot) return renderSlot;\n\n              return (\n                <InputCheckBoxElement\n                  item={item}\n                  valueMessage={valueMessage}\n                  errorConfig={errorConfig}\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  itemClassName={itemClassName}\n                  className={className}\n                  loading={loading}\n                />\n              );\n            }\n\n            case FieldEnumList.TEXTAREA: {\n              if (isSlot) return renderSlot;\n\n              return (\n                <TextAreaElement\n                  item={item}\n                  valueMessage={valueMessage}\n                  errorConfig={errorConfig}\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  itemClassName={itemClassName}\n                  className={className}\n                  loading={loading}\n                />\n              );\n            }\n\n            default:\n              return null;\n          }\n        })}\n\n        {children}\n      </form>\n    );\n  }\n);\n"],"names":["ValidationErrorTypes","ERROR_CONFIG_SEPARATOR","useCustomTranslations","defaultKeys","translations","useText","keysToUpdate","key","value","translationKeys","acc","updatedTranslations","flattenObjectsArray","arr","obj","validateNumeric","validateAlphanumWithSpaces","validateAlphanumeric","validateAlpha","validateEmail","validateDate","isDateWithinRange","date","minTimestamp","maxTimestamp","dateTimestamp","convertTimestampToDate","timestamp","parsedTimestamp","isoDate","month","validateUrl","url","validateLength","minLength","maxLength","length","validationFields","configs","errorsList","requiredFieldError","lengthTextError","numericError","alphaNumWithSpacesError","alphaNumericError","alphaError","emailError","dateError","urlError","dateRangeError","dateMaxError","dateMinError","fieldName","defaultFields","_a","validateRulesConfig","min","max","dateMin","dateMax","parsedErrorMessage","validation","_b","initializeFormDataAndErrors","fieldsConfig","customUpperCode","required","defaultValue","excludedFocusClasses","useForm","onSubmit","formRef","useRef","focusExecutedRef","formData","setFormData","useState","errors","setErrors","handleValidationSubmit","useCallback","formValid","firstErrorField","name","fieldConfig","config","validationResult","input","useEffect","initialData","errorList","prev","handleFocus","event","target","isFocusable","className","initReCaptcha","handleChange","type","checked","fieldValue","handleBlur","handleSubmit","FieldEnumList","extractErrorKeyAndMessage","errorConfig","fallbackData","index","FieldElement","memo","item","itemClassName","loading","children","errorKey","defaultErrorMessage","customErrorMessage","errorMessage","jsx","Field","classes","InputElement","valueMessage","onBlur","onChange","onFocus","Input","SelectElement","defaultSelectValue","option","Picker","InputDateElement","InputDate","InputCheckBoxElement","Checkbox","TextAreaElement","TextArea","FormSlot","slots","handleOnChange","handleOnBlur","handleOnFocus","contextValue","Slot","Form","props","jsxs","isSlot","renderSlot"],"mappings":"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"}