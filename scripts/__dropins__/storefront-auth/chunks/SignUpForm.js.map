{"version":3,"file":"SignUpForm.js","sources":["/@dropins/storefront-auth/src/hooks/api/useGetAttributesForm.tsx","/@dropins/storefront-auth/src/lib/mergeFormObjects.ts","/@dropins/storefront-auth/src/hooks/components/useSignUpForm.tsx","/@dropins/storefront-auth/src/components/SignUpForm/SignUpForm.tsx"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { getAttributesForm } from '@/auth/api';\nimport { useEffect, useState } from 'preact/hooks';\nimport { inputsDefaultValueSetProps } from '@/auth/types';\nimport { DEFAULT_SIGN_UP_FIELDS } from '@/auth/configs/defaultCreateUserConfigs';\nimport { AttributesFormItemsProps } from '@/auth/data/models';\nimport { simplifyTransformAttributesForm } from '@/auth/lib/simplifyTransformAttributesForm';\n\ninterface UseGetAttributesFormProps {\n  fieldsConfigForApiVersion1: {}[];\n  apiVersion2: boolean;\n  inputsDefaultValueSet?: inputsDefaultValueSetProps[];\n}\n\nconst applyDefaultValuesToFields = (\n  fields: AttributesFormItemsProps[],\n  defaultValues: inputsDefaultValueSetProps[] | any\n) => {\n  if (!defaultValues?.length) return fields;\n\n  return fields.map((el) => {\n    const defaultValue = defaultValues.find(\n      ({ code }: inputsDefaultValueSetProps) => code === el.code\n    )?.defaultValue;\n\n    return defaultValue ? { ...el, defaultValue } : el;\n  });\n};\n\nexport const useGetAttributesForm = ({\n  inputsDefaultValueSet,\n  fieldsConfigForApiVersion1,\n  apiVersion2,\n}: UseGetAttributesFormProps) => {\n  const [fieldsListConfigs, setFieldsListConfigs] = useState<\n    AttributesFormItemsProps[]\n  >([]);\n\n  useEffect(() => {\n    const fetchFieldsConfig = async () => {\n      if (apiVersion2) {\n        const response = await getAttributesForm('customer_account_create');\n\n        if (response?.length) {\n          if (inputsDefaultValueSet?.length) {\n            const fieldsWithDefaultValues: any = applyDefaultValuesToFields(\n              response,\n              inputsDefaultValueSet\n            );\n\n            setFieldsListConfigs(fieldsWithDefaultValues);\n          } else {\n            setFieldsListConfigs(response);\n          }\n        }\n      } else {\n        const transformAttributesFields = simplifyTransformAttributesForm(\n          DEFAULT_SIGN_UP_FIELDS\n        );\n        const transformFieldsConfigForApiVersion1 =\n          simplifyTransformAttributesForm(fieldsConfigForApiVersion1);\n\n        const defaultFieldsWithDefaultValues: any = applyDefaultValuesToFields(\n          transformAttributesFields as AttributesFormItemsProps[],\n          inputsDefaultValueSet\n        );\n\n        setFieldsListConfigs(\n          fieldsConfigForApiVersion1 && fieldsConfigForApiVersion1.length\n            ? transformFieldsConfigForApiVersion1\n            : defaultFieldsWithDefaultValues\n        );\n      }\n    };\n\n    fetchFieldsConfig();\n  }, [apiVersion2, fieldsConfigForApiVersion1, inputsDefaultValueSet]);\n\n  return {\n    fieldsListConfigs: fieldsListConfigs.map((element) => ({\n      ...element,\n      ...(element.code === 'email' ? { autocomplete: 'username' } : {}),\n    })),\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { convertKeysCase } from './convertCase';\n\nexport const mergeFormObjects = (\n  input: Record<string, any>,\n  apiVersion2: boolean\n) => {\n  const baseKeys = [\n    'dob',\n    'email',\n    'firstname',\n    'gender',\n    'lastname',\n    'middlename',\n    'password',\n    'prefix',\n    'suffix',\n    'taxvat',\n  ];\n\n  const newInputs = convertKeysCase(input, 'snakeCase', {\n    firstName: 'firstname',\n    lastName: 'lastname',\n  });\n\n  if (!apiVersion2)\n    return {\n      ...newInputs,\n      ...(newInputs?.gender ? { gender: Number(newInputs?.gender) } : {}),\n    };\n\n  const result: Record<string, any> = {};\n  const customAttributes: Record<string, any>[] = [];\n\n  Object.keys(newInputs).forEach((key: string) => {\n    if (baseKeys.includes(key)) {\n      result[key] = key.includes('gender')\n        ? Number(newInputs[key])\n        : newInputs[key];\n    } else {\n      customAttributes.push({\n        attribute_code: key,\n        value: newInputs[key],\n      });\n    }\n  });\n\n  if (customAttributes.length > 0) {\n    result.custom_attributes = customAttributes;\n  }\n\n  return result;\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport {\n  createCustomer,\n  createCustomerAddress,\n  getCustomerToken,\n} from '@/auth/api';\nimport { getFormValues } from '@/auth/lib/getFormValues';\nimport { mergeFormObjects } from '@/auth/lib/mergeFormObjects';\nimport { validationUniqueSymbolsPassword } from '@/auth/lib/validationUniqueSymbolsPassword';\nimport { useCallback, useState } from 'preact/hooks';\nimport { UseSingUpFormProps } from '@/auth/types';\nimport { EventsList, publishEvents } from '@/auth/lib/acdl';\nimport { checkIsFunction } from '@/auth/lib/checkIsFunction';\nimport { focusOnEmptyPasswordField } from '@/auth/lib/focusOnEmptyPasswordField';\n\nexport const useSignUpForm = ({\n  requireRetypePassword,\n  addressesData,\n  translations,\n  isEmailConfirmationRequired,\n  apiVersion2 = true,\n  passwordConfigs,\n  isAutoSignInEnabled,\n  routeRedirectOnSignIn,\n  routeSignIn,\n  onErrorCallback,\n  onSuccessCallback,\n  setActiveComponent,\n  handleSetInLineAlertProps,\n  routeRedirectOnEmailConfirmationClose,\n}: UseSingUpFormProps) => {\n  const [showPasswordErrorMessage, setShowPasswordErrorMessage] =\n    useState<boolean>(false);\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [confirmPasswordMessage, setConfirmPasswordMessage] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [showEmailConfirmationForm, setShowEmailConfirmationForm] =\n    useState(false);\n  const [isSuccessful, setIsSuccessful] = useState({\n    userName: '',\n    status: false,\n  });\n  const [signUpPasswordValue, setSignUpPasswordValue] = useState('');\n  const [isClickSubmit, setIsClickSubmit] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isKeepMeLogged, setIsKeepMeLogged] = useState(true);\n\n  const onBlurPassword = useCallback(\n    (event: Event) => {\n      const value = (event.target as HTMLInputElement).value;\n\n      setShowPasswordErrorMessage(!value.length);\n\n      if (value.length && confirmPassword.length && value !== confirmPassword) {\n        setConfirmPasswordMessage(translations.passwordMismatch);\n      }\n    },\n    [confirmPassword, translations.passwordMismatch]\n  );\n\n  const onBlurConfirmPassword = useCallback(\n    (event: Event) => {\n      const value = (event.target as HTMLInputElement).value;\n\n      setConfirmPasswordMessage(\n        value.length ? '' : translations.requiredFieldError\n      );\n\n      if (\n        value.length &&\n        signUpPasswordValue.length &&\n        value !== signUpPasswordValue\n      ) {\n        setConfirmPasswordMessage(translations.passwordMismatch);\n      }\n    },\n    [\n      signUpPasswordValue,\n      translations.passwordMismatch,\n      translations.requiredFieldError,\n    ]\n  );\n\n  const handleConfirmPasswordChange = useCallback(\n    (value: string) => {\n      setConfirmPassword(value);\n\n      if (value) {\n        setConfirmPasswordMessage(\n          signUpPasswordValue === value ? '' : translations.passwordMismatch\n        );\n      } else {\n        setConfirmPasswordMessage(translations.requiredFieldError);\n      }\n    },\n    [translations, signUpPasswordValue]\n  );\n\n  const onKeepMeLoggedChange = useCallback(({ target }: any) => {\n    setIsKeepMeLogged(target.checked);\n  }, []);\n\n  const signInButton = useCallback(() => {\n    if (checkIsFunction(setActiveComponent)) {\n      setActiveComponent('signInForm');\n\n      return;\n    }\n\n    if (checkIsFunction(routeSignIn)) {\n      window.location.href = routeSignIn();\n    }\n  }, [setActiveComponent, routeSignIn]);\n\n  const handleSetSignUpPasswordValue = useCallback(\n    (value: string) => {\n      setSignUpPasswordValue(value);\n      setShowPasswordErrorMessage(!value.length);\n      if (value === confirmPassword) {\n        setConfirmPasswordMessage('');\n      }\n    },\n    [confirmPassword]\n  );\n\n  const handleHideEmailConfirmationForm = useCallback(() => {\n    handleSetInLineAlertProps();\n    setSignUpPasswordValue('');\n\n    if (checkIsFunction(routeRedirectOnEmailConfirmationClose)) {\n      window.location.href = routeRedirectOnEmailConfirmationClose();\n    } else {\n      setShowEmailConfirmationForm(false);\n      setActiveComponent?.('signInForm');\n    }\n  }, [\n    handleSetInLineAlertProps,\n    routeRedirectOnEmailConfirmationClose,\n    setActiveComponent,\n  ]);\n\n  const calledLoadingAndClick = () => {\n    setIsClickSubmit(true);\n    setIsLoading(false);\n  };\n\n  const onInvalidFormSubmit = (event: SubmitEvent, isValid: boolean) => {\n    const arePasswordsFilled =\n      signUpPasswordValue.length && confirmPassword.length;\n    const arePasswordsMismatched = signUpPasswordValue !== confirmPassword;\n\n    const handleErrors = () => {\n      setShowPasswordErrorMessage(!signUpPasswordValue.length);\n      if (!confirmPassword) {\n        setConfirmPasswordMessage(translations.requiredFieldError);\n      }\n      if (arePasswordsFilled && arePasswordsMismatched) {\n        setConfirmPasswordMessage(translations.passwordMismatch);\n      }\n    };\n\n    const handleRetypePasswordErrors = () => {\n      setConfirmPasswordMessage(\n        confirmPassword.length\n          ? translations.passwordMismatch\n          : translations.requiredFieldError\n      );\n      focusOnEmptyPasswordField(event, signUpPasswordValue, confirmPassword);\n    };\n\n    if (!isValid) {\n      calledLoadingAndClick();\n      handleErrors();\n      return true;\n    }\n\n    if (\n      requireRetypePassword &&\n      (confirmPasswordMessage.length || arePasswordsMismatched)\n    ) {\n      calledLoadingAndClick();\n      handleRetypePasswordErrors();\n      return true;\n    }\n\n    focusOnEmptyPasswordField(event, signUpPasswordValue, '');\n    handleErrors();\n    return false;\n  };\n\n  const onSubmitSignUp = async (event: SubmitEvent, isValid: boolean) => {\n    handleSetInLineAlertProps();\n    setConfirmPasswordMessage('');\n\n    setIsLoading(true);\n\n    if (onInvalidFormSubmit(event, isValid)) return;\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { confirmPasswordField, ...formValues } = getFormValues(event.target);\n    const { email, password } = formValues;\n\n    const requiredCharacterClasses =\n      passwordConfigs?.requiredCharacterClasses || 0;\n\n    const requiredPasswordLength = passwordConfigs?.minLength || 1;\n\n    // If password validation fails - stop execution, sign-up not possible\n    if (\n      !validationUniqueSymbolsPassword(password, requiredCharacterClasses) ||\n      requiredPasswordLength > password?.length\n    ) {\n      calledLoadingAndClick();\n\n      return;\n    }\n\n    const formData = mergeFormObjects(\n      {\n        ...formValues,\n      },\n      apiVersion2\n    );\n\n    const response = await createCustomer(formData, apiVersion2);\n\n    if (response?.errors?.length) {\n      const { errors } = response;\n\n      handleSetInLineAlertProps?.({\n        type: 'error',\n        text: errors[0]?.message,\n      });\n\n      onErrorCallback?.(errors);\n\n      setUserEmail(email);\n    } else {\n      const createCustomerUserName = response?.firstName;\n\n      publishEvents(EventsList.CREATE_ACCOUNT_EVENT, {\n        ...response,\n      });\n\n      // If email confirmation enabled or auto sign-in disabled - stop execution, auto sign-in not possible\n      if (isEmailConfirmationRequired || !isAutoSignInEnabled) {\n        // Sign-up succeed, execute onSuccess callback\n        onSuccessCallback?.({\n          userName: createCustomerUserName,\n          userEmail: email,\n          status: true,\n        });\n\n        // If email confirmation enabled - show email confirmation form and stop execution\n        if (isEmailConfirmationRequired) {\n          (event.target as HTMLFormElement)?.reset();\n\n          setSignUpPasswordValue('');\n          setShowEmailConfirmationForm(true);\n          setUserEmail(email);\n          setIsLoading(false);\n\n          return;\n        }\n\n        // If auto sign-in disabled - render success notification and stop execution\n        if (!isAutoSignInEnabled) {\n          setIsLoading(false);\n\n          setIsSuccessful({\n            userName: createCustomerUserName,\n            status: true,\n          });\n\n          return;\n        }\n      }\n\n      // Auto sign-in after sign-up\n      const loginResponse = await getCustomerToken({\n        email,\n        password,\n        translations,\n        handleSetInLineAlertProps,\n        onErrorCallback,\n      });\n\n      if (loginResponse?.userName) {\n        if (addressesData?.length) {\n          for (const address of addressesData) {\n            try {\n              await createCustomerAddress(address);\n            } catch (error) {\n              console.error(\n                translations.failedCreateCustomerAddress,\n                address,\n                error\n              );\n            }\n          }\n        }\n\n        onSuccessCallback?.({\n          userName: loginResponse?.userName,\n          userEmail: loginResponse?.userEmail,\n          status: true,\n        });\n\n        if (checkIsFunction(routeRedirectOnSignIn)) {\n          window.location.href = routeRedirectOnSignIn();\n        } else {\n          setIsSuccessful({\n            userName: loginResponse?.userName,\n            status: true,\n          });\n        }\n      } else {\n        // This is a fallback block, executed when registration succeed but sign-in for some reason failed\n        onSuccessCallback?.({\n          userName: createCustomerUserName,\n          userEmail: email,\n          status: true,\n        });\n\n        setIsSuccessful({\n          userName: createCustomerUserName,\n          status: true,\n        });\n      }\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    showPasswordErrorMessage,\n    confirmPassword,\n    confirmPasswordMessage,\n    isKeepMeLogged,\n    userEmail,\n    showEmailConfirmationForm,\n    isSuccessful,\n    isClickSubmit,\n    signUpPasswordValue,\n    isLoading,\n    onSubmitSignUp,\n    signInButton,\n    handleSetSignUpPasswordValue,\n    onKeepMeLoggedChange,\n    handleHideEmailConfirmationForm,\n    handleConfirmPasswordChange,\n    onBlurPassword,\n    onBlurConfirmPassword,\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { FunctionComponent } from 'preact';\nimport { classes, Slot } from '@adobe-commerce/elsie/lib';\nimport { useGetAttributesForm } from '@/auth/hooks/api/useGetAttributesForm';\nimport { useGetStoreConfigs } from '@/auth/hooks/api/useGetStoreConfigs';\nimport { usePasswordValidationMessage } from '@/auth/hooks/components/usePasswordValidationMessage';\nimport { useSignUpForm } from '@/auth/hooks/components/useSignUpForm';\nimport { SignUpFormProps } from '@/auth/types';\nimport { useInLineAlert } from '@/auth/hooks/useInLineAlert';\nimport { Form, Button, EmailConfirmationForm } from '@/auth/components';\nimport {\n  Field,\n  Checkbox,\n  InLineAlert,\n  InputPassword,\n  Header,\n} from '@adobe-commerce/elsie/components';\nimport SkeletonLoader from '../SkeletonLoader';\nimport '@/auth/components/SignUpForm/SignUpForm.css';\nimport { useMemo } from 'preact/hooks';\nimport { useCustomTranslations } from '@/auth/hooks/useCustomTranslations';\n\nexport const SignUpForm: FunctionComponent<SignUpFormProps> = ({\n  requireRetypePassword = false,\n  addressesData,\n  formSize = 'default',\n  inputsDefaultValueSet,\n  fieldsConfigForApiVersion1,\n  apiVersion2 = true,\n  isAutoSignInEnabled = true,\n  hideCloseBtnOnEmailConfirmation = false,\n  routeRedirectOnEmailConfirmationClose,\n  routeRedirectOnSignIn,\n  routeSignIn,\n  onErrorCallback,\n  onSuccessCallback,\n  setActiveComponent,\n  slots,\n}) => {\n  /**\n   * useCustomTranslations is required to support extensibility of error messages.\n   * Ensure all error-related translation paths include \".default\"\n   * to allow future handling of dynamic or nested error messages.\n   */\n  const translations = useCustomTranslations({\n    title: 'Auth.SignUpForm.title',\n    buttonPrimary: 'Auth.SignUpForm.buttonPrimary',\n    buttonSecondary: 'Auth.SignUpForm.buttonSecondary',\n    keepMeLoggedText: 'Auth.SignUpForm.keepMeLoggedText',\n    customerTokenErrorMessage: 'Auth.Api.customerTokenErrorMessage',\n    failedCreateCustomerAddress: 'Auth.SignUpForm.failedCreateCustomerAddress',\n    placeholder: 'Auth.InputPassword.placeholder',\n    floatingLabel: 'Auth.InputPassword.floatingLabel',\n    requiredFieldError: 'Auth.FormText.requiredFieldError.default',\n    confirmPasswordPlaceholder: 'Auth.SignUpForm.confirmPassword.placeholder',\n    confirmPasswordFloatingLabel:\n      'Auth.SignUpForm.confirmPassword.floatingLabel',\n    passwordMismatch: 'Auth.SignUpForm.confirmPassword.passwordMismatch', //NOSONAR\n  });\n\n  const { passwordConfigs, isEmailConfirmationRequired } = useGetStoreConfigs();\n  const { fieldsListConfigs } = useGetAttributesForm({\n    fieldsConfigForApiVersion1,\n    apiVersion2,\n    inputsDefaultValueSet,\n  });\n\n  const { inLineAlertProps, handleSetInLineAlertProps } = useInLineAlert();\n\n  const {\n    showPasswordErrorMessage,\n    confirmPassword,\n    confirmPasswordMessage,\n    isKeepMeLogged,\n    userEmail,\n    showEmailConfirmationForm,\n    isSuccessful,\n    isClickSubmit,\n    signUpPasswordValue,\n    isLoading,\n    onSubmitSignUp,\n    signInButton,\n    handleSetSignUpPasswordValue,\n    onKeepMeLoggedChange,\n    handleHideEmailConfirmationForm,\n    handleConfirmPasswordChange,\n    onBlurPassword,\n    onBlurConfirmPassword,\n  } = useSignUpForm({\n    requireRetypePassword,\n    addressesData,\n    translations,\n    isEmailConfirmationRequired,\n    apiVersion2,\n    passwordConfigs,\n    isAutoSignInEnabled,\n    routeRedirectOnSignIn,\n    routeSignIn,\n    onErrorCallback,\n    onSuccessCallback,\n    setActiveComponent,\n    handleSetInLineAlertProps,\n    routeRedirectOnEmailConfirmationClose,\n  });\n\n  const { isValidUniqueSymbols, defaultLengthMessage } =\n    usePasswordValidationMessage({\n      password: signUpPasswordValue,\n      isClickSubmit,\n      passwordConfigs,\n    });\n\n  const validationPasswordMessage = useMemo(() => {\n    if (showPasswordErrorMessage) {\n      return translations.requiredFieldError;\n    }\n\n    const hasSubmitError =\n      isValidUniqueSymbols === 'error' ||\n      defaultLengthMessage?.status === 'error';\n\n    if (hasSubmitError) {\n      return ' ';\n    }\n\n    return '';\n  }, [\n    defaultLengthMessage?.status,\n    isValidUniqueSymbols,\n    showPasswordErrorMessage,\n    translations.requiredFieldError,\n  ]);\n\n  const shouldShowPersistLoginCheckbox =\n    !isEmailConfirmationRequired && addressesData?.length;\n\n  if (!fieldsListConfigs.length && apiVersion2) {\n    return (\n      <div\n        className={`auth-sign-up-form auth-sign-up-form--${formSize} skeleton-loader`}\n        data-testid=\"SignUpForm\"\n      >\n        <SkeletonLoader activeSkeleton=\"signUpForm\" />\n      </div>\n    );\n  }\n\n  if (isSuccessful.status && slots?.SuccessNotification) {\n    return (\n      <Slot\n        data-testid=\"successNotificationTestId\"\n        name=\"SuccessNotification\"\n        slot={slots?.SuccessNotification}\n        context={{ isSuccessful }}\n      />\n    );\n  }\n\n  if (showEmailConfirmationForm) {\n    return (\n      <EmailConfirmationForm\n        formSize={formSize}\n        userEmail={userEmail}\n        inLineAlertProps={inLineAlertProps}\n        hideCloseBtnOnEmailConfirmation={hideCloseBtnOnEmailConfirmation}\n        handleSetInLineAlertProps={handleSetInLineAlertProps}\n        onPrimaryButtonClick={handleHideEmailConfirmationForm}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={classes([\n        'auth-sign-up-form',\n        `auth-sign-up-form--${formSize}`,\n      ])}\n      data-testid=\"SignUpForm\"\n    >\n      <Header\n        title={translations.title}\n        divider={false}\n        className=\"auth-sign-up-form__title\"\n      />\n      {inLineAlertProps.text ? (\n        <InLineAlert\n          className=\"auth-sign-up-form__notification\"\n          type={inLineAlertProps.type}\n          variant=\"secondary\"\n          heading={inLineAlertProps.text}\n          icon={inLineAlertProps.icon}\n        />\n      ) : null}\n      <Form\n        onSubmit={onSubmitSignUp}\n        className=\"auth-sign-up-form__form\"\n        loading={isLoading}\n        name=\"signUp_form\"\n        fieldsConfig={fieldsListConfigs}\n        slots={slots}\n      >\n        <InputPassword\n          validateLengthConfig={defaultLengthMessage}\n          className=\"auth-sign-up-form__form__field\"\n          autoComplete={'current-password'}\n          name={'password'}\n          minLength={passwordConfigs?.minLength}\n          errorMessage={validationPasswordMessage}\n          defaultValue={signUpPasswordValue}\n          uniqueSymbolsStatus={isValidUniqueSymbols}\n          requiredCharacterClasses={passwordConfigs?.requiredCharacterClasses}\n          onValue={handleSetSignUpPasswordValue}\n          placeholder={translations.placeholder}\n          floatingLabel={translations.floatingLabel}\n          onBlur={onBlurPassword}\n        >\n          {requireRetypePassword ? (\n            <div className=\"auth-sign-up-form__form__confirm-wrapper\">\n              <InputPassword\n                className=\"auth-sign-up-form__form__field auth-sign-up-form__form__field--confirm-password\"\n                autoComplete=\"confirmPassword\"\n                name=\"confirmPasswordField\"\n                placeholder={translations.confirmPasswordPlaceholder}\n                floatingLabel={translations.confirmPasswordFloatingLabel}\n                errorMessage={confirmPasswordMessage}\n                defaultValue={confirmPassword}\n                onValue={handleConfirmPasswordChange}\n                onBlur={onBlurConfirmPassword}\n              />\n            </div>\n          ) : null}\n\n          {shouldShowPersistLoginCheckbox ? (\n            <div\n              className={'auth-sign-up-form__automatic-login'}\n              data-testid=\"automaticLogin\"\n            >\n              <Field>\n                <Checkbox\n                  name=\"\"\n                  placeholder={translations.keepMeLoggedText}\n                  label={translations.keepMeLoggedText}\n                  checked={isKeepMeLogged}\n                  onChange={onKeepMeLoggedChange}\n                />\n              </Field>\n            </div>\n          ) : null}\n        </InputPassword>\n\n        <Slot\n          name=\"PrivacyPolicyConsent\"\n          data-testid={'privacyPolicyConsent'}\n          slot={slots?.PrivacyPolicyConsent}\n          key={'privacyPolicyConsent'}\n        />\n\n        <div className=\"auth-sign-up-form-buttons\">\n          <Button\n            className=\"auth-sign-up-form-buttons--signin\"\n            type=\"button\"\n            variant=\"tertiary\"\n            style={{ padding: 0 }}\n            buttonText={translations.buttonSecondary}\n            enableLoader={false}\n            onClick={signInButton}\n          />\n          <Button\n            type=\"submit\"\n            buttonText={translations.buttonPrimary}\n            variant=\"primary\"\n            enableLoader={isLoading}\n          />\n        </div>\n      </Form>\n      <div id=\"createCustomerV2\" />\n    </div>\n  );\n};\n"],"names":["applyDefaultValuesToFields","fields","defaultValues","el","defaultValue","_a","code","useGetAttributesForm","inputsDefaultValueSet","fieldsConfigForApiVersion1","apiVersion2","fieldsListConfigs","setFieldsListConfigs","useState","useEffect","response","getAttributesForm","fieldsWithDefaultValues","transformAttributesFields","simplifyTransformAttributesForm","DEFAULT_SIGN_UP_FIELDS","transformFieldsConfigForApiVersion1","defaultFieldsWithDefaultValues","element","mergeFormObjects","input","baseKeys","newInputs","convertKeysCase","result","customAttributes","key","useSignUpForm","requireRetypePassword","addressesData","translations","isEmailConfirmationRequired","passwordConfigs","isAutoSignInEnabled","routeRedirectOnSignIn","routeSignIn","onErrorCallback","onSuccessCallback","setActiveComponent","handleSetInLineAlertProps","routeRedirectOnEmailConfirmationClose","showPasswordErrorMessage","setShowPasswordErrorMessage","confirmPassword","setConfirmPassword","confirmPasswordMessage","setConfirmPasswordMessage","userEmail","setUserEmail","showEmailConfirmationForm","setShowEmailConfirmationForm","isSuccessful","setIsSuccessful","signUpPasswordValue","setSignUpPasswordValue","isClickSubmit","setIsClickSubmit","isLoading","setIsLoading","isKeepMeLogged","setIsKeepMeLogged","onBlurPassword","useCallback","event","value","onBlurConfirmPassword","handleConfirmPasswordChange","onKeepMeLoggedChange","target","signInButton","checkIsFunction","handleSetSignUpPasswordValue","handleHideEmailConfirmationForm","calledLoadingAndClick","onInvalidFormSubmit","isValid","arePasswordsFilled","arePasswordsMismatched","handleErrors","handleRetypePasswordErrors","focusOnEmptyPasswordField","confirmPasswordField","formValues","getFormValues","email","password","requiredCharacterClasses","requiredPasswordLength","validationUniqueSymbolsPassword","formData","createCustomer","errors","_b","createCustomerUserName","publishEvents","EventsList","_c","loginResponse","getCustomerToken","address","createCustomerAddress","error","SignUpForm","formSize","hideCloseBtnOnEmailConfirmation","slots","useCustomTranslations","useGetStoreConfigs","inLineAlertProps","useInLineAlert","onSubmitSignUp","isValidUniqueSymbols","defaultLengthMessage","usePasswordValidationMessage","validationPasswordMessage","useMemo","shouldShowPersistLoginCheckbox","jsx","SkeletonLoader","Slot","EmailConfirmationForm","jsxs","classes","Header","InLineAlert","Form","InputPassword","Field","Checkbox","Button"],"mappings":"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"}