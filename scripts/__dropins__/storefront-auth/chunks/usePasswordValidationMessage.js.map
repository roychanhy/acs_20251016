{"version":3,"file":"usePasswordValidationMessage.js","sources":["/@dropins/storefront-auth/src/hooks/api/useGetStoreConfigs.tsx","/@dropins/storefront-auth/src/lib/validationUniqueSymbolsPassword.ts","/@dropins/storefront-auth/src/hooks/components/usePasswordValidationMessage.tsx"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { getStoreConfig } from '@/auth/api';\nimport { useEffect, useState } from 'preact/hooks';\nimport { StoreConfigModel } from '../../data/models';\n\nexport const useGetStoreConfigs = () => {\n  const [isEmailConfirmationRequired, setIsEmailConfirmationRequired] =\n    useState(false);\n  const [passwordConfigs, setPasswordConfigs] = useState<{\n    minLength: number;\n    requiredCharacterClasses: number;\n  } | null>(null);\n\n  useEffect(() => {\n    const storeConfigString = sessionStorage.getItem('storeConfig');\n\n    const cachedStoreConfig: StoreConfigModel = storeConfigString\n      ? JSON.parse(storeConfigString)\n      : null;\n\n    if (cachedStoreConfig) {\n      const { minLength, requiredCharacterClasses, createAccountConfirmation } =\n        cachedStoreConfig;\n\n      setPasswordConfigs({\n        minLength,\n        requiredCharacterClasses,\n      });\n\n      setIsEmailConfirmationRequired(createAccountConfirmation);\n    } else {\n      getStoreConfig().then((response) => {\n        if (response) {\n          const {\n            minLength,\n            requiredCharacterClasses,\n            createAccountConfirmation,\n          } = response;\n\n          sessionStorage.setItem('storeConfig', JSON.stringify(response));\n\n          setPasswordConfigs({\n            minLength,\n            requiredCharacterClasses,\n          });\n\n          setIsEmailConfirmationRequired(createAccountConfirmation);\n        }\n      });\n    }\n  }, []);\n\n  return { passwordConfigs, isEmailConfirmationRequired };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const validationUniqueSymbolsPassword = (\n  password: string,\n  uniqueSymbolsCount: number\n) => {\n  if (uniqueSymbolsCount <= 1) return true;\n\n  const numbers = /[0-9]/.test(password) ? 1 : 0;\n  const lowerCaseLetter = /[a-z]/.test(password) ? 1 : 0;\n  const upperCaseLetter = /[A-Z]/.test(password) ? 1 : 0;\n  const specialSymbols = /[^a-zA-Z0-9\\s]/.test(password) ? 1 : 0;\n\n  return (\n    numbers + lowerCaseLetter + upperCaseLetter + specialSymbols >=\n    uniqueSymbolsCount\n  );\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { validationUniqueSymbolsPassword } from '@/auth/lib/validationUniqueSymbolsPassword';\nimport { useEffect, useMemo, useState } from 'preact/hooks';\nimport { ValidateLengthConfigProps, statusTypes } from '@/auth/types';\nimport { useText } from '@adobe-commerce/elsie/i18n';\n\ninterface UsePasswordValidationMessageProps {\n  passwordConfigs: {\n    minLength: number;\n    requiredCharacterClasses: number;\n  } | null;\n  isClickSubmit: boolean;\n  password: string;\n}\n\nexport const usePasswordValidationMessage = ({\n  passwordConfigs,\n  isClickSubmit,\n  password,\n}: UsePasswordValidationMessageProps) => {\n  const translations = useText({\n    messageLengthPassword:\n      'Auth.PasswordValidationMessage.messageLengthPassword',\n  });\n\n  const [isValidUniqueSymbols, setIsValidUniqueSymbols] =\n    useState<statusTypes>('pending');\n\n  useEffect(() => {\n    if (!passwordConfigs) return;\n\n    const result = validationUniqueSymbolsPassword(\n      password,\n      passwordConfigs.requiredCharacterClasses\n    );\n\n    if (isClickSubmit && password.length > 0) {\n      result\n        ? setIsValidUniqueSymbols('success')\n        : setIsValidUniqueSymbols('error');\n    } else if (isClickSubmit && password.length === 0) {\n      setIsValidUniqueSymbols('pending');\n    } else {\n      result\n        ? setIsValidUniqueSymbols('success')\n        : setIsValidUniqueSymbols('pending');\n    }\n  }, [isClickSubmit, passwordConfigs, password]);\n\n  const defaultLengthMessage: ValidateLengthConfigProps | undefined =\n    useMemo(() => {\n      if (!passwordConfigs) return;\n\n      const defaultMessage: ValidateLengthConfigProps = {\n        status: 'pending',\n        icon: 'pending',\n        message: translations.messageLengthPassword?.replace(\n          '{minLength}',\n          `${passwordConfigs.minLength}`\n        ),\n      };\n\n      if (password.length && password.length >= passwordConfigs.minLength) {\n        return { ...defaultMessage, icon: 'success', status: 'success' };\n      }\n\n      if (password.length && password.length < passwordConfigs.minLength) {\n        return isClickSubmit\n          ? { ...defaultMessage, icon: 'error', status: 'error' }\n          : { ...defaultMessage, icon: 'pending', status: 'pending' };\n      }\n\n      return defaultMessage;\n    }, [\n      passwordConfigs,\n      translations.messageLengthPassword,\n      password?.length,\n      isClickSubmit,\n    ]);\n\n  return { isValidUniqueSymbols, defaultLengthMessage };\n};\n"],"names":["useGetStoreConfigs","isEmailConfirmationRequired","setIsEmailConfirmationRequired","useState","passwordConfigs","setPasswordConfigs","useEffect","storeConfigString","cachedStoreConfig","minLength","requiredCharacterClasses","createAccountConfirmation","getStoreConfig","response","validationUniqueSymbolsPassword","password","uniqueSymbolsCount","numbers","lowerCaseLetter","upperCaseLetter","specialSymbols","usePasswordValidationMessage","isClickSubmit","translations","useText","isValidUniqueSymbols","setIsValidUniqueSymbols","result","defaultLengthMessage","useMemo","defaultMessage","_a"],"mappings":"oPAqBO,MAAMA,EAAqB,IAAM,CACtC,KAAM,CAACC,EAA6BC,CAA8B,EAChEC,EAAS,EAAK,EACV,CAACC,EAAiBC,CAAkB,EAAIF,EAGpC,IAAI,EAEd,OAAAG,EAAU,IAAM,CACR,MAAAC,EAAoB,eAAe,QAAQ,aAAa,EAExDC,EAAsCD,EACxC,KAAK,MAAMA,CAAiB,EAC5B,KAEJ,GAAIC,EAAmB,CACrB,KAAM,CAAE,UAAAC,EAAW,yBAAAC,EAA0B,0BAAAC,CAC3C,EAAAH,EAEiBH,EAAA,CACjB,UAAAI,EACA,yBAAAC,CAAA,CACD,EAEDR,EAA+BS,CAAyB,CAAA,MAEzCC,EAAA,EAAE,KAAMC,GAAa,CAClC,GAAIA,EAAU,CACN,KAAA,CACJ,UAAAJ,EACA,yBAAAC,EACA,0BAAAC,CAAA,EACEE,EAEJ,eAAe,QAAQ,cAAe,KAAK,UAAUA,CAAQ,CAAC,EAE3CR,EAAA,CACjB,UAAAI,EACA,yBAAAC,CAAA,CACD,EAEDR,EAA+BS,CAAyB,CAAA,CAC1D,CACD,CAEL,EAAG,EAAE,EAEE,CAAE,gBAAAP,EAAiB,4BAAAH,CAA4B,CACxD,ECpDaa,EAAkC,CAC7CC,EACAC,IACG,CACC,GAAAA,GAAsB,EAAU,MAAA,GAEpC,MAAMC,EAAU,QAAQ,KAAKF,CAAQ,EAAI,EAAI,EACvCG,EAAkB,QAAQ,KAAKH,CAAQ,EAAI,EAAI,EAC/CI,EAAkB,QAAQ,KAAKJ,CAAQ,EAAI,EAAI,EAC/CK,EAAiB,iBAAiB,KAAKL,CAAQ,EAAI,EAAI,EAG3D,OAAAE,EAAUC,EAAkBC,EAAkBC,GAC9CJ,CAEJ,ECDaK,EAA+B,CAAC,CAC3C,gBAAAjB,EACA,cAAAkB,EACA,SAAAP,CACF,IAAyC,CACvC,MAAMQ,EAAeC,EAAQ,CAC3B,sBACE,sDAAA,CACH,EAEK,CAACC,EAAsBC,CAAuB,EAClDvB,EAAsB,SAAS,EAEjCG,EAAU,IAAM,CACd,GAAI,CAACF,EAAiB,OAEtB,MAAMuB,EAASb,EACbC,EACAX,EAAgB,wBAClB,EAEIkB,GAAiBP,EAAS,OAAS,EAEjCW,EADJC,EAC4B,UACA,OADS,EAE5BL,GAAiBP,EAAS,SAAW,EAC9CW,EAAwB,SAAS,EAG7BA,EADJC,EAC4B,UACA,SADS,CAGtC,EAAA,CAACL,EAAelB,EAAiBW,CAAQ,CAAC,EAEvC,MAAAa,EACJC,EAAQ,IAAM,OACZ,GAAI,CAACzB,EAAiB,OAEtB,MAAM0B,EAA4C,CAChD,OAAQ,UACR,KAAM,UACN,SAASC,EAAAR,EAAa,wBAAb,YAAAQ,EAAoC,QAC3C,cACA,GAAG3B,EAAgB,SAAS,GAEhC,EAEA,OAAIW,EAAS,QAAUA,EAAS,QAAUX,EAAgB,UACjD,CAAE,GAAG0B,EAAgB,KAAM,UAAW,OAAQ,SAAU,EAG7Df,EAAS,QAAUA,EAAS,OAASX,EAAgB,UAChDkB,EACH,CAAE,GAAGQ,EAAgB,KAAM,QAAS,OAAQ,OAAQ,EACpD,CAAE,GAAGA,EAAgB,KAAM,UAAW,OAAQ,SAAU,EAGvDA,CAAA,EACN,CACD1B,EACAmB,EAAa,sBACbR,GAAA,YAAAA,EAAU,OACVO,CAAA,CACD,EAEI,MAAA,CAAE,qBAAAG,EAAsB,qBAAAG,CAAqB,CACtD"}