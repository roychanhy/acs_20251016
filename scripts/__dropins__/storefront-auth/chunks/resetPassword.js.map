{"version":3,"file":"resetPassword.js","sources":["/@dropins/storefront-auth/src/api/resetPassword/graphql/resetPassword.graphql.ts","/@dropins/storefront-auth/src/data/transforms/transform-reset-password.ts","/@dropins/storefront-auth/src/api/resetPassword/resetPassword.ts"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nexport const RESET_PASSWORD = /* GraphQL */ `\n  mutation RESET_PASSWORD(\n    $email: String!\n    $resetPasswordToken: String!\n    $newPassword: String!\n  ) {\n    resetPassword(\n      email: $email\n      resetPasswordToken: $resetPasswordToken\n      newPassword: $newPassword\n    )\n  }\n`;\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { ResetPasswordResponse } from '@/auth/types';\nimport { ResetPasswordModel } from '../models';\n\nexport const transformResetPassword = (\n  response: ResetPasswordResponse\n): ResetPasswordModel => {\n  let message: string = '';\n\n  if (response?.errors?.length)\n    message = response?.errors[0]?.message as unknown as string;\n\n  return {\n    message,\n    success: Boolean(response?.data?.resetPassword),\n  };\n};\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2024 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { handleNetworkError } from '@/auth/lib/network-error';\nimport { fetchGraphQl } from '../fetch-graphql';\nimport { RESET_PASSWORD } from './graphql/resetPassword.graphql';\nimport { transformResetPassword } from '@/auth/data/transforms/transform-reset-password';\nimport { ResetPasswordModel } from '@/auth/data/models';\nimport { ResetPasswordResponse } from '@/auth/types';\nimport { setReCaptchaToken } from '@/auth/lib/setReCaptchaToken';\n\nexport const resetPassword = async (\n  email: string,\n  resetPasswordToken: string,\n  newPassword: string\n): Promise<ResetPasswordModel> => {\n  await setReCaptchaToken();\n\n  return await fetchGraphQl(RESET_PASSWORD, {\n    method: 'POST',\n    variables: { email, resetPasswordToken, newPassword },\n  })\n    .then((response: ResetPasswordResponse) => {\n      return transformResetPassword(response);\n    })\n    .catch(handleNetworkError);\n};\n"],"names":["RESET_PASSWORD","transformResetPassword","response","message","_a","_b","_c","resetPassword","email","resetPasswordToken","newPassword","setReCaptchaToken","fetchGraphQl","handleNetworkError"],"mappings":"yFAiBa,MAAAA,EAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECG/BC,EACXC,GACuB,WACvB,IAAIC,EAAkB,GAEtB,OAAIC,EAAAF,GAAA,YAAAA,EAAU,SAAV,MAAAE,EAAkB,SACVD,GAAAE,EAAAH,GAAA,YAAAA,EAAU,OAAO,KAAjB,YAAAG,EAAqB,SAE1B,CACL,QAAAF,EACA,QAAS,IAAQG,EAAAJ,GAAA,YAAAA,EAAU,OAAV,MAAAI,EAAgB,cACnC,CACF,ECPaC,EAAgB,MAC3BC,EACAC,EACAC,KAEA,MAAMC,EAAkB,EAEjB,MAAMC,EAAaZ,EAAgB,CACxC,OAAQ,OACR,UAAW,CAAE,MAAAQ,EAAO,mBAAAC,EAAoB,YAAAC,CAAY,CAAA,CACrD,EACE,KAAMR,GACED,EAAuBC,CAAQ,CACvC,EACA,MAAMW,CAAkB"}