{"version":3,"file":"TargetedBlock.js","sources":["/@dropins/storefront-personalization/src/lib/condition-matcher.ts","/@dropins/storefront-personalization/src/containers/TargetedBlock/TargetedBlock.tsx"],"sourcesContent":["/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2025 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport { PersonalizationData } from \"@/personalization/data/models\";\n\nconst isMatch = (activeRules: string[], rules: string[]): boolean => (\n    activeRules && rules.some((rule) => activeRules.includes(rule.trim()))\n);\nconst isGroupMatch = (actualGroup: string, configuredGroups: string[]): boolean  => configuredGroups.includes(actualGroup);\n\nexport default function conditionsMatched(actual: PersonalizationData, configured: PersonalizationData): boolean {\n  const [actualGroup] = actual.groups;\n\n  if (configured.segments.length > 0 && !isMatch(actual.segments, configured.segments)) {\n    return false;\n  }\n  if (configured.groups.length > 0 && !isGroupMatch(actualGroup, configured.groups)) {\n    return false;\n  }\n\n  if (configured.cartRules.length > 0 && !isMatch(actual.cartRules, configured.cartRules)) {\n    return false;\n  }\n\n  return true;\n}\n\n","/********************************************************************\n * ADOBE CONFIDENTIAL\n * __________________\n *\n *  Copyright 2025 Adobe\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe and its suppliers, if any. The intellectual\n * and technical concepts contained herein are proprietary to Adobe\n * and its suppliers and are protected by all applicable intellectual\n * property laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe.\n *******************************************************************/\n\nimport {\n  HTMLAttributes,\n  useState,\n  useEffect\n} from 'preact/compat';\nimport { events } from '@adobe-commerce/event-bus';\nimport { Container, Slot, SlotProps } from '@adobe-commerce/elsie/lib';\nimport { PersonalizationData } from \"@/personalization/data/models\";\nimport { getPersonalizationData } from \"@/personalization/api\";\nimport conditionsMatched from \"@/personalization/lib/condition-matcher\";\nimport { registerTypeIsFirst } from \"@/personalization/lib/type-registry\";\n\nexport interface TargetedBlockProps extends HTMLAttributes<HTMLDivElement> {\n  slots: {\n    Content: SlotProps\n  },\n  personalizationData: PersonalizationData,\n  type?: string,\n}\n\nexport const TargetedBlock: Container<TargetedBlockProps> = ({\n  slots,\n  personalizationData,\n  type,\n}: TargetedBlockProps) => {\n  const [visible, setVisible] = useState<boolean>(() => (\n      conditionsMatched(getPersonalizationData(), personalizationData) && registerTypeIsFirst(type)\n  ));\n\n  useEffect(() => {\n    const presonalizationUpdated = events.on(\n        'personalization/updated',\n        (data: PersonalizationData) => {\n          setVisible(conditionsMatched(data, personalizationData) && registerTypeIsFirst(type));\n        }\n    );\n\n    return () => {\n      presonalizationUpdated?.off();\n    };\n  }, [type, personalizationData]);\n\n  return visible ? (<Slot name=\"Content\" slot={slots.Content} context={{}} />) : null\n};\n"],"names":["isMatch","activeRules","rules","rule","isGroupMatch","actualGroup","configuredGroups","conditionsMatched","actual","configured","TargetedBlock","slots","personalizationData","type","visible","setVisible","useState","getPersonalizationData","registerTypeIsFirst","useEffect","presonalizationUpdated","events","data","jsx","Slot"],"mappings":"qUAmBA,MAAMA,EAAU,CAACC,EAAuBC,IACpCD,GAAeC,EAAM,KAAMC,GAASF,EAAY,SAASE,EAAK,KAAM,CAAA,CAAC,EAEnEC,EAAe,CAACC,EAAqBC,IAAyCA,EAAiB,SAASD,CAAW,EAEjG,SAAAE,EAAkBC,EAA6BC,EAA0C,CACzG,KAAA,CAACJ,CAAW,EAAIG,EAAO,OASzB,MAPA,EAAAC,EAAW,SAAS,OAAS,GAAK,CAACT,EAAQQ,EAAO,SAAUC,EAAW,QAAQ,GAG/EA,EAAW,OAAO,OAAS,GAAK,CAACL,EAAaC,EAAaI,EAAW,MAAM,GAI5EA,EAAW,UAAU,OAAS,GAAK,CAACT,EAAQQ,EAAO,UAAWC,EAAW,SAAS,EAKxF,CCFO,MAAMC,EAA+C,CAAC,CAC3D,MAAAC,EACA,oBAAAC,EACA,KAAAC,CACF,IAA0B,CACxB,KAAM,CAACC,EAASC,CAAU,EAAIC,EAAkB,IAC5CT,EAAkBU,EAAA,EAA0BL,CAAmB,GAAKM,EAAoBL,CAAI,CAC/F,EAED,OAAAM,EAAU,IAAM,CACd,MAAMC,EAAyBC,EAAO,GAClC,0BACCC,GAA8B,CAC7BP,EAAWR,EAAkBe,EAAMV,CAAmB,GAAKM,EAAoBL,CAAI,CAAC,CAAA,CAE1F,EAEA,MAAO,IAAM,CACXO,GAAA,MAAAA,EAAwB,KAC1B,CAAA,EACC,CAACP,EAAMD,CAAmB,CAAC,EAEvBE,EAAYS,EAAAC,EAAA,CAAK,KAAK,UAAU,KAAMb,EAAM,QAAS,QAAS,CAAC,CAAA,CAAG,EAAM,IACjF"}